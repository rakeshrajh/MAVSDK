// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mission/mission.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mission_2fmission_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mission_2fmission_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mission_2fmission_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mission_2fmission_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[30]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mission_2fmission_2eproto;
namespace mavsdk {
namespace rpc {
namespace mission {
class CancelMissionDownloadRequest;
class CancelMissionDownloadRequestDefaultTypeInternal;
extern CancelMissionDownloadRequestDefaultTypeInternal _CancelMissionDownloadRequest_default_instance_;
class CancelMissionDownloadResponse;
class CancelMissionDownloadResponseDefaultTypeInternal;
extern CancelMissionDownloadResponseDefaultTypeInternal _CancelMissionDownloadResponse_default_instance_;
class CancelMissionUploadRequest;
class CancelMissionUploadRequestDefaultTypeInternal;
extern CancelMissionUploadRequestDefaultTypeInternal _CancelMissionUploadRequest_default_instance_;
class CancelMissionUploadResponse;
class CancelMissionUploadResponseDefaultTypeInternal;
extern CancelMissionUploadResponseDefaultTypeInternal _CancelMissionUploadResponse_default_instance_;
class ClearMissionRequest;
class ClearMissionRequestDefaultTypeInternal;
extern ClearMissionRequestDefaultTypeInternal _ClearMissionRequest_default_instance_;
class ClearMissionResponse;
class ClearMissionResponseDefaultTypeInternal;
extern ClearMissionResponseDefaultTypeInternal _ClearMissionResponse_default_instance_;
class DownloadMissionRequest;
class DownloadMissionRequestDefaultTypeInternal;
extern DownloadMissionRequestDefaultTypeInternal _DownloadMissionRequest_default_instance_;
class DownloadMissionResponse;
class DownloadMissionResponseDefaultTypeInternal;
extern DownloadMissionResponseDefaultTypeInternal _DownloadMissionResponse_default_instance_;
class GetReturnToLaunchAfterMissionRequest;
class GetReturnToLaunchAfterMissionRequestDefaultTypeInternal;
extern GetReturnToLaunchAfterMissionRequestDefaultTypeInternal _GetReturnToLaunchAfterMissionRequest_default_instance_;
class GetReturnToLaunchAfterMissionResponse;
class GetReturnToLaunchAfterMissionResponseDefaultTypeInternal;
extern GetReturnToLaunchAfterMissionResponseDefaultTypeInternal _GetReturnToLaunchAfterMissionResponse_default_instance_;
class ImportQgroundcontrolMissionRequest;
class ImportQgroundcontrolMissionRequestDefaultTypeInternal;
extern ImportQgroundcontrolMissionRequestDefaultTypeInternal _ImportQgroundcontrolMissionRequest_default_instance_;
class ImportQgroundcontrolMissionResponse;
class ImportQgroundcontrolMissionResponseDefaultTypeInternal;
extern ImportQgroundcontrolMissionResponseDefaultTypeInternal _ImportQgroundcontrolMissionResponse_default_instance_;
class IsMissionFinishedRequest;
class IsMissionFinishedRequestDefaultTypeInternal;
extern IsMissionFinishedRequestDefaultTypeInternal _IsMissionFinishedRequest_default_instance_;
class IsMissionFinishedResponse;
class IsMissionFinishedResponseDefaultTypeInternal;
extern IsMissionFinishedResponseDefaultTypeInternal _IsMissionFinishedResponse_default_instance_;
class MissionItem;
class MissionItemDefaultTypeInternal;
extern MissionItemDefaultTypeInternal _MissionItem_default_instance_;
class MissionPlan;
class MissionPlanDefaultTypeInternal;
extern MissionPlanDefaultTypeInternal _MissionPlan_default_instance_;
class MissionProgress;
class MissionProgressDefaultTypeInternal;
extern MissionProgressDefaultTypeInternal _MissionProgress_default_instance_;
class MissionProgressResponse;
class MissionProgressResponseDefaultTypeInternal;
extern MissionProgressResponseDefaultTypeInternal _MissionProgressResponse_default_instance_;
class MissionResult;
class MissionResultDefaultTypeInternal;
extern MissionResultDefaultTypeInternal _MissionResult_default_instance_;
class PauseMissionRequest;
class PauseMissionRequestDefaultTypeInternal;
extern PauseMissionRequestDefaultTypeInternal _PauseMissionRequest_default_instance_;
class PauseMissionResponse;
class PauseMissionResponseDefaultTypeInternal;
extern PauseMissionResponseDefaultTypeInternal _PauseMissionResponse_default_instance_;
class SetCurrentMissionItemRequest;
class SetCurrentMissionItemRequestDefaultTypeInternal;
extern SetCurrentMissionItemRequestDefaultTypeInternal _SetCurrentMissionItemRequest_default_instance_;
class SetCurrentMissionItemResponse;
class SetCurrentMissionItemResponseDefaultTypeInternal;
extern SetCurrentMissionItemResponseDefaultTypeInternal _SetCurrentMissionItemResponse_default_instance_;
class SetReturnToLaunchAfterMissionRequest;
class SetReturnToLaunchAfterMissionRequestDefaultTypeInternal;
extern SetReturnToLaunchAfterMissionRequestDefaultTypeInternal _SetReturnToLaunchAfterMissionRequest_default_instance_;
class SetReturnToLaunchAfterMissionResponse;
class SetReturnToLaunchAfterMissionResponseDefaultTypeInternal;
extern SetReturnToLaunchAfterMissionResponseDefaultTypeInternal _SetReturnToLaunchAfterMissionResponse_default_instance_;
class StartMissionRequest;
class StartMissionRequestDefaultTypeInternal;
extern StartMissionRequestDefaultTypeInternal _StartMissionRequest_default_instance_;
class StartMissionResponse;
class StartMissionResponseDefaultTypeInternal;
extern StartMissionResponseDefaultTypeInternal _StartMissionResponse_default_instance_;
class SubscribeMissionProgressRequest;
class SubscribeMissionProgressRequestDefaultTypeInternal;
extern SubscribeMissionProgressRequestDefaultTypeInternal _SubscribeMissionProgressRequest_default_instance_;
class UploadMissionRequest;
class UploadMissionRequestDefaultTypeInternal;
extern UploadMissionRequestDefaultTypeInternal _UploadMissionRequest_default_instance_;
class UploadMissionResponse;
class UploadMissionResponseDefaultTypeInternal;
extern UploadMissionResponseDefaultTypeInternal _UploadMissionResponse_default_instance_;
}  // namespace mission
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::mission::CancelMissionDownloadRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::CancelMissionDownloadRequest>(Arena*);
template<> ::mavsdk::rpc::mission::CancelMissionDownloadResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::CancelMissionDownloadResponse>(Arena*);
template<> ::mavsdk::rpc::mission::CancelMissionUploadRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::CancelMissionUploadRequest>(Arena*);
template<> ::mavsdk::rpc::mission::CancelMissionUploadResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::CancelMissionUploadResponse>(Arena*);
template<> ::mavsdk::rpc::mission::ClearMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::ClearMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission::ClearMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::ClearMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission::DownloadMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::DownloadMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission::DownloadMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::DownloadMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission::GetReturnToLaunchAfterMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::GetReturnToLaunchAfterMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission::GetReturnToLaunchAfterMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::GetReturnToLaunchAfterMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission::ImportQgroundcontrolMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::ImportQgroundcontrolMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission::ImportQgroundcontrolMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::ImportQgroundcontrolMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission::IsMissionFinishedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::IsMissionFinishedRequest>(Arena*);
template<> ::mavsdk::rpc::mission::IsMissionFinishedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::IsMissionFinishedResponse>(Arena*);
template<> ::mavsdk::rpc::mission::MissionItem* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::MissionItem>(Arena*);
template<> ::mavsdk::rpc::mission::MissionPlan* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::MissionPlan>(Arena*);
template<> ::mavsdk::rpc::mission::MissionProgress* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::MissionProgress>(Arena*);
template<> ::mavsdk::rpc::mission::MissionProgressResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::MissionProgressResponse>(Arena*);
template<> ::mavsdk::rpc::mission::MissionResult* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(Arena*);
template<> ::mavsdk::rpc::mission::PauseMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::PauseMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission::PauseMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::PauseMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission::SetCurrentMissionItemRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::SetCurrentMissionItemRequest>(Arena*);
template<> ::mavsdk::rpc::mission::SetCurrentMissionItemResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::SetCurrentMissionItemResponse>(Arena*);
template<> ::mavsdk::rpc::mission::SetReturnToLaunchAfterMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::SetReturnToLaunchAfterMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission::SetReturnToLaunchAfterMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::SetReturnToLaunchAfterMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission::StartMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::StartMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission::StartMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::StartMissionResponse>(Arena*);
template<> ::mavsdk::rpc::mission::SubscribeMissionProgressRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::SubscribeMissionProgressRequest>(Arena*);
template<> ::mavsdk::rpc::mission::UploadMissionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::UploadMissionRequest>(Arena*);
template<> ::mavsdk::rpc::mission::UploadMissionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::mission::UploadMissionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace mission {

enum MissionItem_CameraAction : int {
  MissionItem_CameraAction_CAMERA_ACTION_NONE = 0,
  MissionItem_CameraAction_CAMERA_ACTION_TAKE_PHOTO = 1,
  MissionItem_CameraAction_CAMERA_ACTION_START_PHOTO_INTERVAL = 2,
  MissionItem_CameraAction_CAMERA_ACTION_STOP_PHOTO_INTERVAL = 3,
  MissionItem_CameraAction_CAMERA_ACTION_START_VIDEO = 4,
  MissionItem_CameraAction_CAMERA_ACTION_STOP_VIDEO = 5,
  MissionItem_CameraAction_MissionItem_CameraAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MissionItem_CameraAction_MissionItem_CameraAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MissionItem_CameraAction_IsValid(int value);
constexpr MissionItem_CameraAction MissionItem_CameraAction_CameraAction_MIN = MissionItem_CameraAction_CAMERA_ACTION_NONE;
constexpr MissionItem_CameraAction MissionItem_CameraAction_CameraAction_MAX = MissionItem_CameraAction_CAMERA_ACTION_STOP_VIDEO;
constexpr int MissionItem_CameraAction_CameraAction_ARRAYSIZE = MissionItem_CameraAction_CameraAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionItem_CameraAction_descriptor();
template<typename T>
inline const std::string& MissionItem_CameraAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MissionItem_CameraAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MissionItem_CameraAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MissionItem_CameraAction_descriptor(), enum_t_value);
}
inline bool MissionItem_CameraAction_Parse(
    const std::string& name, MissionItem_CameraAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MissionItem_CameraAction>(
    MissionItem_CameraAction_descriptor(), name, value);
}
enum MissionResult_Result : int {
  MissionResult_Result_RESULT_UNKNOWN = 0,
  MissionResult_Result_RESULT_SUCCESS = 1,
  MissionResult_Result_RESULT_ERROR = 2,
  MissionResult_Result_RESULT_TOO_MANY_MISSION_ITEMS = 3,
  MissionResult_Result_RESULT_BUSY = 4,
  MissionResult_Result_RESULT_TIMEOUT = 5,
  MissionResult_Result_RESULT_INVALID_ARGUMENT = 6,
  MissionResult_Result_RESULT_UNSUPPORTED = 7,
  MissionResult_Result_RESULT_NO_MISSION_AVAILABLE = 8,
  MissionResult_Result_RESULT_FAILED_TO_OPEN_QGC_PLAN = 9,
  MissionResult_Result_RESULT_FAILED_TO_PARSE_QGC_PLAN = 10,
  MissionResult_Result_RESULT_UNSUPPORTED_MISSION_CMD = 11,
  MissionResult_Result_RESULT_TRANSFER_CANCELLED = 12,
  MissionResult_Result_MissionResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MissionResult_Result_MissionResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MissionResult_Result_IsValid(int value);
constexpr MissionResult_Result MissionResult_Result_Result_MIN = MissionResult_Result_RESULT_UNKNOWN;
constexpr MissionResult_Result MissionResult_Result_Result_MAX = MissionResult_Result_RESULT_TRANSFER_CANCELLED;
constexpr int MissionResult_Result_Result_ARRAYSIZE = MissionResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MissionResult_Result_descriptor();
template<typename T>
inline const std::string& MissionResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MissionResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MissionResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MissionResult_Result_descriptor(), enum_t_value);
}
inline bool MissionResult_Result_Parse(
    const std::string& name, MissionResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MissionResult_Result>(
    MissionResult_Result_descriptor(), name, value);
}
// ===================================================================

class UploadMissionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.UploadMissionRequest) */ {
 public:
  UploadMissionRequest();
  virtual ~UploadMissionRequest();

  UploadMissionRequest(const UploadMissionRequest& from);
  UploadMissionRequest(UploadMissionRequest&& from) noexcept
    : UploadMissionRequest() {
    *this = ::std::move(from);
  }

  inline UploadMissionRequest& operator=(const UploadMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadMissionRequest& operator=(UploadMissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadMissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadMissionRequest* internal_default_instance() {
    return reinterpret_cast<const UploadMissionRequest*>(
               &_UploadMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UploadMissionRequest& a, UploadMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadMissionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadMissionRequest* New() const final {
    return CreateMaybeMessage<UploadMissionRequest>(nullptr);
  }

  UploadMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadMissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadMissionRequest& from);
  void MergeFrom(const UploadMissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadMissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.UploadMissionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionPlanFieldNumber = 1,
  };
  // .mavsdk.rpc.mission.MissionPlan mission_plan = 1;
  bool has_mission_plan() const;
  private:
  bool _internal_has_mission_plan() const;
  public:
  void clear_mission_plan();
  const ::mavsdk::rpc::mission::MissionPlan& mission_plan() const;
  ::mavsdk::rpc::mission::MissionPlan* release_mission_plan();
  ::mavsdk::rpc::mission::MissionPlan* mutable_mission_plan();
  void set_allocated_mission_plan(::mavsdk::rpc::mission::MissionPlan* mission_plan);
  private:
  const ::mavsdk::rpc::mission::MissionPlan& _internal_mission_plan() const;
  ::mavsdk::rpc::mission::MissionPlan* _internal_mutable_mission_plan();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.UploadMissionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionPlan* mission_plan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class UploadMissionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.UploadMissionResponse) */ {
 public:
  UploadMissionResponse();
  virtual ~UploadMissionResponse();

  UploadMissionResponse(const UploadMissionResponse& from);
  UploadMissionResponse(UploadMissionResponse&& from) noexcept
    : UploadMissionResponse() {
    *this = ::std::move(from);
  }

  inline UploadMissionResponse& operator=(const UploadMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadMissionResponse& operator=(UploadMissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadMissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadMissionResponse* internal_default_instance() {
    return reinterpret_cast<const UploadMissionResponse*>(
               &_UploadMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UploadMissionResponse& a, UploadMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadMissionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadMissionResponse* New() const final {
    return CreateMaybeMessage<UploadMissionResponse>(nullptr);
  }

  UploadMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadMissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadMissionResponse& from);
  void MergeFrom(const UploadMissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadMissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.UploadMissionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* _internal_mutable_mission_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.UploadMissionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionResult* mission_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class CancelMissionUploadRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.CancelMissionUploadRequest) */ {
 public:
  CancelMissionUploadRequest();
  virtual ~CancelMissionUploadRequest();

  CancelMissionUploadRequest(const CancelMissionUploadRequest& from);
  CancelMissionUploadRequest(CancelMissionUploadRequest&& from) noexcept
    : CancelMissionUploadRequest() {
    *this = ::std::move(from);
  }

  inline CancelMissionUploadRequest& operator=(const CancelMissionUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelMissionUploadRequest& operator=(CancelMissionUploadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelMissionUploadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelMissionUploadRequest* internal_default_instance() {
    return reinterpret_cast<const CancelMissionUploadRequest*>(
               &_CancelMissionUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CancelMissionUploadRequest& a, CancelMissionUploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelMissionUploadRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelMissionUploadRequest* New() const final {
    return CreateMaybeMessage<CancelMissionUploadRequest>(nullptr);
  }

  CancelMissionUploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelMissionUploadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelMissionUploadRequest& from);
  void MergeFrom(const CancelMissionUploadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelMissionUploadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.CancelMissionUploadRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.CancelMissionUploadRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class CancelMissionUploadResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.CancelMissionUploadResponse) */ {
 public:
  CancelMissionUploadResponse();
  virtual ~CancelMissionUploadResponse();

  CancelMissionUploadResponse(const CancelMissionUploadResponse& from);
  CancelMissionUploadResponse(CancelMissionUploadResponse&& from) noexcept
    : CancelMissionUploadResponse() {
    *this = ::std::move(from);
  }

  inline CancelMissionUploadResponse& operator=(const CancelMissionUploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelMissionUploadResponse& operator=(CancelMissionUploadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelMissionUploadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelMissionUploadResponse* internal_default_instance() {
    return reinterpret_cast<const CancelMissionUploadResponse*>(
               &_CancelMissionUploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CancelMissionUploadResponse& a, CancelMissionUploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelMissionUploadResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelMissionUploadResponse* New() const final {
    return CreateMaybeMessage<CancelMissionUploadResponse>(nullptr);
  }

  CancelMissionUploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelMissionUploadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelMissionUploadResponse& from);
  void MergeFrom(const CancelMissionUploadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelMissionUploadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.CancelMissionUploadResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* _internal_mutable_mission_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.CancelMissionUploadResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionResult* mission_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class DownloadMissionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.DownloadMissionRequest) */ {
 public:
  DownloadMissionRequest();
  virtual ~DownloadMissionRequest();

  DownloadMissionRequest(const DownloadMissionRequest& from);
  DownloadMissionRequest(DownloadMissionRequest&& from) noexcept
    : DownloadMissionRequest() {
    *this = ::std::move(from);
  }

  inline DownloadMissionRequest& operator=(const DownloadMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadMissionRequest& operator=(DownloadMissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadMissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadMissionRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadMissionRequest*>(
               &_DownloadMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DownloadMissionRequest& a, DownloadMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadMissionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadMissionRequest* New() const final {
    return CreateMaybeMessage<DownloadMissionRequest>(nullptr);
  }

  DownloadMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadMissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadMissionRequest& from);
  void MergeFrom(const DownloadMissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadMissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.DownloadMissionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.DownloadMissionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class DownloadMissionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.DownloadMissionResponse) */ {
 public:
  DownloadMissionResponse();
  virtual ~DownloadMissionResponse();

  DownloadMissionResponse(const DownloadMissionResponse& from);
  DownloadMissionResponse(DownloadMissionResponse&& from) noexcept
    : DownloadMissionResponse() {
    *this = ::std::move(from);
  }

  inline DownloadMissionResponse& operator=(const DownloadMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadMissionResponse& operator=(DownloadMissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadMissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadMissionResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadMissionResponse*>(
               &_DownloadMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DownloadMissionResponse& a, DownloadMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadMissionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadMissionResponse* New() const final {
    return CreateMaybeMessage<DownloadMissionResponse>(nullptr);
  }

  DownloadMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadMissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadMissionResponse& from);
  void MergeFrom(const DownloadMissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadMissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.DownloadMissionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
    kMissionPlanFieldNumber = 2,
  };
  // .mavsdk.rpc.mission.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* _internal_mutable_mission_result();
  public:

  // .mavsdk.rpc.mission.MissionPlan mission_plan = 2;
  bool has_mission_plan() const;
  private:
  bool _internal_has_mission_plan() const;
  public:
  void clear_mission_plan();
  const ::mavsdk::rpc::mission::MissionPlan& mission_plan() const;
  ::mavsdk::rpc::mission::MissionPlan* release_mission_plan();
  ::mavsdk::rpc::mission::MissionPlan* mutable_mission_plan();
  void set_allocated_mission_plan(::mavsdk::rpc::mission::MissionPlan* mission_plan);
  private:
  const ::mavsdk::rpc::mission::MissionPlan& _internal_mission_plan() const;
  ::mavsdk::rpc::mission::MissionPlan* _internal_mutable_mission_plan();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.DownloadMissionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionResult* mission_result_;
  ::mavsdk::rpc::mission::MissionPlan* mission_plan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class CancelMissionDownloadRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.CancelMissionDownloadRequest) */ {
 public:
  CancelMissionDownloadRequest();
  virtual ~CancelMissionDownloadRequest();

  CancelMissionDownloadRequest(const CancelMissionDownloadRequest& from);
  CancelMissionDownloadRequest(CancelMissionDownloadRequest&& from) noexcept
    : CancelMissionDownloadRequest() {
    *this = ::std::move(from);
  }

  inline CancelMissionDownloadRequest& operator=(const CancelMissionDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelMissionDownloadRequest& operator=(CancelMissionDownloadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelMissionDownloadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelMissionDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const CancelMissionDownloadRequest*>(
               &_CancelMissionDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CancelMissionDownloadRequest& a, CancelMissionDownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelMissionDownloadRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelMissionDownloadRequest* New() const final {
    return CreateMaybeMessage<CancelMissionDownloadRequest>(nullptr);
  }

  CancelMissionDownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelMissionDownloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelMissionDownloadRequest& from);
  void MergeFrom(const CancelMissionDownloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelMissionDownloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.CancelMissionDownloadRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.CancelMissionDownloadRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class CancelMissionDownloadResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.CancelMissionDownloadResponse) */ {
 public:
  CancelMissionDownloadResponse();
  virtual ~CancelMissionDownloadResponse();

  CancelMissionDownloadResponse(const CancelMissionDownloadResponse& from);
  CancelMissionDownloadResponse(CancelMissionDownloadResponse&& from) noexcept
    : CancelMissionDownloadResponse() {
    *this = ::std::move(from);
  }

  inline CancelMissionDownloadResponse& operator=(const CancelMissionDownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelMissionDownloadResponse& operator=(CancelMissionDownloadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelMissionDownloadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelMissionDownloadResponse* internal_default_instance() {
    return reinterpret_cast<const CancelMissionDownloadResponse*>(
               &_CancelMissionDownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CancelMissionDownloadResponse& a, CancelMissionDownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelMissionDownloadResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelMissionDownloadResponse* New() const final {
    return CreateMaybeMessage<CancelMissionDownloadResponse>(nullptr);
  }

  CancelMissionDownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelMissionDownloadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelMissionDownloadResponse& from);
  void MergeFrom(const CancelMissionDownloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelMissionDownloadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.CancelMissionDownloadResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* _internal_mutable_mission_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.CancelMissionDownloadResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionResult* mission_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class StartMissionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.StartMissionRequest) */ {
 public:
  StartMissionRequest();
  virtual ~StartMissionRequest();

  StartMissionRequest(const StartMissionRequest& from);
  StartMissionRequest(StartMissionRequest&& from) noexcept
    : StartMissionRequest() {
    *this = ::std::move(from);
  }

  inline StartMissionRequest& operator=(const StartMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMissionRequest& operator=(StartMissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartMissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartMissionRequest* internal_default_instance() {
    return reinterpret_cast<const StartMissionRequest*>(
               &_StartMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StartMissionRequest& a, StartMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMissionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartMissionRequest* New() const final {
    return CreateMaybeMessage<StartMissionRequest>(nullptr);
  }

  StartMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartMissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartMissionRequest& from);
  void MergeFrom(const StartMissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartMissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.StartMissionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.StartMissionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class StartMissionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.StartMissionResponse) */ {
 public:
  StartMissionResponse();
  virtual ~StartMissionResponse();

  StartMissionResponse(const StartMissionResponse& from);
  StartMissionResponse(StartMissionResponse&& from) noexcept
    : StartMissionResponse() {
    *this = ::std::move(from);
  }

  inline StartMissionResponse& operator=(const StartMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMissionResponse& operator=(StartMissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartMissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartMissionResponse* internal_default_instance() {
    return reinterpret_cast<const StartMissionResponse*>(
               &_StartMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StartMissionResponse& a, StartMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMissionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartMissionResponse* New() const final {
    return CreateMaybeMessage<StartMissionResponse>(nullptr);
  }

  StartMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartMissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartMissionResponse& from);
  void MergeFrom(const StartMissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartMissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.StartMissionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* _internal_mutable_mission_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.StartMissionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionResult* mission_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class PauseMissionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.PauseMissionRequest) */ {
 public:
  PauseMissionRequest();
  virtual ~PauseMissionRequest();

  PauseMissionRequest(const PauseMissionRequest& from);
  PauseMissionRequest(PauseMissionRequest&& from) noexcept
    : PauseMissionRequest() {
    *this = ::std::move(from);
  }

  inline PauseMissionRequest& operator=(const PauseMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseMissionRequest& operator=(PauseMissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseMissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseMissionRequest* internal_default_instance() {
    return reinterpret_cast<const PauseMissionRequest*>(
               &_PauseMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PauseMissionRequest& a, PauseMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseMissionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseMissionRequest* New() const final {
    return CreateMaybeMessage<PauseMissionRequest>(nullptr);
  }

  PauseMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseMissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PauseMissionRequest& from);
  void MergeFrom(const PauseMissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseMissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.PauseMissionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.PauseMissionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class PauseMissionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.PauseMissionResponse) */ {
 public:
  PauseMissionResponse();
  virtual ~PauseMissionResponse();

  PauseMissionResponse(const PauseMissionResponse& from);
  PauseMissionResponse(PauseMissionResponse&& from) noexcept
    : PauseMissionResponse() {
    *this = ::std::move(from);
  }

  inline PauseMissionResponse& operator=(const PauseMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseMissionResponse& operator=(PauseMissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseMissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseMissionResponse* internal_default_instance() {
    return reinterpret_cast<const PauseMissionResponse*>(
               &_PauseMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PauseMissionResponse& a, PauseMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseMissionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseMissionResponse* New() const final {
    return CreateMaybeMessage<PauseMissionResponse>(nullptr);
  }

  PauseMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseMissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PauseMissionResponse& from);
  void MergeFrom(const PauseMissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseMissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.PauseMissionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* _internal_mutable_mission_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.PauseMissionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionResult* mission_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class ClearMissionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.ClearMissionRequest) */ {
 public:
  ClearMissionRequest();
  virtual ~ClearMissionRequest();

  ClearMissionRequest(const ClearMissionRequest& from);
  ClearMissionRequest(ClearMissionRequest&& from) noexcept
    : ClearMissionRequest() {
    *this = ::std::move(from);
  }

  inline ClearMissionRequest& operator=(const ClearMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearMissionRequest& operator=(ClearMissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearMissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearMissionRequest* internal_default_instance() {
    return reinterpret_cast<const ClearMissionRequest*>(
               &_ClearMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ClearMissionRequest& a, ClearMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearMissionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearMissionRequest* New() const final {
    return CreateMaybeMessage<ClearMissionRequest>(nullptr);
  }

  ClearMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearMissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearMissionRequest& from);
  void MergeFrom(const ClearMissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearMissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.ClearMissionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.ClearMissionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class ClearMissionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.ClearMissionResponse) */ {
 public:
  ClearMissionResponse();
  virtual ~ClearMissionResponse();

  ClearMissionResponse(const ClearMissionResponse& from);
  ClearMissionResponse(ClearMissionResponse&& from) noexcept
    : ClearMissionResponse() {
    *this = ::std::move(from);
  }

  inline ClearMissionResponse& operator=(const ClearMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearMissionResponse& operator=(ClearMissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearMissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearMissionResponse* internal_default_instance() {
    return reinterpret_cast<const ClearMissionResponse*>(
               &_ClearMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ClearMissionResponse& a, ClearMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearMissionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearMissionResponse* New() const final {
    return CreateMaybeMessage<ClearMissionResponse>(nullptr);
  }

  ClearMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearMissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearMissionResponse& from);
  void MergeFrom(const ClearMissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearMissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.ClearMissionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* _internal_mutable_mission_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.ClearMissionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionResult* mission_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentMissionItemRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.SetCurrentMissionItemRequest) */ {
 public:
  SetCurrentMissionItemRequest();
  virtual ~SetCurrentMissionItemRequest();

  SetCurrentMissionItemRequest(const SetCurrentMissionItemRequest& from);
  SetCurrentMissionItemRequest(SetCurrentMissionItemRequest&& from) noexcept
    : SetCurrentMissionItemRequest() {
    *this = ::std::move(from);
  }

  inline SetCurrentMissionItemRequest& operator=(const SetCurrentMissionItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentMissionItemRequest& operator=(SetCurrentMissionItemRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCurrentMissionItemRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCurrentMissionItemRequest* internal_default_instance() {
    return reinterpret_cast<const SetCurrentMissionItemRequest*>(
               &_SetCurrentMissionItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetCurrentMissionItemRequest& a, SetCurrentMissionItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentMissionItemRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCurrentMissionItemRequest* New() const final {
    return CreateMaybeMessage<SetCurrentMissionItemRequest>(nullptr);
  }

  SetCurrentMissionItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCurrentMissionItemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCurrentMissionItemRequest& from);
  void MergeFrom(const SetCurrentMissionItemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCurrentMissionItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.SetCurrentMissionItemRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.SetCurrentMissionItemRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class SetCurrentMissionItemResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.SetCurrentMissionItemResponse) */ {
 public:
  SetCurrentMissionItemResponse();
  virtual ~SetCurrentMissionItemResponse();

  SetCurrentMissionItemResponse(const SetCurrentMissionItemResponse& from);
  SetCurrentMissionItemResponse(SetCurrentMissionItemResponse&& from) noexcept
    : SetCurrentMissionItemResponse() {
    *this = ::std::move(from);
  }

  inline SetCurrentMissionItemResponse& operator=(const SetCurrentMissionItemResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrentMissionItemResponse& operator=(SetCurrentMissionItemResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCurrentMissionItemResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCurrentMissionItemResponse* internal_default_instance() {
    return reinterpret_cast<const SetCurrentMissionItemResponse*>(
               &_SetCurrentMissionItemResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetCurrentMissionItemResponse& a, SetCurrentMissionItemResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrentMissionItemResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCurrentMissionItemResponse* New() const final {
    return CreateMaybeMessage<SetCurrentMissionItemResponse>(nullptr);
  }

  SetCurrentMissionItemResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCurrentMissionItemResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCurrentMissionItemResponse& from);
  void MergeFrom(const SetCurrentMissionItemResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCurrentMissionItemResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.SetCurrentMissionItemResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* _internal_mutable_mission_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.SetCurrentMissionItemResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionResult* mission_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class IsMissionFinishedRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.IsMissionFinishedRequest) */ {
 public:
  IsMissionFinishedRequest();
  virtual ~IsMissionFinishedRequest();

  IsMissionFinishedRequest(const IsMissionFinishedRequest& from);
  IsMissionFinishedRequest(IsMissionFinishedRequest&& from) noexcept
    : IsMissionFinishedRequest() {
    *this = ::std::move(from);
  }

  inline IsMissionFinishedRequest& operator=(const IsMissionFinishedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsMissionFinishedRequest& operator=(IsMissionFinishedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsMissionFinishedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsMissionFinishedRequest* internal_default_instance() {
    return reinterpret_cast<const IsMissionFinishedRequest*>(
               &_IsMissionFinishedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(IsMissionFinishedRequest& a, IsMissionFinishedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsMissionFinishedRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsMissionFinishedRequest* New() const final {
    return CreateMaybeMessage<IsMissionFinishedRequest>(nullptr);
  }

  IsMissionFinishedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsMissionFinishedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsMissionFinishedRequest& from);
  void MergeFrom(const IsMissionFinishedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsMissionFinishedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.IsMissionFinishedRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.IsMissionFinishedRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class IsMissionFinishedResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.IsMissionFinishedResponse) */ {
 public:
  IsMissionFinishedResponse();
  virtual ~IsMissionFinishedResponse();

  IsMissionFinishedResponse(const IsMissionFinishedResponse& from);
  IsMissionFinishedResponse(IsMissionFinishedResponse&& from) noexcept
    : IsMissionFinishedResponse() {
    *this = ::std::move(from);
  }

  inline IsMissionFinishedResponse& operator=(const IsMissionFinishedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsMissionFinishedResponse& operator=(IsMissionFinishedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsMissionFinishedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsMissionFinishedResponse* internal_default_instance() {
    return reinterpret_cast<const IsMissionFinishedResponse*>(
               &_IsMissionFinishedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(IsMissionFinishedResponse& a, IsMissionFinishedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsMissionFinishedResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsMissionFinishedResponse* New() const final {
    return CreateMaybeMessage<IsMissionFinishedResponse>(nullptr);
  }

  IsMissionFinishedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsMissionFinishedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsMissionFinishedResponse& from);
  void MergeFrom(const IsMissionFinishedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsMissionFinishedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.IsMissionFinishedResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
    kIsFinishedFieldNumber = 2,
  };
  // .mavsdk.rpc.mission.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* _internal_mutable_mission_result();
  public:

  // bool is_finished = 2;
  void clear_is_finished();
  bool is_finished() const;
  void set_is_finished(bool value);
  private:
  bool _internal_is_finished() const;
  void _internal_set_is_finished(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.IsMissionFinishedResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionResult* mission_result_;
  bool is_finished_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMissionProgressRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.SubscribeMissionProgressRequest) */ {
 public:
  SubscribeMissionProgressRequest();
  virtual ~SubscribeMissionProgressRequest();

  SubscribeMissionProgressRequest(const SubscribeMissionProgressRequest& from);
  SubscribeMissionProgressRequest(SubscribeMissionProgressRequest&& from) noexcept
    : SubscribeMissionProgressRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMissionProgressRequest& operator=(const SubscribeMissionProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMissionProgressRequest& operator=(SubscribeMissionProgressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeMissionProgressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeMissionProgressRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMissionProgressRequest*>(
               &_SubscribeMissionProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SubscribeMissionProgressRequest& a, SubscribeMissionProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMissionProgressRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeMissionProgressRequest* New() const final {
    return CreateMaybeMessage<SubscribeMissionProgressRequest>(nullptr);
  }

  SubscribeMissionProgressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeMissionProgressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeMissionProgressRequest& from);
  void MergeFrom(const SubscribeMissionProgressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeMissionProgressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.SubscribeMissionProgressRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.SubscribeMissionProgressRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class MissionProgressResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.MissionProgressResponse) */ {
 public:
  MissionProgressResponse();
  virtual ~MissionProgressResponse();

  MissionProgressResponse(const MissionProgressResponse& from);
  MissionProgressResponse(MissionProgressResponse&& from) noexcept
    : MissionProgressResponse() {
    *this = ::std::move(from);
  }

  inline MissionProgressResponse& operator=(const MissionProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionProgressResponse& operator=(MissionProgressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionProgressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionProgressResponse* internal_default_instance() {
    return reinterpret_cast<const MissionProgressResponse*>(
               &_MissionProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MissionProgressResponse& a, MissionProgressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionProgressResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionProgressResponse* New() const final {
    return CreateMaybeMessage<MissionProgressResponse>(nullptr);
  }

  MissionProgressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionProgressResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionProgressResponse& from);
  void MergeFrom(const MissionProgressResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionProgressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.MissionProgressResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionProgressFieldNumber = 1,
  };
  // .mavsdk.rpc.mission.MissionProgress mission_progress = 1;
  bool has_mission_progress() const;
  private:
  bool _internal_has_mission_progress() const;
  public:
  void clear_mission_progress();
  const ::mavsdk::rpc::mission::MissionProgress& mission_progress() const;
  ::mavsdk::rpc::mission::MissionProgress* release_mission_progress();
  ::mavsdk::rpc::mission::MissionProgress* mutable_mission_progress();
  void set_allocated_mission_progress(::mavsdk::rpc::mission::MissionProgress* mission_progress);
  private:
  const ::mavsdk::rpc::mission::MissionProgress& _internal_mission_progress() const;
  ::mavsdk::rpc::mission::MissionProgress* _internal_mutable_mission_progress();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.MissionProgressResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionProgress* mission_progress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class GetReturnToLaunchAfterMissionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.GetReturnToLaunchAfterMissionRequest) */ {
 public:
  GetReturnToLaunchAfterMissionRequest();
  virtual ~GetReturnToLaunchAfterMissionRequest();

  GetReturnToLaunchAfterMissionRequest(const GetReturnToLaunchAfterMissionRequest& from);
  GetReturnToLaunchAfterMissionRequest(GetReturnToLaunchAfterMissionRequest&& from) noexcept
    : GetReturnToLaunchAfterMissionRequest() {
    *this = ::std::move(from);
  }

  inline GetReturnToLaunchAfterMissionRequest& operator=(const GetReturnToLaunchAfterMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReturnToLaunchAfterMissionRequest& operator=(GetReturnToLaunchAfterMissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetReturnToLaunchAfterMissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReturnToLaunchAfterMissionRequest* internal_default_instance() {
    return reinterpret_cast<const GetReturnToLaunchAfterMissionRequest*>(
               &_GetReturnToLaunchAfterMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetReturnToLaunchAfterMissionRequest& a, GetReturnToLaunchAfterMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReturnToLaunchAfterMissionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReturnToLaunchAfterMissionRequest* New() const final {
    return CreateMaybeMessage<GetReturnToLaunchAfterMissionRequest>(nullptr);
  }

  GetReturnToLaunchAfterMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReturnToLaunchAfterMissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetReturnToLaunchAfterMissionRequest& from);
  void MergeFrom(const GetReturnToLaunchAfterMissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReturnToLaunchAfterMissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.GetReturnToLaunchAfterMissionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.GetReturnToLaunchAfterMissionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class GetReturnToLaunchAfterMissionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.GetReturnToLaunchAfterMissionResponse) */ {
 public:
  GetReturnToLaunchAfterMissionResponse();
  virtual ~GetReturnToLaunchAfterMissionResponse();

  GetReturnToLaunchAfterMissionResponse(const GetReturnToLaunchAfterMissionResponse& from);
  GetReturnToLaunchAfterMissionResponse(GetReturnToLaunchAfterMissionResponse&& from) noexcept
    : GetReturnToLaunchAfterMissionResponse() {
    *this = ::std::move(from);
  }

  inline GetReturnToLaunchAfterMissionResponse& operator=(const GetReturnToLaunchAfterMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReturnToLaunchAfterMissionResponse& operator=(GetReturnToLaunchAfterMissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetReturnToLaunchAfterMissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReturnToLaunchAfterMissionResponse* internal_default_instance() {
    return reinterpret_cast<const GetReturnToLaunchAfterMissionResponse*>(
               &_GetReturnToLaunchAfterMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetReturnToLaunchAfterMissionResponse& a, GetReturnToLaunchAfterMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReturnToLaunchAfterMissionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReturnToLaunchAfterMissionResponse* New() const final {
    return CreateMaybeMessage<GetReturnToLaunchAfterMissionResponse>(nullptr);
  }

  GetReturnToLaunchAfterMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReturnToLaunchAfterMissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetReturnToLaunchAfterMissionResponse& from);
  void MergeFrom(const GetReturnToLaunchAfterMissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReturnToLaunchAfterMissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.GetReturnToLaunchAfterMissionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
    kEnableFieldNumber = 2,
  };
  // .mavsdk.rpc.mission.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* _internal_mutable_mission_result();
  public:

  // bool enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.GetReturnToLaunchAfterMissionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionResult* mission_result_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class SetReturnToLaunchAfterMissionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.SetReturnToLaunchAfterMissionRequest) */ {
 public:
  SetReturnToLaunchAfterMissionRequest();
  virtual ~SetReturnToLaunchAfterMissionRequest();

  SetReturnToLaunchAfterMissionRequest(const SetReturnToLaunchAfterMissionRequest& from);
  SetReturnToLaunchAfterMissionRequest(SetReturnToLaunchAfterMissionRequest&& from) noexcept
    : SetReturnToLaunchAfterMissionRequest() {
    *this = ::std::move(from);
  }

  inline SetReturnToLaunchAfterMissionRequest& operator=(const SetReturnToLaunchAfterMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetReturnToLaunchAfterMissionRequest& operator=(SetReturnToLaunchAfterMissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetReturnToLaunchAfterMissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetReturnToLaunchAfterMissionRequest* internal_default_instance() {
    return reinterpret_cast<const SetReturnToLaunchAfterMissionRequest*>(
               &_SetReturnToLaunchAfterMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetReturnToLaunchAfterMissionRequest& a, SetReturnToLaunchAfterMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetReturnToLaunchAfterMissionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetReturnToLaunchAfterMissionRequest* New() const final {
    return CreateMaybeMessage<SetReturnToLaunchAfterMissionRequest>(nullptr);
  }

  SetReturnToLaunchAfterMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetReturnToLaunchAfterMissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetReturnToLaunchAfterMissionRequest& from);
  void MergeFrom(const SetReturnToLaunchAfterMissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetReturnToLaunchAfterMissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.SetReturnToLaunchAfterMissionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.SetReturnToLaunchAfterMissionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class SetReturnToLaunchAfterMissionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.SetReturnToLaunchAfterMissionResponse) */ {
 public:
  SetReturnToLaunchAfterMissionResponse();
  virtual ~SetReturnToLaunchAfterMissionResponse();

  SetReturnToLaunchAfterMissionResponse(const SetReturnToLaunchAfterMissionResponse& from);
  SetReturnToLaunchAfterMissionResponse(SetReturnToLaunchAfterMissionResponse&& from) noexcept
    : SetReturnToLaunchAfterMissionResponse() {
    *this = ::std::move(from);
  }

  inline SetReturnToLaunchAfterMissionResponse& operator=(const SetReturnToLaunchAfterMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetReturnToLaunchAfterMissionResponse& operator=(SetReturnToLaunchAfterMissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetReturnToLaunchAfterMissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetReturnToLaunchAfterMissionResponse* internal_default_instance() {
    return reinterpret_cast<const SetReturnToLaunchAfterMissionResponse*>(
               &_SetReturnToLaunchAfterMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SetReturnToLaunchAfterMissionResponse& a, SetReturnToLaunchAfterMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetReturnToLaunchAfterMissionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetReturnToLaunchAfterMissionResponse* New() const final {
    return CreateMaybeMessage<SetReturnToLaunchAfterMissionResponse>(nullptr);
  }

  SetReturnToLaunchAfterMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetReturnToLaunchAfterMissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetReturnToLaunchAfterMissionResponse& from);
  void MergeFrom(const SetReturnToLaunchAfterMissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetReturnToLaunchAfterMissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.SetReturnToLaunchAfterMissionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
  };
  // .mavsdk.rpc.mission.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* _internal_mutable_mission_result();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.SetReturnToLaunchAfterMissionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionResult* mission_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class ImportQgroundcontrolMissionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.ImportQgroundcontrolMissionRequest) */ {
 public:
  ImportQgroundcontrolMissionRequest();
  virtual ~ImportQgroundcontrolMissionRequest();

  ImportQgroundcontrolMissionRequest(const ImportQgroundcontrolMissionRequest& from);
  ImportQgroundcontrolMissionRequest(ImportQgroundcontrolMissionRequest&& from) noexcept
    : ImportQgroundcontrolMissionRequest() {
    *this = ::std::move(from);
  }

  inline ImportQgroundcontrolMissionRequest& operator=(const ImportQgroundcontrolMissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportQgroundcontrolMissionRequest& operator=(ImportQgroundcontrolMissionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportQgroundcontrolMissionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportQgroundcontrolMissionRequest* internal_default_instance() {
    return reinterpret_cast<const ImportQgroundcontrolMissionRequest*>(
               &_ImportQgroundcontrolMissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ImportQgroundcontrolMissionRequest& a, ImportQgroundcontrolMissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportQgroundcontrolMissionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportQgroundcontrolMissionRequest* New() const final {
    return CreateMaybeMessage<ImportQgroundcontrolMissionRequest>(nullptr);
  }

  ImportQgroundcontrolMissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportQgroundcontrolMissionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportQgroundcontrolMissionRequest& from);
  void MergeFrom(const ImportQgroundcontrolMissionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportQgroundcontrolMissionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.ImportQgroundcontrolMissionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQgcPlanPathFieldNumber = 1,
  };
  // string qgc_plan_path = 1;
  void clear_qgc_plan_path();
  const std::string& qgc_plan_path() const;
  void set_qgc_plan_path(const std::string& value);
  void set_qgc_plan_path(std::string&& value);
  void set_qgc_plan_path(const char* value);
  void set_qgc_plan_path(const char* value, size_t size);
  std::string* mutable_qgc_plan_path();
  std::string* release_qgc_plan_path();
  void set_allocated_qgc_plan_path(std::string* qgc_plan_path);
  private:
  const std::string& _internal_qgc_plan_path() const;
  void _internal_set_qgc_plan_path(const std::string& value);
  std::string* _internal_mutable_qgc_plan_path();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.ImportQgroundcontrolMissionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr qgc_plan_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class ImportQgroundcontrolMissionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.ImportQgroundcontrolMissionResponse) */ {
 public:
  ImportQgroundcontrolMissionResponse();
  virtual ~ImportQgroundcontrolMissionResponse();

  ImportQgroundcontrolMissionResponse(const ImportQgroundcontrolMissionResponse& from);
  ImportQgroundcontrolMissionResponse(ImportQgroundcontrolMissionResponse&& from) noexcept
    : ImportQgroundcontrolMissionResponse() {
    *this = ::std::move(from);
  }

  inline ImportQgroundcontrolMissionResponse& operator=(const ImportQgroundcontrolMissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImportQgroundcontrolMissionResponse& operator=(ImportQgroundcontrolMissionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImportQgroundcontrolMissionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportQgroundcontrolMissionResponse* internal_default_instance() {
    return reinterpret_cast<const ImportQgroundcontrolMissionResponse*>(
               &_ImportQgroundcontrolMissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ImportQgroundcontrolMissionResponse& a, ImportQgroundcontrolMissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ImportQgroundcontrolMissionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImportQgroundcontrolMissionResponse* New() const final {
    return CreateMaybeMessage<ImportQgroundcontrolMissionResponse>(nullptr);
  }

  ImportQgroundcontrolMissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImportQgroundcontrolMissionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImportQgroundcontrolMissionResponse& from);
  void MergeFrom(const ImportQgroundcontrolMissionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportQgroundcontrolMissionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.ImportQgroundcontrolMissionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionResultFieldNumber = 1,
    kMissionPlanFieldNumber = 2,
  };
  // .mavsdk.rpc.mission.MissionResult mission_result = 1;
  bool has_mission_result() const;
  private:
  bool _internal_has_mission_result() const;
  public:
  void clear_mission_result();
  const ::mavsdk::rpc::mission::MissionResult& mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* release_mission_result();
  ::mavsdk::rpc::mission::MissionResult* mutable_mission_result();
  void set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result);
  private:
  const ::mavsdk::rpc::mission::MissionResult& _internal_mission_result() const;
  ::mavsdk::rpc::mission::MissionResult* _internal_mutable_mission_result();
  public:

  // .mavsdk.rpc.mission.MissionPlan mission_plan = 2;
  bool has_mission_plan() const;
  private:
  bool _internal_has_mission_plan() const;
  public:
  void clear_mission_plan();
  const ::mavsdk::rpc::mission::MissionPlan& mission_plan() const;
  ::mavsdk::rpc::mission::MissionPlan* release_mission_plan();
  ::mavsdk::rpc::mission::MissionPlan* mutable_mission_plan();
  void set_allocated_mission_plan(::mavsdk::rpc::mission::MissionPlan* mission_plan);
  private:
  const ::mavsdk::rpc::mission::MissionPlan& _internal_mission_plan() const;
  ::mavsdk::rpc::mission::MissionPlan* _internal_mutable_mission_plan();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.ImportQgroundcontrolMissionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::mission::MissionResult* mission_result_;
  ::mavsdk::rpc::mission::MissionPlan* mission_plan_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class MissionItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.MissionItem) */ {
 public:
  MissionItem();
  virtual ~MissionItem();

  MissionItem(const MissionItem& from);
  MissionItem(MissionItem&& from) noexcept
    : MissionItem() {
    *this = ::std::move(from);
  }

  inline MissionItem& operator=(const MissionItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionItem& operator=(MissionItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionItem* internal_default_instance() {
    return reinterpret_cast<const MissionItem*>(
               &_MissionItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MissionItem& a, MissionItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionItem* New() const final {
    return CreateMaybeMessage<MissionItem>(nullptr);
  }

  MissionItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionItem& from);
  void MergeFrom(const MissionItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.MissionItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MissionItem_CameraAction CameraAction;
  static constexpr CameraAction CAMERA_ACTION_NONE =
    MissionItem_CameraAction_CAMERA_ACTION_NONE;
  static constexpr CameraAction CAMERA_ACTION_TAKE_PHOTO =
    MissionItem_CameraAction_CAMERA_ACTION_TAKE_PHOTO;
  static constexpr CameraAction CAMERA_ACTION_START_PHOTO_INTERVAL =
    MissionItem_CameraAction_CAMERA_ACTION_START_PHOTO_INTERVAL;
  static constexpr CameraAction CAMERA_ACTION_STOP_PHOTO_INTERVAL =
    MissionItem_CameraAction_CAMERA_ACTION_STOP_PHOTO_INTERVAL;
  static constexpr CameraAction CAMERA_ACTION_START_VIDEO =
    MissionItem_CameraAction_CAMERA_ACTION_START_VIDEO;
  static constexpr CameraAction CAMERA_ACTION_STOP_VIDEO =
    MissionItem_CameraAction_CAMERA_ACTION_STOP_VIDEO;
  static inline bool CameraAction_IsValid(int value) {
    return MissionItem_CameraAction_IsValid(value);
  }
  static constexpr CameraAction CameraAction_MIN =
    MissionItem_CameraAction_CameraAction_MIN;
  static constexpr CameraAction CameraAction_MAX =
    MissionItem_CameraAction_CameraAction_MAX;
  static constexpr int CameraAction_ARRAYSIZE =
    MissionItem_CameraAction_CameraAction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CameraAction_descriptor() {
    return MissionItem_CameraAction_descriptor();
  }
  template<typename T>
  static inline const std::string& CameraAction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CameraAction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CameraAction_Name.");
    return MissionItem_CameraAction_Name(enum_t_value);
  }
  static inline bool CameraAction_Parse(const std::string& name,
      CameraAction* value) {
    return MissionItem_CameraAction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kRelativeAltitudeMFieldNumber = 3,
    kSpeedMSFieldNumber = 4,
    kIsFlyThroughFieldNumber = 5,
    kGimbalPitchDegFieldNumber = 6,
    kGimbalYawDegFieldNumber = 7,
    kCameraActionFieldNumber = 8,
    kCameraPhotoIntervalSFieldNumber = 10,
    kLoiterTimeSFieldNumber = 9,
  };
  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float relative_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  void clear_relative_altitude_m();
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);
  private:
  float _internal_relative_altitude_m() const;
  void _internal_set_relative_altitude_m(float value);
  public:

  // float speed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
  void clear_speed_m_s();
  float speed_m_s() const;
  void set_speed_m_s(float value);
  private:
  float _internal_speed_m_s() const;
  void _internal_set_speed_m_s(float value);
  public:

  // bool is_fly_through = 5 [(.mavsdk.options.default_value) = "false"];
  void clear_is_fly_through();
  bool is_fly_through() const;
  void set_is_fly_through(bool value);
  private:
  bool _internal_is_fly_through() const;
  void _internal_set_is_fly_through(bool value);
  public:

  // float gimbal_pitch_deg = 6 [(.mavsdk.options.default_value) = "NaN"];
  void clear_gimbal_pitch_deg();
  float gimbal_pitch_deg() const;
  void set_gimbal_pitch_deg(float value);
  private:
  float _internal_gimbal_pitch_deg() const;
  void _internal_set_gimbal_pitch_deg(float value);
  public:

  // float gimbal_yaw_deg = 7 [(.mavsdk.options.default_value) = "NaN"];
  void clear_gimbal_yaw_deg();
  float gimbal_yaw_deg() const;
  void set_gimbal_yaw_deg(float value);
  private:
  float _internal_gimbal_yaw_deg() const;
  void _internal_set_gimbal_yaw_deg(float value);
  public:

  // .mavsdk.rpc.mission.MissionItem.CameraAction camera_action = 8;
  void clear_camera_action();
  ::mavsdk::rpc::mission::MissionItem_CameraAction camera_action() const;
  void set_camera_action(::mavsdk::rpc::mission::MissionItem_CameraAction value);
  private:
  ::mavsdk::rpc::mission::MissionItem_CameraAction _internal_camera_action() const;
  void _internal_set_camera_action(::mavsdk::rpc::mission::MissionItem_CameraAction value);
  public:

  // double camera_photo_interval_s = 10 [(.mavsdk.options.default_value) = "1.0"];
  void clear_camera_photo_interval_s();
  double camera_photo_interval_s() const;
  void set_camera_photo_interval_s(double value);
  private:
  double _internal_camera_photo_interval_s() const;
  void _internal_set_camera_photo_interval_s(double value);
  public:

  // float loiter_time_s = 9 [(.mavsdk.options.default_value) = "NaN"];
  void clear_loiter_time_s();
  float loiter_time_s() const;
  void set_loiter_time_s(float value);
  private:
  float _internal_loiter_time_s() const;
  void _internal_set_loiter_time_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.MissionItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double latitude_deg_;
  double longitude_deg_;
  float relative_altitude_m_;
  float speed_m_s_;
  bool is_fly_through_;
  float gimbal_pitch_deg_;
  float gimbal_yaw_deg_;
  int camera_action_;
  double camera_photo_interval_s_;
  float loiter_time_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class MissionPlan :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.MissionPlan) */ {
 public:
  MissionPlan();
  virtual ~MissionPlan();

  MissionPlan(const MissionPlan& from);
  MissionPlan(MissionPlan&& from) noexcept
    : MissionPlan() {
    *this = ::std::move(from);
  }

  inline MissionPlan& operator=(const MissionPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionPlan& operator=(MissionPlan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionPlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionPlan* internal_default_instance() {
    return reinterpret_cast<const MissionPlan*>(
               &_MissionPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MissionPlan& a, MissionPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionPlan* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionPlan* New() const final {
    return CreateMaybeMessage<MissionPlan>(nullptr);
  }

  MissionPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionPlan& from);
  void MergeFrom(const MissionPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.MissionPlan";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionItemsFieldNumber = 1,
  };
  // repeated .mavsdk.rpc.mission.MissionItem mission_items = 1;
  int mission_items_size() const;
  private:
  int _internal_mission_items_size() const;
  public:
  void clear_mission_items();
  ::mavsdk::rpc::mission::MissionItem* mutable_mission_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission::MissionItem >*
      mutable_mission_items();
  private:
  const ::mavsdk::rpc::mission::MissionItem& _internal_mission_items(int index) const;
  ::mavsdk::rpc::mission::MissionItem* _internal_add_mission_items();
  public:
  const ::mavsdk::rpc::mission::MissionItem& mission_items(int index) const;
  ::mavsdk::rpc::mission::MissionItem* add_mission_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission::MissionItem >&
      mission_items() const;

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.MissionPlan)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission::MissionItem > mission_items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class MissionProgress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.MissionProgress) */ {
 public:
  MissionProgress();
  virtual ~MissionProgress();

  MissionProgress(const MissionProgress& from);
  MissionProgress(MissionProgress&& from) noexcept
    : MissionProgress() {
    *this = ::std::move(from);
  }

  inline MissionProgress& operator=(const MissionProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionProgress& operator=(MissionProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionProgress* internal_default_instance() {
    return reinterpret_cast<const MissionProgress*>(
               &_MissionProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(MissionProgress& a, MissionProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionProgress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionProgress* New() const final {
    return CreateMaybeMessage<MissionProgress>(nullptr);
  }

  MissionProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionProgress& from);
  void MergeFrom(const MissionProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.MissionProgress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // int32 current = 1;
  void clear_current();
  ::PROTOBUF_NAMESPACE_ID::int32 current() const;
  void set_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_current() const;
  void _internal_set_current(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total = 2;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.MissionProgress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 current_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// -------------------------------------------------------------------

class MissionResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.mission.MissionResult) */ {
 public:
  MissionResult();
  virtual ~MissionResult();

  MissionResult(const MissionResult& from);
  MissionResult(MissionResult&& from) noexcept
    : MissionResult() {
    *this = ::std::move(from);
  }

  inline MissionResult& operator=(const MissionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionResult& operator=(MissionResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionResult* internal_default_instance() {
    return reinterpret_cast<const MissionResult*>(
               &_MissionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(MissionResult& a, MissionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionResult* New() const final {
    return CreateMaybeMessage<MissionResult>(nullptr);
  }

  MissionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionResult& from);
  void MergeFrom(const MissionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.mission.MissionResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mission_2fmission_2eproto);
    return ::descriptor_table_mission_2fmission_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MissionResult_Result Result;
  static constexpr Result RESULT_UNKNOWN =
    MissionResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS =
    MissionResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_ERROR =
    MissionResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TOO_MANY_MISSION_ITEMS =
    MissionResult_Result_RESULT_TOO_MANY_MISSION_ITEMS;
  static constexpr Result RESULT_BUSY =
    MissionResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_TIMEOUT =
    MissionResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_INVALID_ARGUMENT =
    MissionResult_Result_RESULT_INVALID_ARGUMENT;
  static constexpr Result RESULT_UNSUPPORTED =
    MissionResult_Result_RESULT_UNSUPPORTED;
  static constexpr Result RESULT_NO_MISSION_AVAILABLE =
    MissionResult_Result_RESULT_NO_MISSION_AVAILABLE;
  static constexpr Result RESULT_FAILED_TO_OPEN_QGC_PLAN =
    MissionResult_Result_RESULT_FAILED_TO_OPEN_QGC_PLAN;
  static constexpr Result RESULT_FAILED_TO_PARSE_QGC_PLAN =
    MissionResult_Result_RESULT_FAILED_TO_PARSE_QGC_PLAN;
  static constexpr Result RESULT_UNSUPPORTED_MISSION_CMD =
    MissionResult_Result_RESULT_UNSUPPORTED_MISSION_CMD;
  static constexpr Result RESULT_TRANSFER_CANCELLED =
    MissionResult_Result_RESULT_TRANSFER_CANCELLED;
  static inline bool Result_IsValid(int value) {
    return MissionResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    MissionResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    MissionResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    MissionResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return MissionResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return MissionResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return MissionResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  void set_result_str(const std::string& value);
  void set_result_str(std::string&& value);
  void set_result_str(const char* value);
  void set_result_str(const char* value, size_t size);
  std::string* mutable_result_str();
  std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.mission.MissionResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::mission::MissionResult_Result result() const;
  void set_result(::mavsdk::rpc::mission::MissionResult_Result value);
  private:
  ::mavsdk::rpc::mission::MissionResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::mission::MissionResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.mission.MissionResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mission_2fmission_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadMissionRequest

// .mavsdk.rpc.mission.MissionPlan mission_plan = 1;
inline bool UploadMissionRequest::_internal_has_mission_plan() const {
  return this != internal_default_instance() && mission_plan_ != nullptr;
}
inline bool UploadMissionRequest::has_mission_plan() const {
  return _internal_has_mission_plan();
}
inline void UploadMissionRequest::clear_mission_plan() {
  if (GetArenaNoVirtual() == nullptr && mission_plan_ != nullptr) {
    delete mission_plan_;
  }
  mission_plan_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionPlan& UploadMissionRequest::_internal_mission_plan() const {
  const ::mavsdk::rpc::mission::MissionPlan* p = mission_plan_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionPlan*>(
      &::mavsdk::rpc::mission::_MissionPlan_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionPlan& UploadMissionRequest::mission_plan() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.UploadMissionRequest.mission_plan)
  return _internal_mission_plan();
}
inline ::mavsdk::rpc::mission::MissionPlan* UploadMissionRequest::release_mission_plan() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.UploadMissionRequest.mission_plan)
  
  ::mavsdk::rpc::mission::MissionPlan* temp = mission_plan_;
  mission_plan_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionPlan* UploadMissionRequest::_internal_mutable_mission_plan() {
  
  if (mission_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionPlan>(GetArenaNoVirtual());
    mission_plan_ = p;
  }
  return mission_plan_;
}
inline ::mavsdk::rpc::mission::MissionPlan* UploadMissionRequest::mutable_mission_plan() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.UploadMissionRequest.mission_plan)
  return _internal_mutable_mission_plan();
}
inline void UploadMissionRequest::set_allocated_mission_plan(::mavsdk::rpc::mission::MissionPlan* mission_plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_plan_;
  }
  if (mission_plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_plan, submessage_arena);
    }
    
  } else {
    
  }
  mission_plan_ = mission_plan;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.UploadMissionRequest.mission_plan)
}

// -------------------------------------------------------------------

// UploadMissionResponse

// .mavsdk.rpc.mission.MissionResult mission_result = 1;
inline bool UploadMissionResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool UploadMissionResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void UploadMissionResponse::clear_mission_result() {
  if (GetArenaNoVirtual() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionResult& UploadMissionResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission::MissionResult* p = mission_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionResult*>(
      &::mavsdk::rpc::mission::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionResult& UploadMissionResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.UploadMissionResponse.mission_result)
  return _internal_mission_result();
}
inline ::mavsdk::rpc::mission::MissionResult* UploadMissionResponse::release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.UploadMissionResponse.mission_result)
  
  ::mavsdk::rpc::mission::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionResult* UploadMissionResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(GetArenaNoVirtual());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission::MissionResult* UploadMissionResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.UploadMissionResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void UploadMissionResponse::set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.UploadMissionResponse.mission_result)
}

// -------------------------------------------------------------------

// CancelMissionUploadRequest

// -------------------------------------------------------------------

// CancelMissionUploadResponse

// .mavsdk.rpc.mission.MissionResult mission_result = 1;
inline bool CancelMissionUploadResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool CancelMissionUploadResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void CancelMissionUploadResponse::clear_mission_result() {
  if (GetArenaNoVirtual() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionResult& CancelMissionUploadResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission::MissionResult* p = mission_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionResult*>(
      &::mavsdk::rpc::mission::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionResult& CancelMissionUploadResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.CancelMissionUploadResponse.mission_result)
  return _internal_mission_result();
}
inline ::mavsdk::rpc::mission::MissionResult* CancelMissionUploadResponse::release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.CancelMissionUploadResponse.mission_result)
  
  ::mavsdk::rpc::mission::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionResult* CancelMissionUploadResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(GetArenaNoVirtual());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission::MissionResult* CancelMissionUploadResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.CancelMissionUploadResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void CancelMissionUploadResponse::set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.CancelMissionUploadResponse.mission_result)
}

// -------------------------------------------------------------------

// DownloadMissionRequest

// -------------------------------------------------------------------

// DownloadMissionResponse

// .mavsdk.rpc.mission.MissionResult mission_result = 1;
inline bool DownloadMissionResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool DownloadMissionResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void DownloadMissionResponse::clear_mission_result() {
  if (GetArenaNoVirtual() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionResult& DownloadMissionResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission::MissionResult* p = mission_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionResult*>(
      &::mavsdk::rpc::mission::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionResult& DownloadMissionResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.DownloadMissionResponse.mission_result)
  return _internal_mission_result();
}
inline ::mavsdk::rpc::mission::MissionResult* DownloadMissionResponse::release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.DownloadMissionResponse.mission_result)
  
  ::mavsdk::rpc::mission::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionResult* DownloadMissionResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(GetArenaNoVirtual());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission::MissionResult* DownloadMissionResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.DownloadMissionResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void DownloadMissionResponse::set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.DownloadMissionResponse.mission_result)
}

// .mavsdk.rpc.mission.MissionPlan mission_plan = 2;
inline bool DownloadMissionResponse::_internal_has_mission_plan() const {
  return this != internal_default_instance() && mission_plan_ != nullptr;
}
inline bool DownloadMissionResponse::has_mission_plan() const {
  return _internal_has_mission_plan();
}
inline void DownloadMissionResponse::clear_mission_plan() {
  if (GetArenaNoVirtual() == nullptr && mission_plan_ != nullptr) {
    delete mission_plan_;
  }
  mission_plan_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionPlan& DownloadMissionResponse::_internal_mission_plan() const {
  const ::mavsdk::rpc::mission::MissionPlan* p = mission_plan_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionPlan*>(
      &::mavsdk::rpc::mission::_MissionPlan_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionPlan& DownloadMissionResponse::mission_plan() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.DownloadMissionResponse.mission_plan)
  return _internal_mission_plan();
}
inline ::mavsdk::rpc::mission::MissionPlan* DownloadMissionResponse::release_mission_plan() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.DownloadMissionResponse.mission_plan)
  
  ::mavsdk::rpc::mission::MissionPlan* temp = mission_plan_;
  mission_plan_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionPlan* DownloadMissionResponse::_internal_mutable_mission_plan() {
  
  if (mission_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionPlan>(GetArenaNoVirtual());
    mission_plan_ = p;
  }
  return mission_plan_;
}
inline ::mavsdk::rpc::mission::MissionPlan* DownloadMissionResponse::mutable_mission_plan() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.DownloadMissionResponse.mission_plan)
  return _internal_mutable_mission_plan();
}
inline void DownloadMissionResponse::set_allocated_mission_plan(::mavsdk::rpc::mission::MissionPlan* mission_plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_plan_;
  }
  if (mission_plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_plan, submessage_arena);
    }
    
  } else {
    
  }
  mission_plan_ = mission_plan;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.DownloadMissionResponse.mission_plan)
}

// -------------------------------------------------------------------

// CancelMissionDownloadRequest

// -------------------------------------------------------------------

// CancelMissionDownloadResponse

// .mavsdk.rpc.mission.MissionResult mission_result = 1;
inline bool CancelMissionDownloadResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool CancelMissionDownloadResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void CancelMissionDownloadResponse::clear_mission_result() {
  if (GetArenaNoVirtual() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionResult& CancelMissionDownloadResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission::MissionResult* p = mission_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionResult*>(
      &::mavsdk::rpc::mission::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionResult& CancelMissionDownloadResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.CancelMissionDownloadResponse.mission_result)
  return _internal_mission_result();
}
inline ::mavsdk::rpc::mission::MissionResult* CancelMissionDownloadResponse::release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.CancelMissionDownloadResponse.mission_result)
  
  ::mavsdk::rpc::mission::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionResult* CancelMissionDownloadResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(GetArenaNoVirtual());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission::MissionResult* CancelMissionDownloadResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.CancelMissionDownloadResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void CancelMissionDownloadResponse::set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.CancelMissionDownloadResponse.mission_result)
}

// -------------------------------------------------------------------

// StartMissionRequest

// -------------------------------------------------------------------

// StartMissionResponse

// .mavsdk.rpc.mission.MissionResult mission_result = 1;
inline bool StartMissionResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool StartMissionResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void StartMissionResponse::clear_mission_result() {
  if (GetArenaNoVirtual() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionResult& StartMissionResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission::MissionResult* p = mission_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionResult*>(
      &::mavsdk::rpc::mission::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionResult& StartMissionResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.StartMissionResponse.mission_result)
  return _internal_mission_result();
}
inline ::mavsdk::rpc::mission::MissionResult* StartMissionResponse::release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.StartMissionResponse.mission_result)
  
  ::mavsdk::rpc::mission::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionResult* StartMissionResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(GetArenaNoVirtual());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission::MissionResult* StartMissionResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.StartMissionResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void StartMissionResponse::set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.StartMissionResponse.mission_result)
}

// -------------------------------------------------------------------

// PauseMissionRequest

// -------------------------------------------------------------------

// PauseMissionResponse

// .mavsdk.rpc.mission.MissionResult mission_result = 1;
inline bool PauseMissionResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool PauseMissionResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void PauseMissionResponse::clear_mission_result() {
  if (GetArenaNoVirtual() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionResult& PauseMissionResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission::MissionResult* p = mission_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionResult*>(
      &::mavsdk::rpc::mission::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionResult& PauseMissionResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.PauseMissionResponse.mission_result)
  return _internal_mission_result();
}
inline ::mavsdk::rpc::mission::MissionResult* PauseMissionResponse::release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.PauseMissionResponse.mission_result)
  
  ::mavsdk::rpc::mission::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionResult* PauseMissionResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(GetArenaNoVirtual());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission::MissionResult* PauseMissionResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.PauseMissionResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void PauseMissionResponse::set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.PauseMissionResponse.mission_result)
}

// -------------------------------------------------------------------

// ClearMissionRequest

// -------------------------------------------------------------------

// ClearMissionResponse

// .mavsdk.rpc.mission.MissionResult mission_result = 1;
inline bool ClearMissionResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool ClearMissionResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void ClearMissionResponse::clear_mission_result() {
  if (GetArenaNoVirtual() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionResult& ClearMissionResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission::MissionResult* p = mission_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionResult*>(
      &::mavsdk::rpc::mission::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionResult& ClearMissionResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.ClearMissionResponse.mission_result)
  return _internal_mission_result();
}
inline ::mavsdk::rpc::mission::MissionResult* ClearMissionResponse::release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.ClearMissionResponse.mission_result)
  
  ::mavsdk::rpc::mission::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionResult* ClearMissionResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(GetArenaNoVirtual());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission::MissionResult* ClearMissionResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.ClearMissionResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void ClearMissionResponse::set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.ClearMissionResponse.mission_result)
}

// -------------------------------------------------------------------

// SetCurrentMissionItemRequest

// int32 index = 1;
inline void SetCurrentMissionItemRequest::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetCurrentMissionItemRequest::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetCurrentMissionItemRequest::index() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.SetCurrentMissionItemRequest.index)
  return _internal_index();
}
inline void SetCurrentMissionItemRequest::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void SetCurrentMissionItemRequest::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.SetCurrentMissionItemRequest.index)
}

// -------------------------------------------------------------------

// SetCurrentMissionItemResponse

// .mavsdk.rpc.mission.MissionResult mission_result = 1;
inline bool SetCurrentMissionItemResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool SetCurrentMissionItemResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void SetCurrentMissionItemResponse::clear_mission_result() {
  if (GetArenaNoVirtual() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionResult& SetCurrentMissionItemResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission::MissionResult* p = mission_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionResult*>(
      &::mavsdk::rpc::mission::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionResult& SetCurrentMissionItemResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.SetCurrentMissionItemResponse.mission_result)
  return _internal_mission_result();
}
inline ::mavsdk::rpc::mission::MissionResult* SetCurrentMissionItemResponse::release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.SetCurrentMissionItemResponse.mission_result)
  
  ::mavsdk::rpc::mission::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionResult* SetCurrentMissionItemResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(GetArenaNoVirtual());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission::MissionResult* SetCurrentMissionItemResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.SetCurrentMissionItemResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void SetCurrentMissionItemResponse::set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.SetCurrentMissionItemResponse.mission_result)
}

// -------------------------------------------------------------------

// IsMissionFinishedRequest

// -------------------------------------------------------------------

// IsMissionFinishedResponse

// .mavsdk.rpc.mission.MissionResult mission_result = 1;
inline bool IsMissionFinishedResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool IsMissionFinishedResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void IsMissionFinishedResponse::clear_mission_result() {
  if (GetArenaNoVirtual() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionResult& IsMissionFinishedResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission::MissionResult* p = mission_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionResult*>(
      &::mavsdk::rpc::mission::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionResult& IsMissionFinishedResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.IsMissionFinishedResponse.mission_result)
  return _internal_mission_result();
}
inline ::mavsdk::rpc::mission::MissionResult* IsMissionFinishedResponse::release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.IsMissionFinishedResponse.mission_result)
  
  ::mavsdk::rpc::mission::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionResult* IsMissionFinishedResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(GetArenaNoVirtual());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission::MissionResult* IsMissionFinishedResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.IsMissionFinishedResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void IsMissionFinishedResponse::set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.IsMissionFinishedResponse.mission_result)
}

// bool is_finished = 2;
inline void IsMissionFinishedResponse::clear_is_finished() {
  is_finished_ = false;
}
inline bool IsMissionFinishedResponse::_internal_is_finished() const {
  return is_finished_;
}
inline bool IsMissionFinishedResponse::is_finished() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.IsMissionFinishedResponse.is_finished)
  return _internal_is_finished();
}
inline void IsMissionFinishedResponse::_internal_set_is_finished(bool value) {
  
  is_finished_ = value;
}
inline void IsMissionFinishedResponse::set_is_finished(bool value) {
  _internal_set_is_finished(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.IsMissionFinishedResponse.is_finished)
}

// -------------------------------------------------------------------

// SubscribeMissionProgressRequest

// -------------------------------------------------------------------

// MissionProgressResponse

// .mavsdk.rpc.mission.MissionProgress mission_progress = 1;
inline bool MissionProgressResponse::_internal_has_mission_progress() const {
  return this != internal_default_instance() && mission_progress_ != nullptr;
}
inline bool MissionProgressResponse::has_mission_progress() const {
  return _internal_has_mission_progress();
}
inline void MissionProgressResponse::clear_mission_progress() {
  if (GetArenaNoVirtual() == nullptr && mission_progress_ != nullptr) {
    delete mission_progress_;
  }
  mission_progress_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionProgress& MissionProgressResponse::_internal_mission_progress() const {
  const ::mavsdk::rpc::mission::MissionProgress* p = mission_progress_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionProgress*>(
      &::mavsdk::rpc::mission::_MissionProgress_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionProgress& MissionProgressResponse::mission_progress() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionProgressResponse.mission_progress)
  return _internal_mission_progress();
}
inline ::mavsdk::rpc::mission::MissionProgress* MissionProgressResponse::release_mission_progress() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.MissionProgressResponse.mission_progress)
  
  ::mavsdk::rpc::mission::MissionProgress* temp = mission_progress_;
  mission_progress_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionProgress* MissionProgressResponse::_internal_mutable_mission_progress() {
  
  if (mission_progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionProgress>(GetArenaNoVirtual());
    mission_progress_ = p;
  }
  return mission_progress_;
}
inline ::mavsdk::rpc::mission::MissionProgress* MissionProgressResponse::mutable_mission_progress() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.MissionProgressResponse.mission_progress)
  return _internal_mutable_mission_progress();
}
inline void MissionProgressResponse::set_allocated_mission_progress(::mavsdk::rpc::mission::MissionProgress* mission_progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_progress_;
  }
  if (mission_progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_progress, submessage_arena);
    }
    
  } else {
    
  }
  mission_progress_ = mission_progress;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.MissionProgressResponse.mission_progress)
}

// -------------------------------------------------------------------

// GetReturnToLaunchAfterMissionRequest

// -------------------------------------------------------------------

// GetReturnToLaunchAfterMissionResponse

// .mavsdk.rpc.mission.MissionResult mission_result = 1;
inline bool GetReturnToLaunchAfterMissionResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool GetReturnToLaunchAfterMissionResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void GetReturnToLaunchAfterMissionResponse::clear_mission_result() {
  if (GetArenaNoVirtual() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionResult& GetReturnToLaunchAfterMissionResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission::MissionResult* p = mission_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionResult*>(
      &::mavsdk::rpc::mission::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionResult& GetReturnToLaunchAfterMissionResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.GetReturnToLaunchAfterMissionResponse.mission_result)
  return _internal_mission_result();
}
inline ::mavsdk::rpc::mission::MissionResult* GetReturnToLaunchAfterMissionResponse::release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.GetReturnToLaunchAfterMissionResponse.mission_result)
  
  ::mavsdk::rpc::mission::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionResult* GetReturnToLaunchAfterMissionResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(GetArenaNoVirtual());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission::MissionResult* GetReturnToLaunchAfterMissionResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.GetReturnToLaunchAfterMissionResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void GetReturnToLaunchAfterMissionResponse::set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.GetReturnToLaunchAfterMissionResponse.mission_result)
}

// bool enable = 2;
inline void GetReturnToLaunchAfterMissionResponse::clear_enable() {
  enable_ = false;
}
inline bool GetReturnToLaunchAfterMissionResponse::_internal_enable() const {
  return enable_;
}
inline bool GetReturnToLaunchAfterMissionResponse::enable() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.GetReturnToLaunchAfterMissionResponse.enable)
  return _internal_enable();
}
inline void GetReturnToLaunchAfterMissionResponse::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void GetReturnToLaunchAfterMissionResponse::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.GetReturnToLaunchAfterMissionResponse.enable)
}

// -------------------------------------------------------------------

// SetReturnToLaunchAfterMissionRequest

// bool enable = 1;
inline void SetReturnToLaunchAfterMissionRequest::clear_enable() {
  enable_ = false;
}
inline bool SetReturnToLaunchAfterMissionRequest::_internal_enable() const {
  return enable_;
}
inline bool SetReturnToLaunchAfterMissionRequest::enable() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.SetReturnToLaunchAfterMissionRequest.enable)
  return _internal_enable();
}
inline void SetReturnToLaunchAfterMissionRequest::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void SetReturnToLaunchAfterMissionRequest::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.SetReturnToLaunchAfterMissionRequest.enable)
}

// -------------------------------------------------------------------

// SetReturnToLaunchAfterMissionResponse

// .mavsdk.rpc.mission.MissionResult mission_result = 1;
inline bool SetReturnToLaunchAfterMissionResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool SetReturnToLaunchAfterMissionResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void SetReturnToLaunchAfterMissionResponse::clear_mission_result() {
  if (GetArenaNoVirtual() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionResult& SetReturnToLaunchAfterMissionResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission::MissionResult* p = mission_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionResult*>(
      &::mavsdk::rpc::mission::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionResult& SetReturnToLaunchAfterMissionResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.SetReturnToLaunchAfterMissionResponse.mission_result)
  return _internal_mission_result();
}
inline ::mavsdk::rpc::mission::MissionResult* SetReturnToLaunchAfterMissionResponse::release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.SetReturnToLaunchAfterMissionResponse.mission_result)
  
  ::mavsdk::rpc::mission::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionResult* SetReturnToLaunchAfterMissionResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(GetArenaNoVirtual());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission::MissionResult* SetReturnToLaunchAfterMissionResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.SetReturnToLaunchAfterMissionResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void SetReturnToLaunchAfterMissionResponse::set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.SetReturnToLaunchAfterMissionResponse.mission_result)
}

// -------------------------------------------------------------------

// ImportQgroundcontrolMissionRequest

// string qgc_plan_path = 1;
inline void ImportQgroundcontrolMissionRequest::clear_qgc_plan_path() {
  qgc_plan_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ImportQgroundcontrolMissionRequest::qgc_plan_path() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.ImportQgroundcontrolMissionRequest.qgc_plan_path)
  return _internal_qgc_plan_path();
}
inline void ImportQgroundcontrolMissionRequest::set_qgc_plan_path(const std::string& value) {
  _internal_set_qgc_plan_path(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.ImportQgroundcontrolMissionRequest.qgc_plan_path)
}
inline std::string* ImportQgroundcontrolMissionRequest::mutable_qgc_plan_path() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.ImportQgroundcontrolMissionRequest.qgc_plan_path)
  return _internal_mutable_qgc_plan_path();
}
inline const std::string& ImportQgroundcontrolMissionRequest::_internal_qgc_plan_path() const {
  return qgc_plan_path_.GetNoArena();
}
inline void ImportQgroundcontrolMissionRequest::_internal_set_qgc_plan_path(const std::string& value) {
  
  qgc_plan_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ImportQgroundcontrolMissionRequest::set_qgc_plan_path(std::string&& value) {
  
  qgc_plan_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.mission.ImportQgroundcontrolMissionRequest.qgc_plan_path)
}
inline void ImportQgroundcontrolMissionRequest::set_qgc_plan_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  qgc_plan_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.mission.ImportQgroundcontrolMissionRequest.qgc_plan_path)
}
inline void ImportQgroundcontrolMissionRequest::set_qgc_plan_path(const char* value, size_t size) {
  
  qgc_plan_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.mission.ImportQgroundcontrolMissionRequest.qgc_plan_path)
}
inline std::string* ImportQgroundcontrolMissionRequest::_internal_mutable_qgc_plan_path() {
  
  return qgc_plan_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImportQgroundcontrolMissionRequest::release_qgc_plan_path() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.ImportQgroundcontrolMissionRequest.qgc_plan_path)
  
  return qgc_plan_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImportQgroundcontrolMissionRequest::set_allocated_qgc_plan_path(std::string* qgc_plan_path) {
  if (qgc_plan_path != nullptr) {
    
  } else {
    
  }
  qgc_plan_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), qgc_plan_path);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.ImportQgroundcontrolMissionRequest.qgc_plan_path)
}

// -------------------------------------------------------------------

// ImportQgroundcontrolMissionResponse

// .mavsdk.rpc.mission.MissionResult mission_result = 1;
inline bool ImportQgroundcontrolMissionResponse::_internal_has_mission_result() const {
  return this != internal_default_instance() && mission_result_ != nullptr;
}
inline bool ImportQgroundcontrolMissionResponse::has_mission_result() const {
  return _internal_has_mission_result();
}
inline void ImportQgroundcontrolMissionResponse::clear_mission_result() {
  if (GetArenaNoVirtual() == nullptr && mission_result_ != nullptr) {
    delete mission_result_;
  }
  mission_result_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionResult& ImportQgroundcontrolMissionResponse::_internal_mission_result() const {
  const ::mavsdk::rpc::mission::MissionResult* p = mission_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionResult*>(
      &::mavsdk::rpc::mission::_MissionResult_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionResult& ImportQgroundcontrolMissionResponse::mission_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.ImportQgroundcontrolMissionResponse.mission_result)
  return _internal_mission_result();
}
inline ::mavsdk::rpc::mission::MissionResult* ImportQgroundcontrolMissionResponse::release_mission_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.ImportQgroundcontrolMissionResponse.mission_result)
  
  ::mavsdk::rpc::mission::MissionResult* temp = mission_result_;
  mission_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionResult* ImportQgroundcontrolMissionResponse::_internal_mutable_mission_result() {
  
  if (mission_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionResult>(GetArenaNoVirtual());
    mission_result_ = p;
  }
  return mission_result_;
}
inline ::mavsdk::rpc::mission::MissionResult* ImportQgroundcontrolMissionResponse::mutable_mission_result() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.ImportQgroundcontrolMissionResponse.mission_result)
  return _internal_mutable_mission_result();
}
inline void ImportQgroundcontrolMissionResponse::set_allocated_mission_result(::mavsdk::rpc::mission::MissionResult* mission_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_result_;
  }
  if (mission_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_result, submessage_arena);
    }
    
  } else {
    
  }
  mission_result_ = mission_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.ImportQgroundcontrolMissionResponse.mission_result)
}

// .mavsdk.rpc.mission.MissionPlan mission_plan = 2;
inline bool ImportQgroundcontrolMissionResponse::_internal_has_mission_plan() const {
  return this != internal_default_instance() && mission_plan_ != nullptr;
}
inline bool ImportQgroundcontrolMissionResponse::has_mission_plan() const {
  return _internal_has_mission_plan();
}
inline void ImportQgroundcontrolMissionResponse::clear_mission_plan() {
  if (GetArenaNoVirtual() == nullptr && mission_plan_ != nullptr) {
    delete mission_plan_;
  }
  mission_plan_ = nullptr;
}
inline const ::mavsdk::rpc::mission::MissionPlan& ImportQgroundcontrolMissionResponse::_internal_mission_plan() const {
  const ::mavsdk::rpc::mission::MissionPlan* p = mission_plan_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::mission::MissionPlan*>(
      &::mavsdk::rpc::mission::_MissionPlan_default_instance_);
}
inline const ::mavsdk::rpc::mission::MissionPlan& ImportQgroundcontrolMissionResponse::mission_plan() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.ImportQgroundcontrolMissionResponse.mission_plan)
  return _internal_mission_plan();
}
inline ::mavsdk::rpc::mission::MissionPlan* ImportQgroundcontrolMissionResponse::release_mission_plan() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.ImportQgroundcontrolMissionResponse.mission_plan)
  
  ::mavsdk::rpc::mission::MissionPlan* temp = mission_plan_;
  mission_plan_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::mission::MissionPlan* ImportQgroundcontrolMissionResponse::_internal_mutable_mission_plan() {
  
  if (mission_plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::mission::MissionPlan>(GetArenaNoVirtual());
    mission_plan_ = p;
  }
  return mission_plan_;
}
inline ::mavsdk::rpc::mission::MissionPlan* ImportQgroundcontrolMissionResponse::mutable_mission_plan() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.ImportQgroundcontrolMissionResponse.mission_plan)
  return _internal_mutable_mission_plan();
}
inline void ImportQgroundcontrolMissionResponse::set_allocated_mission_plan(::mavsdk::rpc::mission::MissionPlan* mission_plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mission_plan_;
  }
  if (mission_plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mission_plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission_plan, submessage_arena);
    }
    
  } else {
    
  }
  mission_plan_ = mission_plan;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.ImportQgroundcontrolMissionResponse.mission_plan)
}

// -------------------------------------------------------------------

// MissionItem

// double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
inline void MissionItem::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double MissionItem::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double MissionItem::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionItem.latitude_deg)
  return _internal_latitude_deg();
}
inline void MissionItem::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void MissionItem::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionItem.latitude_deg)
}

// double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
inline void MissionItem::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double MissionItem::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double MissionItem::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionItem.longitude_deg)
  return _internal_longitude_deg();
}
inline void MissionItem::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void MissionItem::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionItem.longitude_deg)
}

// float relative_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
inline void MissionItem::clear_relative_altitude_m() {
  relative_altitude_m_ = 0;
}
inline float MissionItem::_internal_relative_altitude_m() const {
  return relative_altitude_m_;
}
inline float MissionItem::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionItem.relative_altitude_m)
  return _internal_relative_altitude_m();
}
inline void MissionItem::_internal_set_relative_altitude_m(float value) {
  
  relative_altitude_m_ = value;
}
inline void MissionItem::set_relative_altitude_m(float value) {
  _internal_set_relative_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionItem.relative_altitude_m)
}

// float speed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];
inline void MissionItem::clear_speed_m_s() {
  speed_m_s_ = 0;
}
inline float MissionItem::_internal_speed_m_s() const {
  return speed_m_s_;
}
inline float MissionItem::speed_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionItem.speed_m_s)
  return _internal_speed_m_s();
}
inline void MissionItem::_internal_set_speed_m_s(float value) {
  
  speed_m_s_ = value;
}
inline void MissionItem::set_speed_m_s(float value) {
  _internal_set_speed_m_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionItem.speed_m_s)
}

// bool is_fly_through = 5 [(.mavsdk.options.default_value) = "false"];
inline void MissionItem::clear_is_fly_through() {
  is_fly_through_ = false;
}
inline bool MissionItem::_internal_is_fly_through() const {
  return is_fly_through_;
}
inline bool MissionItem::is_fly_through() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionItem.is_fly_through)
  return _internal_is_fly_through();
}
inline void MissionItem::_internal_set_is_fly_through(bool value) {
  
  is_fly_through_ = value;
}
inline void MissionItem::set_is_fly_through(bool value) {
  _internal_set_is_fly_through(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionItem.is_fly_through)
}

// float gimbal_pitch_deg = 6 [(.mavsdk.options.default_value) = "NaN"];
inline void MissionItem::clear_gimbal_pitch_deg() {
  gimbal_pitch_deg_ = 0;
}
inline float MissionItem::_internal_gimbal_pitch_deg() const {
  return gimbal_pitch_deg_;
}
inline float MissionItem::gimbal_pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionItem.gimbal_pitch_deg)
  return _internal_gimbal_pitch_deg();
}
inline void MissionItem::_internal_set_gimbal_pitch_deg(float value) {
  
  gimbal_pitch_deg_ = value;
}
inline void MissionItem::set_gimbal_pitch_deg(float value) {
  _internal_set_gimbal_pitch_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionItem.gimbal_pitch_deg)
}

// float gimbal_yaw_deg = 7 [(.mavsdk.options.default_value) = "NaN"];
inline void MissionItem::clear_gimbal_yaw_deg() {
  gimbal_yaw_deg_ = 0;
}
inline float MissionItem::_internal_gimbal_yaw_deg() const {
  return gimbal_yaw_deg_;
}
inline float MissionItem::gimbal_yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionItem.gimbal_yaw_deg)
  return _internal_gimbal_yaw_deg();
}
inline void MissionItem::_internal_set_gimbal_yaw_deg(float value) {
  
  gimbal_yaw_deg_ = value;
}
inline void MissionItem::set_gimbal_yaw_deg(float value) {
  _internal_set_gimbal_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionItem.gimbal_yaw_deg)
}

// .mavsdk.rpc.mission.MissionItem.CameraAction camera_action = 8;
inline void MissionItem::clear_camera_action() {
  camera_action_ = 0;
}
inline ::mavsdk::rpc::mission::MissionItem_CameraAction MissionItem::_internal_camera_action() const {
  return static_cast< ::mavsdk::rpc::mission::MissionItem_CameraAction >(camera_action_);
}
inline ::mavsdk::rpc::mission::MissionItem_CameraAction MissionItem::camera_action() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionItem.camera_action)
  return _internal_camera_action();
}
inline void MissionItem::_internal_set_camera_action(::mavsdk::rpc::mission::MissionItem_CameraAction value) {
  
  camera_action_ = value;
}
inline void MissionItem::set_camera_action(::mavsdk::rpc::mission::MissionItem_CameraAction value) {
  _internal_set_camera_action(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionItem.camera_action)
}

// float loiter_time_s = 9 [(.mavsdk.options.default_value) = "NaN"];
inline void MissionItem::clear_loiter_time_s() {
  loiter_time_s_ = 0;
}
inline float MissionItem::_internal_loiter_time_s() const {
  return loiter_time_s_;
}
inline float MissionItem::loiter_time_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionItem.loiter_time_s)
  return _internal_loiter_time_s();
}
inline void MissionItem::_internal_set_loiter_time_s(float value) {
  
  loiter_time_s_ = value;
}
inline void MissionItem::set_loiter_time_s(float value) {
  _internal_set_loiter_time_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionItem.loiter_time_s)
}

// double camera_photo_interval_s = 10 [(.mavsdk.options.default_value) = "1.0"];
inline void MissionItem::clear_camera_photo_interval_s() {
  camera_photo_interval_s_ = 0;
}
inline double MissionItem::_internal_camera_photo_interval_s() const {
  return camera_photo_interval_s_;
}
inline double MissionItem::camera_photo_interval_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionItem.camera_photo_interval_s)
  return _internal_camera_photo_interval_s();
}
inline void MissionItem::_internal_set_camera_photo_interval_s(double value) {
  
  camera_photo_interval_s_ = value;
}
inline void MissionItem::set_camera_photo_interval_s(double value) {
  _internal_set_camera_photo_interval_s(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionItem.camera_photo_interval_s)
}

// -------------------------------------------------------------------

// MissionPlan

// repeated .mavsdk.rpc.mission.MissionItem mission_items = 1;
inline int MissionPlan::_internal_mission_items_size() const {
  return mission_items_.size();
}
inline int MissionPlan::mission_items_size() const {
  return _internal_mission_items_size();
}
inline void MissionPlan::clear_mission_items() {
  mission_items_.Clear();
}
inline ::mavsdk::rpc::mission::MissionItem* MissionPlan::mutable_mission_items(int index) {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.MissionPlan.mission_items)
  return mission_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission::MissionItem >*
MissionPlan::mutable_mission_items() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.mission.MissionPlan.mission_items)
  return &mission_items_;
}
inline const ::mavsdk::rpc::mission::MissionItem& MissionPlan::_internal_mission_items(int index) const {
  return mission_items_.Get(index);
}
inline const ::mavsdk::rpc::mission::MissionItem& MissionPlan::mission_items(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionPlan.mission_items)
  return _internal_mission_items(index);
}
inline ::mavsdk::rpc::mission::MissionItem* MissionPlan::_internal_add_mission_items() {
  return mission_items_.Add();
}
inline ::mavsdk::rpc::mission::MissionItem* MissionPlan::add_mission_items() {
  // @@protoc_insertion_point(field_add:mavsdk.rpc.mission.MissionPlan.mission_items)
  return _internal_add_mission_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mavsdk::rpc::mission::MissionItem >&
MissionPlan::mission_items() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.mission.MissionPlan.mission_items)
  return mission_items_;
}

// -------------------------------------------------------------------

// MissionProgress

// int32 current = 1;
inline void MissionProgress::clear_current() {
  current_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionProgress::_internal_current() const {
  return current_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionProgress::current() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionProgress.current)
  return _internal_current();
}
inline void MissionProgress::_internal_set_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  current_ = value;
}
inline void MissionProgress::set_current(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionProgress.current)
}

// int32 total = 2;
inline void MissionProgress::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionProgress::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionProgress::total() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionProgress.total)
  return _internal_total();
}
inline void MissionProgress::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void MissionProgress::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionProgress.total)
}

// -------------------------------------------------------------------

// MissionResult

// .mavsdk.rpc.mission.MissionResult.Result result = 1;
inline void MissionResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::mission::MissionResult_Result MissionResult::_internal_result() const {
  return static_cast< ::mavsdk::rpc::mission::MissionResult_Result >(result_);
}
inline ::mavsdk::rpc::mission::MissionResult_Result MissionResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionResult.result)
  return _internal_result();
}
inline void MissionResult::_internal_set_result(::mavsdk::rpc::mission::MissionResult_Result value) {
  
  result_ = value;
}
inline void MissionResult::set_result(::mavsdk::rpc::mission::MissionResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionResult.result)
}

// string result_str = 2;
inline void MissionResult::clear_result_str() {
  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MissionResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.mission.MissionResult.result_str)
  return _internal_result_str();
}
inline void MissionResult::set_result_str(const std::string& value) {
  _internal_set_result_str(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.mission.MissionResult.result_str)
}
inline std::string* MissionResult::mutable_result_str() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.mission.MissionResult.result_str)
  return _internal_mutable_result_str();
}
inline const std::string& MissionResult::_internal_result_str() const {
  return result_str_.GetNoArena();
}
inline void MissionResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MissionResult::set_result_str(std::string&& value) {
  
  result_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.mission.MissionResult.result_str)
}
inline void MissionResult::set_result_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.mission.MissionResult.result_str)
}
inline void MissionResult::set_result_str(const char* value, size_t size) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.mission.MissionResult.result_str)
}
inline std::string* MissionResult::_internal_mutable_result_str() {
  
  return result_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MissionResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.mission.MissionResult.result_str)
  
  return result_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MissionResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.mission.MissionResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mission
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::mission::MissionItem_CameraAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::mission::MissionItem_CameraAction>() {
  return ::mavsdk::rpc::mission::MissionItem_CameraAction_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::mission::MissionResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::mission::MissionResult_Result>() {
  return ::mavsdk::rpc::mission::MissionResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mission_2fmission_2eproto
