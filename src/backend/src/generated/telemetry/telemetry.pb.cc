// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry/telemetry.proto

#include "telemetry/telemetry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccelerationFrd_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActuatorControlTarget_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActuatorOutputStatus_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AngularVelocityBody_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AngularVelocityFrd_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Battery_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Covariance_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EulerAngle_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedwingMetrics_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpsInfo_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroundTruth_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Health_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Imu_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MagneticFieldFrd_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Odometry_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionBody_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionNed_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PositionVelocityNed_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RcStatus_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedNed_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusText_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelocityBody_telemetry_2ftelemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelocityNed_telemetry_2ftelemetry_2eproto;
namespace mavsdk {
namespace rpc {
namespace telemetry {
class SubscribePositionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribePositionRequest> _instance;
} _SubscribePositionRequest_default_instance_;
class PositionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionResponse> _instance;
} _PositionResponse_default_instance_;
class SubscribeHomeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeHomeRequest> _instance;
} _SubscribeHomeRequest_default_instance_;
class HomeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HomeResponse> _instance;
} _HomeResponse_default_instance_;
class SubscribeInAirRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeInAirRequest> _instance;
} _SubscribeInAirRequest_default_instance_;
class InAirResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InAirResponse> _instance;
} _InAirResponse_default_instance_;
class SubscribeLandedStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeLandedStateRequest> _instance;
} _SubscribeLandedStateRequest_default_instance_;
class LandedStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LandedStateResponse> _instance;
} _LandedStateResponse_default_instance_;
class SubscribeArmedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeArmedRequest> _instance;
} _SubscribeArmedRequest_default_instance_;
class ArmedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArmedResponse> _instance;
} _ArmedResponse_default_instance_;
class SubscribeAttitudeQuaternionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeAttitudeQuaternionRequest> _instance;
} _SubscribeAttitudeQuaternionRequest_default_instance_;
class AttitudeQuaternionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttitudeQuaternionResponse> _instance;
} _AttitudeQuaternionResponse_default_instance_;
class SubscribeAttitudeEulerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeAttitudeEulerRequest> _instance;
} _SubscribeAttitudeEulerRequest_default_instance_;
class AttitudeEulerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttitudeEulerResponse> _instance;
} _AttitudeEulerResponse_default_instance_;
class SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeAttitudeAngularVelocityBodyRequest> _instance;
} _SubscribeAttitudeAngularVelocityBodyRequest_default_instance_;
class AttitudeAngularVelocityBodyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttitudeAngularVelocityBodyResponse> _instance;
} _AttitudeAngularVelocityBodyResponse_default_instance_;
class SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeCameraAttitudeQuaternionRequest> _instance;
} _SubscribeCameraAttitudeQuaternionRequest_default_instance_;
class CameraAttitudeQuaternionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraAttitudeQuaternionResponse> _instance;
} _CameraAttitudeQuaternionResponse_default_instance_;
class SubscribeCameraAttitudeEulerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeCameraAttitudeEulerRequest> _instance;
} _SubscribeCameraAttitudeEulerRequest_default_instance_;
class CameraAttitudeEulerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraAttitudeEulerResponse> _instance;
} _CameraAttitudeEulerResponse_default_instance_;
class SubscribeGroundSpeedNedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeGroundSpeedNedRequest> _instance;
} _SubscribeGroundSpeedNedRequest_default_instance_;
class GroundSpeedNedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroundSpeedNedResponse> _instance;
} _GroundSpeedNedResponse_default_instance_;
class SubscribeGpsInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeGpsInfoRequest> _instance;
} _SubscribeGpsInfoRequest_default_instance_;
class GpsInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpsInfoResponse> _instance;
} _GpsInfoResponse_default_instance_;
class SubscribeBatteryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeBatteryRequest> _instance;
} _SubscribeBatteryRequest_default_instance_;
class BatteryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatteryResponse> _instance;
} _BatteryResponse_default_instance_;
class SubscribeFlightModeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeFlightModeRequest> _instance;
} _SubscribeFlightModeRequest_default_instance_;
class FlightModeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlightModeResponse> _instance;
} _FlightModeResponse_default_instance_;
class SubscribeHealthRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeHealthRequest> _instance;
} _SubscribeHealthRequest_default_instance_;
class HealthResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthResponse> _instance;
} _HealthResponse_default_instance_;
class SubscribeRcStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeRcStatusRequest> _instance;
} _SubscribeRcStatusRequest_default_instance_;
class RcStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RcStatusResponse> _instance;
} _RcStatusResponse_default_instance_;
class SubscribeStatusTextRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeStatusTextRequest> _instance;
} _SubscribeStatusTextRequest_default_instance_;
class StatusTextResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusTextResponse> _instance;
} _StatusTextResponse_default_instance_;
class SubscribeActuatorControlTargetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeActuatorControlTargetRequest> _instance;
} _SubscribeActuatorControlTargetRequest_default_instance_;
class ActuatorControlTargetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActuatorControlTargetResponse> _instance;
} _ActuatorControlTargetResponse_default_instance_;
class SubscribeActuatorOutputStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeActuatorOutputStatusRequest> _instance;
} _SubscribeActuatorOutputStatusRequest_default_instance_;
class ActuatorOutputStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActuatorOutputStatusResponse> _instance;
} _ActuatorOutputStatusResponse_default_instance_;
class SubscribeOdometryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeOdometryRequest> _instance;
} _SubscribeOdometryRequest_default_instance_;
class OdometryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OdometryResponse> _instance;
} _OdometryResponse_default_instance_;
class SubscribePositionVelocityNedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribePositionVelocityNedRequest> _instance;
} _SubscribePositionVelocityNedRequest_default_instance_;
class PositionVelocityNedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionVelocityNedResponse> _instance;
} _PositionVelocityNedResponse_default_instance_;
class SubscribeGroundTruthRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeGroundTruthRequest> _instance;
} _SubscribeGroundTruthRequest_default_instance_;
class GroundTruthResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroundTruthResponse> _instance;
} _GroundTruthResponse_default_instance_;
class SubscribeFixedwingMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeFixedwingMetricsRequest> _instance;
} _SubscribeFixedwingMetricsRequest_default_instance_;
class FixedwingMetricsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixedwingMetricsResponse> _instance;
} _FixedwingMetricsResponse_default_instance_;
class SubscribeImuRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeImuRequest> _instance;
} _SubscribeImuRequest_default_instance_;
class ImuResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImuResponse> _instance;
} _ImuResponse_default_instance_;
class SubscribeHealthAllOkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeHealthAllOkRequest> _instance;
} _SubscribeHealthAllOkRequest_default_instance_;
class HealthAllOkResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthAllOkResponse> _instance;
} _HealthAllOkResponse_default_instance_;
class SubscribeUnixEpochTimeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeUnixEpochTimeRequest> _instance;
} _SubscribeUnixEpochTimeRequest_default_instance_;
class UnixEpochTimeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnixEpochTimeResponse> _instance;
} _UnixEpochTimeResponse_default_instance_;
class SetRatePositionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRatePositionRequest> _instance;
} _SetRatePositionRequest_default_instance_;
class SetRatePositionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRatePositionResponse> _instance;
} _SetRatePositionResponse_default_instance_;
class SetRateHomeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateHomeRequest> _instance;
} _SetRateHomeRequest_default_instance_;
class SetRateHomeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateHomeResponse> _instance;
} _SetRateHomeResponse_default_instance_;
class SetRateInAirRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateInAirRequest> _instance;
} _SetRateInAirRequest_default_instance_;
class SetRateInAirResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateInAirResponse> _instance;
} _SetRateInAirResponse_default_instance_;
class SetRateLandedStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateLandedStateRequest> _instance;
} _SetRateLandedStateRequest_default_instance_;
class SetRateLandedStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateLandedStateResponse> _instance;
} _SetRateLandedStateResponse_default_instance_;
class SetRateAttitudeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateAttitudeRequest> _instance;
} _SetRateAttitudeRequest_default_instance_;
class SetRateAttitudeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateAttitudeResponse> _instance;
} _SetRateAttitudeResponse_default_instance_;
class SetRateAttitudeAngularVelocityBodyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateAttitudeAngularVelocityBodyRequest> _instance;
} _SetRateAttitudeAngularVelocityBodyRequest_default_instance_;
class SetRateAttitudeAngularVelocityBodyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateAttitudeAngularVelocityBodyResponse> _instance;
} _SetRateAttitudeAngularVelocityBodyResponse_default_instance_;
class SetRateCameraAttitudeQuaternionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateCameraAttitudeQuaternionRequest> _instance;
} _SetRateCameraAttitudeQuaternionRequest_default_instance_;
class SetRateCameraAttitudeQuaternionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateCameraAttitudeQuaternionResponse> _instance;
} _SetRateCameraAttitudeQuaternionResponse_default_instance_;
class SetRateCameraAttitudeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateCameraAttitudeRequest> _instance;
} _SetRateCameraAttitudeRequest_default_instance_;
class SetRateCameraAttitudeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateCameraAttitudeResponse> _instance;
} _SetRateCameraAttitudeResponse_default_instance_;
class SetRateGroundSpeedNedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateGroundSpeedNedRequest> _instance;
} _SetRateGroundSpeedNedRequest_default_instance_;
class SetRateGroundSpeedNedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateGroundSpeedNedResponse> _instance;
} _SetRateGroundSpeedNedResponse_default_instance_;
class SetRateGpsInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateGpsInfoRequest> _instance;
} _SetRateGpsInfoRequest_default_instance_;
class SetRateGpsInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateGpsInfoResponse> _instance;
} _SetRateGpsInfoResponse_default_instance_;
class SetRateBatteryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateBatteryRequest> _instance;
} _SetRateBatteryRequest_default_instance_;
class SetRateBatteryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateBatteryResponse> _instance;
} _SetRateBatteryResponse_default_instance_;
class SetRateRcStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateRcStatusRequest> _instance;
} _SetRateRcStatusRequest_default_instance_;
class SetRateRcStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateRcStatusResponse> _instance;
} _SetRateRcStatusResponse_default_instance_;
class SetRateActuatorControlTargetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateActuatorControlTargetRequest> _instance;
} _SetRateActuatorControlTargetRequest_default_instance_;
class SetRateActuatorControlTargetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateActuatorControlTargetResponse> _instance;
} _SetRateActuatorControlTargetResponse_default_instance_;
class SetRateActuatorOutputStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateActuatorOutputStatusRequest> _instance;
} _SetRateActuatorOutputStatusRequest_default_instance_;
class SetRateActuatorOutputStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateActuatorOutputStatusResponse> _instance;
} _SetRateActuatorOutputStatusResponse_default_instance_;
class SetRateOdometryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateOdometryRequest> _instance;
} _SetRateOdometryRequest_default_instance_;
class SetRateOdometryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateOdometryResponse> _instance;
} _SetRateOdometryResponse_default_instance_;
class SetRatePositionVelocityNedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRatePositionVelocityNedRequest> _instance;
} _SetRatePositionVelocityNedRequest_default_instance_;
class SetRatePositionVelocityNedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRatePositionVelocityNedResponse> _instance;
} _SetRatePositionVelocityNedResponse_default_instance_;
class SetRateGroundTruthRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateGroundTruthRequest> _instance;
} _SetRateGroundTruthRequest_default_instance_;
class SetRateGroundTruthResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateGroundTruthResponse> _instance;
} _SetRateGroundTruthResponse_default_instance_;
class SetRateFixedwingMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateFixedwingMetricsRequest> _instance;
} _SetRateFixedwingMetricsRequest_default_instance_;
class SetRateFixedwingMetricsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateFixedwingMetricsResponse> _instance;
} _SetRateFixedwingMetricsResponse_default_instance_;
class SetRateImuRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateImuRequest> _instance;
} _SetRateImuRequest_default_instance_;
class SetRateImuResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateImuResponse> _instance;
} _SetRateImuResponse_default_instance_;
class SetRateUnixEpochTimeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateUnixEpochTimeRequest> _instance;
} _SetRateUnixEpochTimeRequest_default_instance_;
class SetRateUnixEpochTimeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRateUnixEpochTimeResponse> _instance;
} _SetRateUnixEpochTimeResponse_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quaternion> _instance;
} _Quaternion_default_instance_;
class EulerAngleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EulerAngle> _instance;
} _EulerAngle_default_instance_;
class AngularVelocityBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AngularVelocityBody> _instance;
} _AngularVelocityBody_default_instance_;
class SpeedNedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedNed> _instance;
} _SpeedNed_default_instance_;
class GpsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GpsInfo> _instance;
} _GpsInfo_default_instance_;
class BatteryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Battery> _instance;
} _Battery_default_instance_;
class HealthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Health> _instance;
} _Health_default_instance_;
class RcStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RcStatus> _instance;
} _RcStatus_default_instance_;
class StatusTextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatusText> _instance;
} _StatusText_default_instance_;
class ActuatorControlTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActuatorControlTarget> _instance;
} _ActuatorControlTarget_default_instance_;
class ActuatorOutputStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActuatorOutputStatus> _instance;
} _ActuatorOutputStatus_default_instance_;
class CovarianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Covariance> _instance;
} _Covariance_default_instance_;
class VelocityBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VelocityBody> _instance;
} _VelocityBody_default_instance_;
class PositionBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionBody> _instance;
} _PositionBody_default_instance_;
class OdometryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Odometry> _instance;
} _Odometry_default_instance_;
class PositionNedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionNed> _instance;
} _PositionNed_default_instance_;
class VelocityNedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VelocityNed> _instance;
} _VelocityNed_default_instance_;
class PositionVelocityNedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionVelocityNed> _instance;
} _PositionVelocityNed_default_instance_;
class GroundTruthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroundTruth> _instance;
} _GroundTruth_default_instance_;
class FixedwingMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FixedwingMetrics> _instance;
} _FixedwingMetrics_default_instance_;
class AccelerationFrdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccelerationFrd> _instance;
} _AccelerationFrd_default_instance_;
class AngularVelocityFrdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AngularVelocityFrd> _instance;
} _AngularVelocityFrd_default_instance_;
class MagneticFieldFrdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MagneticFieldFrd> _instance;
} _MagneticFieldFrd_default_instance_;
class ImuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Imu> _instance;
} _Imu_default_instance_;
class TelemetryResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TelemetryResult> _instance;
} _TelemetryResult_default_instance_;
}  // namespace telemetry
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsscc_info_AccelerationFrd_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_AccelerationFrd_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::AccelerationFrd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::AccelerationFrd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccelerationFrd_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccelerationFrd_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_ActuatorControlTarget_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_ActuatorControlTarget_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::ActuatorControlTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::ActuatorControlTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActuatorControlTarget_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActuatorControlTarget_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_ActuatorControlTargetResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_ActuatorControlTargetResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::ActuatorControlTargetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::ActuatorControlTargetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActuatorControlTargetResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActuatorControlTargetResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_ActuatorControlTarget_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_ActuatorOutputStatus_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_ActuatorOutputStatus_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::ActuatorOutputStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::ActuatorOutputStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActuatorOutputStatus_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActuatorOutputStatus_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_ActuatorOutputStatusResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_ActuatorOutputStatusResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActuatorOutputStatusResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ActuatorOutputStatusResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_ActuatorOutputStatus_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_AngularVelocityBody_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_AngularVelocityBody_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::AngularVelocityBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::AngularVelocityBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AngularVelocityBody_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AngularVelocityBody_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_AngularVelocityFrd_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_AngularVelocityFrd_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::AngularVelocityFrd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::AngularVelocityFrd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AngularVelocityFrd_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AngularVelocityFrd_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_ArmedResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_ArmedResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::ArmedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::ArmedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ArmedResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ArmedResponse_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_AttitudeAngularVelocityBodyResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_AttitudeAngularVelocityBodyResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttitudeAngularVelocityBodyResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AttitudeAngularVelocityBodyResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_AngularVelocityBody_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_AttitudeEulerResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_AttitudeEulerResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::AttitudeEulerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::AttitudeEulerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttitudeEulerResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AttitudeEulerResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_EulerAngle_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_AttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_AttitudeQuaternionResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::AttitudeQuaternionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::AttitudeQuaternionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_Quaternion_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_Battery_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_Battery_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::Battery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::Battery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Battery_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Battery_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_BatteryResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_BatteryResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::BatteryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::BatteryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BatteryResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BatteryResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_Battery_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_CameraAttitudeEulerResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_CameraAttitudeEulerResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraAttitudeEulerResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CameraAttitudeEulerResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_EulerAngle_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_CameraAttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_CameraAttitudeQuaternionResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraAttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CameraAttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_Quaternion_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_Covariance_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_Covariance_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::Covariance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::Covariance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Covariance_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Covariance_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_EulerAngle_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_EulerAngle_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::EulerAngle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::EulerAngle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EulerAngle_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EulerAngle_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_FixedwingMetrics_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_FixedwingMetrics_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::FixedwingMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::FixedwingMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FixedwingMetrics_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FixedwingMetrics_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_FixedwingMetricsResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_FixedwingMetricsResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::FixedwingMetricsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::FixedwingMetricsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FixedwingMetricsResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FixedwingMetricsResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_FixedwingMetrics_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_FlightModeResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_FlightModeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::FlightModeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::FlightModeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlightModeResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlightModeResponse_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_GpsInfo_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_GpsInfo_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::GpsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::GpsInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpsInfo_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GpsInfo_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_GpsInfoResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_GpsInfoResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::GpsInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::GpsInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GpsInfoResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GpsInfoResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_GpsInfo_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_GroundSpeedNedResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_GroundSpeedNedResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::GroundSpeedNedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::GroundSpeedNedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroundSpeedNedResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroundSpeedNedResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_SpeedNed_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_GroundTruth_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_GroundTruth_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::GroundTruth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::GroundTruth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroundTruth_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroundTruth_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_GroundTruthResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_GroundTruthResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::GroundTruthResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::GroundTruthResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroundTruthResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroundTruthResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_GroundTruth_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_Health_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_Health_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::Health();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::Health::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Health_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Health_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_HealthAllOkResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_HealthAllOkResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::HealthAllOkResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::HealthAllOkResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthAllOkResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HealthAllOkResponse_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_HealthResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_HealthResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::HealthResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::HealthResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HealthResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HealthResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_Health_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_HomeResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_HomeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::HomeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::HomeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HomeResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HomeResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_Position_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_Imu_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_Imu_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::Imu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::Imu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Imu_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Imu_telemetry_2ftelemetry_2eproto}, {
      &scc_info_AccelerationFrd_telemetry_2ftelemetry_2eproto.base,
      &scc_info_AngularVelocityFrd_telemetry_2ftelemetry_2eproto.base,
      &scc_info_MagneticFieldFrd_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_ImuResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_ImuResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::ImuResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::ImuResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImuResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_Imu_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_InAirResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_InAirResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::InAirResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::InAirResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InAirResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InAirResponse_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_LandedStateResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_LandedStateResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::LandedStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::LandedStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LandedStateResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LandedStateResponse_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_MagneticFieldFrd_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_MagneticFieldFrd_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::MagneticFieldFrd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::MagneticFieldFrd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MagneticFieldFrd_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MagneticFieldFrd_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_Odometry_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_Odometry_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::Odometry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::Odometry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Odometry_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Odometry_telemetry_2ftelemetry_2eproto}, {
      &scc_info_PositionBody_telemetry_2ftelemetry_2eproto.base,
      &scc_info_Quaternion_telemetry_2ftelemetry_2eproto.base,
      &scc_info_VelocityBody_telemetry_2ftelemetry_2eproto.base,
      &scc_info_AngularVelocityBody_telemetry_2ftelemetry_2eproto.base,
      &scc_info_Covariance_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_OdometryResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_OdometryResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::OdometryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::OdometryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OdometryResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OdometryResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_Odometry_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_Position_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_Position_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_PositionBody_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_PositionBody_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::PositionBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::PositionBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionBody_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionBody_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_PositionNed_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_PositionNed_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::PositionNed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::PositionNed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionNed_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionNed_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_PositionResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_PositionResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::PositionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::PositionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PositionResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_Position_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_PositionVelocityNed_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_PositionVelocityNed_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::PositionVelocityNed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::PositionVelocityNed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PositionVelocityNed_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PositionVelocityNed_telemetry_2ftelemetry_2eproto}, {
      &scc_info_PositionNed_telemetry_2ftelemetry_2eproto.base,
      &scc_info_VelocityNed_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_PositionVelocityNedResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_PositionVelocityNedResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::PositionVelocityNedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::PositionVelocityNedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionVelocityNedResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PositionVelocityNedResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_PositionVelocityNed_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_Quaternion_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_Quaternion_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::Quaternion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::Quaternion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quaternion_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_RcStatus_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_RcStatus_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::RcStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::RcStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RcStatus_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RcStatus_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_RcStatusResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_RcStatusResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::RcStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::RcStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RcStatusResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RcStatusResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_RcStatus_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateActuatorControlTargetRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateActuatorControlTargetRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateActuatorControlTargetRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateActuatorControlTargetRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateActuatorControlTargetResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateActuatorControlTargetResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateActuatorControlTargetResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateActuatorControlTargetResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateActuatorOutputStatusRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateActuatorOutputStatusRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateActuatorOutputStatusRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateActuatorOutputStatusRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateActuatorOutputStatusResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateActuatorOutputStatusResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateActuatorOutputStatusResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateActuatorOutputStatusResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateAttitudeAngularVelocityBodyRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateAttitudeAngularVelocityBodyRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateAttitudeAngularVelocityBodyRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateAttitudeAngularVelocityBodyRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateAttitudeAngularVelocityBodyResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateAttitudeAngularVelocityBodyResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateAttitudeAngularVelocityBodyResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateAttitudeAngularVelocityBodyResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateAttitudeRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateAttitudeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateAttitudeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateAttitudeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateAttitudeRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateAttitudeRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateAttitudeResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateAttitudeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateAttitudeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateAttitudeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateAttitudeResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateAttitudeResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateBatteryRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateBatteryRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateBatteryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateBatteryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateBatteryRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateBatteryRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateBatteryResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateBatteryResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateBatteryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateBatteryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateBatteryResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateBatteryResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateCameraAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateCameraAttitudeQuaternionRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateCameraAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateCameraAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateCameraAttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateCameraAttitudeQuaternionResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateCameraAttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateCameraAttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateCameraAttitudeRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateCameraAttitudeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateCameraAttitudeRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateCameraAttitudeRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateCameraAttitudeResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateCameraAttitudeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateCameraAttitudeResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateCameraAttitudeResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateFixedwingMetricsRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateFixedwingMetricsRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateFixedwingMetricsRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateFixedwingMetricsRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateFixedwingMetricsResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateFixedwingMetricsResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateFixedwingMetricsResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateFixedwingMetricsResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateGpsInfoRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateGpsInfoRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateGpsInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateGpsInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateGpsInfoRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateGpsInfoRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateGpsInfoResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateGpsInfoResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateGpsInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateGpsInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateGpsInfoResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateGpsInfoResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateGroundSpeedNedRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateGroundSpeedNedRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateGroundSpeedNedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateGroundSpeedNedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateGroundSpeedNedRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateGroundSpeedNedRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateGroundSpeedNedResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateGroundSpeedNedResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateGroundSpeedNedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateGroundSpeedNedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateGroundSpeedNedResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateGroundSpeedNedResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateGroundTruthRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateGroundTruthRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateGroundTruthRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateGroundTruthRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateGroundTruthRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateGroundTruthRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateGroundTruthResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateGroundTruthResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateGroundTruthResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateGroundTruthResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateGroundTruthResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateGroundTruthResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateHomeRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateHomeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateHomeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateHomeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateHomeRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateHomeRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateHomeResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateHomeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateHomeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateHomeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateHomeResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateHomeResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateImuRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateImuRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateImuRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateImuRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateImuRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateImuRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateImuResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateImuResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateImuResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateImuResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateImuResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateImuResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateInAirRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateInAirRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateInAirRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateInAirRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateInAirRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateInAirRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateInAirResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateInAirResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateInAirResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateInAirResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateInAirResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateInAirResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateLandedStateRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateLandedStateRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateLandedStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateLandedStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateLandedStateRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateLandedStateRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateLandedStateResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateLandedStateResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateLandedStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateLandedStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateLandedStateResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateLandedStateResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateOdometryRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateOdometryRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateOdometryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateOdometryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateOdometryRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateOdometryRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateOdometryResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateOdometryResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateOdometryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateOdometryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateOdometryResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateOdometryResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRatePositionRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRatePositionRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRatePositionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRatePositionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRatePositionRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRatePositionRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRatePositionResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRatePositionResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRatePositionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRatePositionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRatePositionResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRatePositionResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRatePositionVelocityNedRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRatePositionVelocityNedRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRatePositionVelocityNedRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRatePositionVelocityNedRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRatePositionVelocityNedResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRatePositionVelocityNedResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRatePositionVelocityNedResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRatePositionVelocityNedResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateRcStatusRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateRcStatusRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateRcStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateRcStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateRcStatusRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateRcStatusRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateRcStatusResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateRcStatusResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateRcStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateRcStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateRcStatusResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateRcStatusResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SetRateUnixEpochTimeRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateUnixEpochTimeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetRateUnixEpochTimeRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetRateUnixEpochTimeRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SetRateUnixEpochTimeResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SetRateUnixEpochTimeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetRateUnixEpochTimeResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetRateUnixEpochTimeResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SpeedNed_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SpeedNed_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SpeedNed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SpeedNed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedNed_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SpeedNed_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_StatusText_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_StatusText_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::StatusText();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::StatusText::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatusText_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatusText_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_StatusTextResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_StatusTextResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::StatusTextResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::StatusTextResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatusTextResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StatusTextResponse_telemetry_2ftelemetry_2eproto}, {
      &scc_info_StatusText_telemetry_2ftelemetry_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeActuatorControlTargetRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeActuatorControlTargetRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeActuatorControlTargetRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeActuatorControlTargetRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeActuatorOutputStatusRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeActuatorOutputStatusRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeActuatorOutputStatusRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeActuatorOutputStatusRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeArmedRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeArmedRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeArmedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeArmedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeArmedRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeArmedRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeAttitudeAngularVelocityBodyRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeAttitudeAngularVelocityBodyRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeAttitudeAngularVelocityBodyRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeAttitudeAngularVelocityBodyRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeAttitudeEulerRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeAttitudeEulerRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeAttitudeEulerRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeAttitudeEulerRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeAttitudeQuaternionRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeBatteryRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeBatteryRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeBatteryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeBatteryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeBatteryRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeBatteryRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeCameraAttitudeEulerRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeCameraAttitudeEulerRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeCameraAttitudeEulerRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeCameraAttitudeEulerRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeCameraAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeCameraAttitudeQuaternionRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeCameraAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeCameraAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeFixedwingMetricsRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeFixedwingMetricsRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeFixedwingMetricsRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeFixedwingMetricsRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeFlightModeRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeFlightModeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeFlightModeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeFlightModeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeFlightModeRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeFlightModeRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeGpsInfoRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeGpsInfoRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeGpsInfoRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeGpsInfoRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeGroundSpeedNedRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeGroundSpeedNedRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeGroundSpeedNedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeGroundSpeedNedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeGroundSpeedNedRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeGroundSpeedNedRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeGroundTruthRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeGroundTruthRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeGroundTruthRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeGroundTruthRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeHealthAllOkRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeHealthAllOkRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeHealthAllOkRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeHealthAllOkRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeHealthRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeHealthRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeHealthRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeHealthRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeHealthRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeHealthRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeHomeRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeHomeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeHomeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeHomeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeHomeRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeHomeRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeImuRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeImuRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeImuRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeImuRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeImuRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeImuRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeInAirRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeInAirRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeInAirRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeInAirRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeInAirRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeInAirRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeLandedStateRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeLandedStateRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeLandedStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeLandedStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeLandedStateRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeLandedStateRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeOdometryRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeOdometryRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeOdometryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeOdometryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeOdometryRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeOdometryRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribePositionRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribePositionRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribePositionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribePositionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribePositionRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribePositionRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribePositionVelocityNedRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribePositionVelocityNedRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribePositionVelocityNedRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribePositionVelocityNedRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeRcStatusRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeRcStatusRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeRcStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeRcStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeRcStatusRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeRcStatusRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeStatusTextRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeStatusTextRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeStatusTextRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeStatusTextRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeStatusTextRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeStatusTextRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeUnixEpochTimeRequest_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_SubscribeUnixEpochTimeRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeUnixEpochTimeRequest_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeUnixEpochTimeRequest_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_TelemetryResult_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::TelemetryResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::TelemetryResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TelemetryResult_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_UnixEpochTimeResponse_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_UnixEpochTimeResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::UnixEpochTimeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::UnixEpochTimeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnixEpochTimeResponse_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnixEpochTimeResponse_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_VelocityBody_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_VelocityBody_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::VelocityBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::VelocityBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelocityBody_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VelocityBody_telemetry_2ftelemetry_2eproto}, {}};

static void InitDefaultsscc_info_VelocityNed_telemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::telemetry::_VelocityNed_default_instance_;
    new (ptr) ::mavsdk::rpc::telemetry::VelocityNed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::telemetry::VelocityNed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VelocityNed_telemetry_2ftelemetry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VelocityNed_telemetry_2ftelemetry_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_telemetry_2ftelemetry_2eproto[118];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_telemetry_2ftelemetry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_telemetry_2ftelemetry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribePositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionResponse, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeHomeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HomeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HomeResponse, home_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeInAirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::InAirResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::InAirResponse, is_in_air_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeLandedStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::LandedStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::LandedStateResponse, landed_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeArmedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ArmedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ArmedResponse, is_armed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeQuaternionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeQuaternionResponse, attitude_quaternion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeEulerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeEulerResponse, attitude_euler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse, attitude_angular_velocity_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse, attitude_quaternion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse, attitude_euler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeGroundSpeedNedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundSpeedNedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundSpeedNedResponse, ground_speed_ned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfoResponse, gps_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeBatteryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::BatteryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::BatteryResponse, battery_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeFlightModeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FlightModeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FlightModeResponse, flight_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeHealthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthResponse, health_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeRcStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatusResponse, rc_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeStatusTextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusTextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusTextResponse, status_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTargetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTargetResponse, actuator_control_target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse, actuator_output_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeOdometryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::OdometryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::OdometryResponse, odometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNedResponse, position_velocity_ned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruthResponse, ground_truth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetricsResponse, fixedwing_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeImuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ImuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ImuResponse, imu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthAllOkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::HealthAllOkResponse, is_health_all_ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::UnixEpochTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::UnixEpochTimeResponse, time_us_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateHomeResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateInAirResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateLandedStateResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundSpeedNedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundSpeedNedRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundSpeedNedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundSpeedNedResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGpsInfoResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateBatteryResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateRcStatusResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateOdometryResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateGroundTruthResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateImuResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest, rate_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse, telemetry_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, absolute_altitude_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Position, relative_altitude_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, w_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Quaternion, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, roll_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::EulerAngle, yaw_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityBody, roll_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityBody, pitch_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityBody, yaw_rad_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SpeedNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SpeedNed, velocity_north_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SpeedNed, velocity_east_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::SpeedNed, velocity_down_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfo, num_satellites_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GpsInfo, fix_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, voltage_v_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Battery, remaining_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_gyrometer_calibration_ok_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_accelerometer_calibration_ok_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_magnetometer_calibration_ok_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_level_calibration_ok_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_local_position_ok_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_global_position_ok_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Health, is_home_position_ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatus, was_available_once_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatus, is_available_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::RcStatus, signal_strength_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusText, type_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::StatusText, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTarget, group_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorControlTarget, controls_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatus, active_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::ActuatorOutputStatus, actuator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Covariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Covariance, covariance_matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityBody, x_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityBody, y_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityBody, z_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionBody, x_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionBody, y_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionBody, z_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, time_usec_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, frame_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, child_frame_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, position_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, q_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, velocity_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, angular_velocity_body_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, pose_covariance_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Odometry, velocity_covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionNed, north_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionNed, east_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionNed, down_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNed, north_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNed, east_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::VelocityNed, down_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNed, position_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::PositionVelocityNed, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruth, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruth, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::GroundTruth, absolute_altitude_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetrics, airspeed_m_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetrics, throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::FixedwingMetrics, climb_rate_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AccelerationFrd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AccelerationFrd, forward_m_s2_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AccelerationFrd, right_m_s2_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AccelerationFrd, down_m_s2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityFrd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityFrd, forward_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityFrd, right_rad_s_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::AngularVelocityFrd, down_rad_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::MagneticFieldFrd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::MagneticFieldFrd, forward_gauss_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::MagneticFieldFrd, right_gauss_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::MagneticFieldFrd, down_gauss_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, acceleration_frd_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, angular_velocity_frd_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, magnetic_field_frd_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::Imu, temperature_degc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::TelemetryResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::TelemetryResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::telemetry::TelemetryResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::telemetry::SubscribePositionRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::telemetry::PositionResponse)},
  { 11, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeHomeRequest)},
  { 16, -1, sizeof(::mavsdk::rpc::telemetry::HomeResponse)},
  { 22, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeInAirRequest)},
  { 27, -1, sizeof(::mavsdk::rpc::telemetry::InAirResponse)},
  { 33, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeLandedStateRequest)},
  { 38, -1, sizeof(::mavsdk::rpc::telemetry::LandedStateResponse)},
  { 44, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeArmedRequest)},
  { 49, -1, sizeof(::mavsdk::rpc::telemetry::ArmedResponse)},
  { 55, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest)},
  { 60, -1, sizeof(::mavsdk::rpc::telemetry::AttitudeQuaternionResponse)},
  { 66, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest)},
  { 71, -1, sizeof(::mavsdk::rpc::telemetry::AttitudeEulerResponse)},
  { 77, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest)},
  { 82, -1, sizeof(::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse)},
  { 88, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest)},
  { 93, -1, sizeof(::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse)},
  { 99, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest)},
  { 104, -1, sizeof(::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse)},
  { 110, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeGroundSpeedNedRequest)},
  { 115, -1, sizeof(::mavsdk::rpc::telemetry::GroundSpeedNedResponse)},
  { 121, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest)},
  { 126, -1, sizeof(::mavsdk::rpc::telemetry::GpsInfoResponse)},
  { 132, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeBatteryRequest)},
  { 137, -1, sizeof(::mavsdk::rpc::telemetry::BatteryResponse)},
  { 143, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeFlightModeRequest)},
  { 148, -1, sizeof(::mavsdk::rpc::telemetry::FlightModeResponse)},
  { 154, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeHealthRequest)},
  { 159, -1, sizeof(::mavsdk::rpc::telemetry::HealthResponse)},
  { 165, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeRcStatusRequest)},
  { 170, -1, sizeof(::mavsdk::rpc::telemetry::RcStatusResponse)},
  { 176, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeStatusTextRequest)},
  { 181, -1, sizeof(::mavsdk::rpc::telemetry::StatusTextResponse)},
  { 187, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest)},
  { 192, -1, sizeof(::mavsdk::rpc::telemetry::ActuatorControlTargetResponse)},
  { 198, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest)},
  { 203, -1, sizeof(::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse)},
  { 209, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeOdometryRequest)},
  { 214, -1, sizeof(::mavsdk::rpc::telemetry::OdometryResponse)},
  { 220, -1, sizeof(::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest)},
  { 225, -1, sizeof(::mavsdk::rpc::telemetry::PositionVelocityNedResponse)},
  { 231, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest)},
  { 236, -1, sizeof(::mavsdk::rpc::telemetry::GroundTruthResponse)},
  { 242, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest)},
  { 247, -1, sizeof(::mavsdk::rpc::telemetry::FixedwingMetricsResponse)},
  { 253, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeImuRequest)},
  { 258, -1, sizeof(::mavsdk::rpc::telemetry::ImuResponse)},
  { 264, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest)},
  { 269, -1, sizeof(::mavsdk::rpc::telemetry::HealthAllOkResponse)},
  { 275, -1, sizeof(::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest)},
  { 280, -1, sizeof(::mavsdk::rpc::telemetry::UnixEpochTimeResponse)},
  { 286, -1, sizeof(::mavsdk::rpc::telemetry::SetRatePositionRequest)},
  { 292, -1, sizeof(::mavsdk::rpc::telemetry::SetRatePositionResponse)},
  { 298, -1, sizeof(::mavsdk::rpc::telemetry::SetRateHomeRequest)},
  { 304, -1, sizeof(::mavsdk::rpc::telemetry::SetRateHomeResponse)},
  { 310, -1, sizeof(::mavsdk::rpc::telemetry::SetRateInAirRequest)},
  { 316, -1, sizeof(::mavsdk::rpc::telemetry::SetRateInAirResponse)},
  { 322, -1, sizeof(::mavsdk::rpc::telemetry::SetRateLandedStateRequest)},
  { 328, -1, sizeof(::mavsdk::rpc::telemetry::SetRateLandedStateResponse)},
  { 334, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeRequest)},
  { 340, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeResponse)},
  { 346, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest)},
  { 352, -1, sizeof(::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse)},
  { 358, -1, sizeof(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest)},
  { 364, -1, sizeof(::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse)},
  { 370, -1, sizeof(::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest)},
  { 376, -1, sizeof(::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse)},
  { 382, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGroundSpeedNedRequest)},
  { 388, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGroundSpeedNedResponse)},
  { 394, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGpsInfoRequest)},
  { 400, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGpsInfoResponse)},
  { 406, -1, sizeof(::mavsdk::rpc::telemetry::SetRateBatteryRequest)},
  { 412, -1, sizeof(::mavsdk::rpc::telemetry::SetRateBatteryResponse)},
  { 418, -1, sizeof(::mavsdk::rpc::telemetry::SetRateRcStatusRequest)},
  { 424, -1, sizeof(::mavsdk::rpc::telemetry::SetRateRcStatusResponse)},
  { 430, -1, sizeof(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest)},
  { 436, -1, sizeof(::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse)},
  { 442, -1, sizeof(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest)},
  { 448, -1, sizeof(::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse)},
  { 454, -1, sizeof(::mavsdk::rpc::telemetry::SetRateOdometryRequest)},
  { 460, -1, sizeof(::mavsdk::rpc::telemetry::SetRateOdometryResponse)},
  { 466, -1, sizeof(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest)},
  { 472, -1, sizeof(::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse)},
  { 478, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGroundTruthRequest)},
  { 484, -1, sizeof(::mavsdk::rpc::telemetry::SetRateGroundTruthResponse)},
  { 490, -1, sizeof(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest)},
  { 496, -1, sizeof(::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse)},
  { 502, -1, sizeof(::mavsdk::rpc::telemetry::SetRateImuRequest)},
  { 508, -1, sizeof(::mavsdk::rpc::telemetry::SetRateImuResponse)},
  { 514, -1, sizeof(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest)},
  { 520, -1, sizeof(::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse)},
  { 526, -1, sizeof(::mavsdk::rpc::telemetry::Position)},
  { 535, -1, sizeof(::mavsdk::rpc::telemetry::Quaternion)},
  { 544, -1, sizeof(::mavsdk::rpc::telemetry::EulerAngle)},
  { 552, -1, sizeof(::mavsdk::rpc::telemetry::AngularVelocityBody)},
  { 560, -1, sizeof(::mavsdk::rpc::telemetry::SpeedNed)},
  { 568, -1, sizeof(::mavsdk::rpc::telemetry::GpsInfo)},
  { 575, -1, sizeof(::mavsdk::rpc::telemetry::Battery)},
  { 582, -1, sizeof(::mavsdk::rpc::telemetry::Health)},
  { 594, -1, sizeof(::mavsdk::rpc::telemetry::RcStatus)},
  { 602, -1, sizeof(::mavsdk::rpc::telemetry::StatusText)},
  { 609, -1, sizeof(::mavsdk::rpc::telemetry::ActuatorControlTarget)},
  { 616, -1, sizeof(::mavsdk::rpc::telemetry::ActuatorOutputStatus)},
  { 623, -1, sizeof(::mavsdk::rpc::telemetry::Covariance)},
  { 629, -1, sizeof(::mavsdk::rpc::telemetry::VelocityBody)},
  { 637, -1, sizeof(::mavsdk::rpc::telemetry::PositionBody)},
  { 645, -1, sizeof(::mavsdk::rpc::telemetry::Odometry)},
  { 659, -1, sizeof(::mavsdk::rpc::telemetry::PositionNed)},
  { 667, -1, sizeof(::mavsdk::rpc::telemetry::VelocityNed)},
  { 675, -1, sizeof(::mavsdk::rpc::telemetry::PositionVelocityNed)},
  { 682, -1, sizeof(::mavsdk::rpc::telemetry::GroundTruth)},
  { 690, -1, sizeof(::mavsdk::rpc::telemetry::FixedwingMetrics)},
  { 698, -1, sizeof(::mavsdk::rpc::telemetry::AccelerationFrd)},
  { 706, -1, sizeof(::mavsdk::rpc::telemetry::AngularVelocityFrd)},
  { 714, -1, sizeof(::mavsdk::rpc::telemetry::MagneticFieldFrd)},
  { 722, -1, sizeof(::mavsdk::rpc::telemetry::Imu)},
  { 731, -1, sizeof(::mavsdk::rpc::telemetry::TelemetryResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribePositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_PositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeHomeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_HomeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeInAirRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_InAirResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeLandedStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_LandedStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeArmedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ArmedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeAttitudeQuaternionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_AttitudeQuaternionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeAttitudeEulerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_AttitudeEulerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeAttitudeAngularVelocityBodyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_AttitudeAngularVelocityBodyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeCameraAttitudeQuaternionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_CameraAttitudeQuaternionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeCameraAttitudeEulerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_CameraAttitudeEulerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeGroundSpeedNedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_GroundSpeedNedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeGpsInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_GpsInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeBatteryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_BatteryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeFlightModeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_FlightModeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeHealthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_HealthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeRcStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_RcStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeStatusTextRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_StatusTextResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeActuatorControlTargetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ActuatorControlTargetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeActuatorOutputStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ActuatorOutputStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeOdometryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_OdometryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribePositionVelocityNedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_PositionVelocityNedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeGroundTruthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_GroundTruthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeFixedwingMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_FixedwingMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeImuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ImuResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeHealthAllOkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_HealthAllOkResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SubscribeUnixEpochTimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_UnixEpochTimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRatePositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRatePositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateHomeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateHomeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateInAirRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateInAirResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateLandedStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateLandedStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateAttitudeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateAttitudeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateAttitudeAngularVelocityBodyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateAttitudeAngularVelocityBodyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateCameraAttitudeQuaternionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateCameraAttitudeQuaternionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateCameraAttitudeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateCameraAttitudeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateGroundSpeedNedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateGroundSpeedNedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateGpsInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateGpsInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateBatteryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateBatteryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateRcStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateRcStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateActuatorControlTargetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateActuatorControlTargetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateActuatorOutputStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateActuatorOutputStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateOdometryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateOdometryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRatePositionVelocityNedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRatePositionVelocityNedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateGroundTruthRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateGroundTruthResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateFixedwingMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateFixedwingMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateImuRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateImuResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateUnixEpochTimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SetRateUnixEpochTimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_EulerAngle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_AngularVelocityBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_SpeedNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_GpsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Battery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Health_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_RcStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_StatusText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ActuatorControlTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_ActuatorOutputStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Covariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_VelocityBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_PositionBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Odometry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_PositionNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_VelocityNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_PositionVelocityNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_GroundTruth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_FixedwingMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_AccelerationFrd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_AngularVelocityFrd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_MagneticFieldFrd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_Imu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::telemetry::_TelemetryResult_default_instance_),
};

const char descriptor_table_protodef_telemetry_2ftelemetry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031telemetry/telemetry.proto\022\024mavsdk.rpc."
  "telemetry\032\024mavsdk_options.proto\"\032\n\030Subsc"
  "ribePositionRequest\"D\n\020PositionResponse\022"
  "0\n\010position\030\001 \001(\0132\036.mavsdk.rpc.telemetry"
  ".Position\"\026\n\024SubscribeHomeRequest\"<\n\014Hom"
  "eResponse\022,\n\004home\030\001 \001(\0132\036.mavsdk.rpc.tel"
  "emetry.Position\"\027\n\025SubscribeInAirRequest"
  "\"\"\n\rInAirResponse\022\021\n\tis_in_air\030\001 \001(\010\"\035\n\033"
  "SubscribeLandedStateRequest\"N\n\023LandedSta"
  "teResponse\0227\n\014landed_state\030\001 \001(\0162!.mavsd"
  "k.rpc.telemetry.LandedState\"\027\n\025Subscribe"
  "ArmedRequest\"!\n\rArmedResponse\022\020\n\010is_arme"
  "d\030\001 \001(\010\"$\n\"SubscribeAttitudeQuaternionRe"
  "quest\"[\n\032AttitudeQuaternionResponse\022=\n\023a"
  "ttitude_quaternion\030\001 \001(\0132 .mavsdk.rpc.te"
  "lemetry.Quaternion\"\037\n\035SubscribeAttitudeE"
  "ulerRequest\"Q\n\025AttitudeEulerResponse\0228\n\016"
  "attitude_euler\030\001 \001(\0132 .mavsdk.rpc.teleme"
  "try.EulerAngle\"-\n+SubscribeAttitudeAngul"
  "arVelocityBodyRequest\"x\n#AttitudeAngular"
  "VelocityBodyResponse\022Q\n\036attitude_angular"
  "_velocity_body\030\001 \001(\0132).mavsdk.rpc.teleme"
  "try.AngularVelocityBody\"*\n(SubscribeCame"
  "raAttitudeQuaternionRequest\"a\n CameraAtt"
  "itudeQuaternionResponse\022=\n\023attitude_quat"
  "ernion\030\001 \001(\0132 .mavsdk.rpc.telemetry.Quat"
  "ernion\"%\n#SubscribeCameraAttitudeEulerRe"
  "quest\"W\n\033CameraAttitudeEulerResponse\0228\n\016"
  "attitude_euler\030\001 \001(\0132 .mavsdk.rpc.teleme"
  "try.EulerAngle\" \n\036SubscribeGroundSpeedNe"
  "dRequest\"R\n\026GroundSpeedNedResponse\0228\n\020gr"
  "ound_speed_ned\030\001 \001(\0132\036.mavsdk.rpc.teleme"
  "try.SpeedNed\"\031\n\027SubscribeGpsInfoRequest\""
  "B\n\017GpsInfoResponse\022/\n\010gps_info\030\001 \001(\0132\035.m"
  "avsdk.rpc.telemetry.GpsInfo\"\031\n\027Subscribe"
  "BatteryRequest\"A\n\017BatteryResponse\022.\n\007bat"
  "tery\030\001 \001(\0132\035.mavsdk.rpc.telemetry.Batter"
  "y\"\034\n\032SubscribeFlightModeRequest\"K\n\022Fligh"
  "tModeResponse\0225\n\013flight_mode\030\001 \001(\0162 .mav"
  "sdk.rpc.telemetry.FlightMode\"\030\n\026Subscrib"
  "eHealthRequest\">\n\016HealthResponse\022,\n\006heal"
  "th\030\001 \001(\0132\034.mavsdk.rpc.telemetry.Health\"\032"
  "\n\030SubscribeRcStatusRequest\"E\n\020RcStatusRe"
  "sponse\0221\n\trc_status\030\001 \001(\0132\036.mavsdk.rpc.t"
  "elemetry.RcStatus\"\034\n\032SubscribeStatusText"
  "Request\"K\n\022StatusTextResponse\0225\n\013status_"
  "text\030\001 \001(\0132 .mavsdk.rpc.telemetry.Status"
  "Text\"\'\n%SubscribeActuatorControlTargetRe"
  "quest\"m\n\035ActuatorControlTargetResponse\022L"
  "\n\027actuator_control_target\030\001 \001(\0132+.mavsdk"
  ".rpc.telemetry.ActuatorControlTarget\"&\n$"
  "SubscribeActuatorOutputStatusRequest\"j\n\034"
  "ActuatorOutputStatusResponse\022J\n\026actuator"
  "_output_status\030\001 \001(\0132*.mavsdk.rpc.teleme"
  "try.ActuatorOutputStatus\"\032\n\030SubscribeOdo"
  "metryRequest\"D\n\020OdometryResponse\0220\n\010odom"
  "etry\030\001 \001(\0132\036.mavsdk.rpc.telemetry.Odomet"
  "ry\"%\n#SubscribePositionVelocityNedReques"
  "t\"g\n\033PositionVelocityNedResponse\022H\n\025posi"
  "tion_velocity_ned\030\001 \001(\0132).mavsdk.rpc.tel"
  "emetry.PositionVelocityNed\"\035\n\033SubscribeG"
  "roundTruthRequest\"N\n\023GroundTruthResponse"
  "\0227\n\014ground_truth\030\001 \001(\0132!.mavsdk.rpc.tele"
  "metry.GroundTruth\"\"\n SubscribeFixedwingM"
  "etricsRequest\"]\n\030FixedwingMetricsRespons"
  "e\022A\n\021fixedwing_metrics\030\001 \001(\0132&.mavsdk.rp"
  "c.telemetry.FixedwingMetrics\"\025\n\023Subscrib"
  "eImuRequest\"5\n\013ImuResponse\022&\n\003imu\030\001 \001(\0132"
  "\031.mavsdk.rpc.telemetry.Imu\"\035\n\033SubscribeH"
  "ealthAllOkRequest\"/\n\023HealthAllOkResponse"
  "\022\030\n\020is_health_all_ok\030\001 \001(\010\"\037\n\035SubscribeU"
  "nixEpochTimeRequest\"(\n\025UnixEpochTimeResp"
  "onse\022\017\n\007time_us\030\001 \001(\004\")\n\026SetRatePosition"
  "Request\022\017\n\007rate_hz\030\001 \001(\001\"Z\n\027SetRatePosit"
  "ionResponse\022\?\n\020telemetry_result\030\001 \001(\0132%."
  "mavsdk.rpc.telemetry.TelemetryResult\"%\n\022"
  "SetRateHomeRequest\022\017\n\007rate_hz\030\001 \001(\001\"V\n\023S"
  "etRateHomeResponse\022\?\n\020telemetry_result\030\001"
  " \001(\0132%.mavsdk.rpc.telemetry.TelemetryRes"
  "ult\"&\n\023SetRateInAirRequest\022\017\n\007rate_hz\030\001 "
  "\001(\001\"W\n\024SetRateInAirResponse\022\?\n\020telemetry"
  "_result\030\001 \001(\0132%.mavsdk.rpc.telemetry.Tel"
  "emetryResult\",\n\031SetRateLandedStateReques"
  "t\022\017\n\007rate_hz\030\001 \001(\001\"]\n\032SetRateLandedState"
  "Response\022\?\n\020telemetry_result\030\001 \001(\0132%.mav"
  "sdk.rpc.telemetry.TelemetryResult\")\n\026Set"
  "RateAttitudeRequest\022\017\n\007rate_hz\030\001 \001(\001\"Z\n\027"
  "SetRateAttitudeResponse\022\?\n\020telemetry_res"
  "ult\030\001 \001(\0132%.mavsdk.rpc.telemetry.Telemet"
  "ryResult\"<\n)SetRateAttitudeAngularVeloci"
  "tyBodyRequest\022\017\n\007rate_hz\030\001 \001(\001\"m\n*SetRat"
  "eAttitudeAngularVelocityBodyResponse\022\?\n\020"
  "telemetry_result\030\001 \001(\0132%.mavsdk.rpc.tele"
  "metry.TelemetryResult\"9\n&SetRateCameraAt"
  "titudeQuaternionRequest\022\017\n\007rate_hz\030\001 \001(\001"
  "\"j\n\'SetRateCameraAttitudeQuaternionRespo"
  "nse\022\?\n\020telemetry_result\030\001 \001(\0132%.mavsdk.r"
  "pc.telemetry.TelemetryResult\"/\n\034SetRateC"
  "ameraAttitudeRequest\022\017\n\007rate_hz\030\001 \001(\001\"`\n"
  "\035SetRateCameraAttitudeResponse\022\?\n\020teleme"
  "try_result\030\001 \001(\0132%.mavsdk.rpc.telemetry."
  "TelemetryResult\"/\n\034SetRateGroundSpeedNed"
  "Request\022\017\n\007rate_hz\030\001 \001(\001\"`\n\035SetRateGroun"
  "dSpeedNedResponse\022\?\n\020telemetry_result\030\001 "
  "\001(\0132%.mavsdk.rpc.telemetry.TelemetryResu"
  "lt\"(\n\025SetRateGpsInfoRequest\022\017\n\007rate_hz\030\001"
  " \001(\001\"Y\n\026SetRateGpsInfoResponse\022\?\n\020teleme"
  "try_result\030\001 \001(\0132%.mavsdk.rpc.telemetry."
  "TelemetryResult\"(\n\025SetRateBatteryRequest"
  "\022\017\n\007rate_hz\030\001 \001(\001\"Y\n\026SetRateBatteryRespo"
  "nse\022\?\n\020telemetry_result\030\001 \001(\0132%.mavsdk.r"
  "pc.telemetry.TelemetryResult\")\n\026SetRateR"
  "cStatusRequest\022\017\n\007rate_hz\030\001 \001(\001\"Z\n\027SetRa"
  "teRcStatusResponse\022\?\n\020telemetry_result\030\001"
  " \001(\0132%.mavsdk.rpc.telemetry.TelemetryRes"
  "ult\"6\n#SetRateActuatorControlTargetReque"
  "st\022\017\n\007rate_hz\030\001 \001(\001\"g\n$SetRateActuatorCo"
  "ntrolTargetResponse\022\?\n\020telemetry_result\030"
  "\001 \001(\0132%.mavsdk.rpc.telemetry.TelemetryRe"
  "sult\"5\n\"SetRateActuatorOutputStatusReque"
  "st\022\017\n\007rate_hz\030\001 \001(\001\"f\n#SetRateActuatorOu"
  "tputStatusResponse\022\?\n\020telemetry_result\030\001"
  " \001(\0132%.mavsdk.rpc.telemetry.TelemetryRes"
  "ult\")\n\026SetRateOdometryRequest\022\017\n\007rate_hz"
  "\030\001 \001(\001\"Z\n\027SetRateOdometryResponse\022\?\n\020tel"
  "emetry_result\030\001 \001(\0132%.mavsdk.rpc.telemet"
  "ry.TelemetryResult\"4\n!SetRatePositionVel"
  "ocityNedRequest\022\017\n\007rate_hz\030\001 \001(\001\"e\n\"SetR"
  "atePositionVelocityNedResponse\022\?\n\020teleme"
  "try_result\030\001 \001(\0132%.mavsdk.rpc.telemetry."
  "TelemetryResult\",\n\031SetRateGroundTruthReq"
  "uest\022\017\n\007rate_hz\030\001 \001(\001\"]\n\032SetRateGroundTr"
  "uthResponse\022\?\n\020telemetry_result\030\001 \001(\0132%."
  "mavsdk.rpc.telemetry.TelemetryResult\"1\n\036"
  "SetRateFixedwingMetricsRequest\022\017\n\007rate_h"
  "z\030\001 \001(\001\"b\n\037SetRateFixedwingMetricsRespon"
  "se\022\?\n\020telemetry_result\030\001 \001(\0132%.mavsdk.rp"
  "c.telemetry.TelemetryResult\"$\n\021SetRateIm"
  "uRequest\022\017\n\007rate_hz\030\001 \001(\001\"U\n\022SetRateImuR"
  "esponse\022\?\n\020telemetry_result\030\001 \001(\0132%.mavs"
  "dk.rpc.telemetry.TelemetryResult\".\n\033SetR"
  "ateUnixEpochTimeRequest\022\017\n\007rate_hz\030\001 \001(\001"
  "\"_\n\034SetRateUnixEpochTimeResponse\022\?\n\020tele"
  "metry_result\030\001 \001(\0132%.mavsdk.rpc.telemetr"
  "y.TelemetryResult\"\225\001\n\010Position\022\035\n\014latitu"
  "de_deg\030\001 \001(\001B\007\202\265\030\003NaN\022\036\n\rlongitude_deg\030\002"
  " \001(\001B\007\202\265\030\003NaN\022$\n\023absolute_altitude_m\030\003 \001"
  "(\002B\007\202\265\030\003NaN\022$\n\023relative_altitude_m\030\004 \001(\002"
  "B\007\202\265\030\003NaN\"\\\n\nQuaternion\022\022\n\001w\030\001 \001(\002B\007\202\265\030\003"
  "NaN\022\022\n\001x\030\002 \001(\002B\007\202\265\030\003NaN\022\022\n\001y\030\003 \001(\002B\007\202\265\030\003"
  "NaN\022\022\n\001z\030\004 \001(\002B\007\202\265\030\003NaN\"]\n\nEulerAngle\022\031\n"
  "\010roll_deg\030\001 \001(\002B\007\202\265\030\003NaN\022\032\n\tpitch_deg\030\002 "
  "\001(\002B\007\202\265\030\003NaN\022\030\n\007yaw_deg\030\003 \001(\002B\007\202\265\030\003NaN\"l"
  "\n\023AngularVelocityBody\022\033\n\nroll_rad_s\030\001 \001("
  "\002B\007\202\265\030\003NaN\022\034\n\013pitch_rad_s\030\002 \001(\002B\007\202\265\030\003NaN"
  "\022\032\n\tyaw_rad_s\030\003 \001(\002B\007\202\265\030\003NaN\"w\n\010SpeedNed"
  "\022#\n\022velocity_north_m_s\030\001 \001(\002B\007\202\265\030\003NaN\022\"\n"
  "\021velocity_east_m_s\030\002 \001(\002B\007\202\265\030\003NaN\022\"\n\021vel"
  "ocity_down_m_s\030\003 \001(\002B\007\202\265\030\003NaN\"Y\n\007GpsInfo"
  "\022\035\n\016num_satellites\030\001 \001(\005B\005\202\265\030\0010\022/\n\010fix_t"
  "ype\030\002 \001(\0162\035.mavsdk.rpc.telemetry.FixType"
  "\"I\n\007Battery\022\032\n\tvoltage_v\030\001 \001(\002B\007\202\265\030\003NaN\022"
  "\"\n\021remaining_percent\030\002 \001(\002B\007\202\265\030\003NaN\"\306\002\n\006"
  "Health\022.\n\033is_gyrometer_calibration_ok\030\001 "
  "\001(\010B\t\202\265\030\005false\0222\n\037is_accelerometer_calib"
  "ration_ok\030\002 \001(\010B\t\202\265\030\005false\0221\n\036is_magneto"
  "meter_calibration_ok\030\003 \001(\010B\t\202\265\030\005false\022*\n"
  "\027is_level_calibration_ok\030\004 \001(\010B\t\202\265\030\005fals"
  "e\022\'\n\024is_local_position_ok\030\005 \001(\010B\t\202\265\030\005fal"
  "se\022(\n\025is_global_position_ok\030\006 \001(\010B\t\202\265\030\005f"
  "alse\022&\n\023is_home_position_ok\030\007 \001(\010B\t\202\265\030\005f"
  "alse\"z\n\010RcStatus\022%\n\022was_available_once\030\001"
  " \001(\010B\t\202\265\030\005false\022\037\n\014is_available\030\002 \001(\010B\t\202"
  "\265\030\005false\022&\n\027signal_strength_percent\030\003 \001("
  "\002B\005\202\265\030\0010\"N\n\nStatusText\0222\n\004type\030\001 \001(\0162$.m"
  "avsdk.rpc.telemetry.StatusTextType\022\014\n\004te"
  "xt\030\002 \001(\t\"\?\n\025ActuatorControlTarget\022\024\n\005gro"
  "up\030\001 \001(\005B\005\202\265\030\0010\022\020\n\010controls\030\002 \003(\002\"\?\n\024Act"
  "uatorOutputStatus\022\025\n\006active\030\001 \001(\rB\005\202\265\030\0010"
  "\022\020\n\010actuator\030\002 \003(\002\"\'\n\nCovariance\022\031\n\021cova"
  "riance_matrix\030\001 \003(\002\";\n\014VelocityBody\022\r\n\005x"
  "_m_s\030\001 \001(\002\022\r\n\005y_m_s\030\002 \001(\002\022\r\n\005z_m_s\030\003 \001(\002"
  "\"5\n\014PositionBody\022\013\n\003x_m\030\001 \001(\002\022\013\n\003y_m\030\002 \001"
  "(\002\022\013\n\003z_m\030\003 \001(\002\"\354\004\n\010Odometry\022\021\n\ttime_use"
  "c\030\001 \001(\004\0229\n\010frame_id\030\002 \001(\0162\'.mavsdk.rpc.t"
  "elemetry.Odometry.MavFrame\022\?\n\016child_fram"
  "e_id\030\003 \001(\0162\'.mavsdk.rpc.telemetry.Odomet"
  "ry.MavFrame\0229\n\rposition_body\030\004 \001(\0132\".mav"
  "sdk.rpc.telemetry.PositionBody\022+\n\001q\030\005 \001("
  "\0132 .mavsdk.rpc.telemetry.Quaternion\0229\n\rv"
  "elocity_body\030\006 \001(\0132\".mavsdk.rpc.telemetr"
  "y.VelocityBody\022H\n\025angular_velocity_body\030"
  "\007 \001(\0132).mavsdk.rpc.telemetry.AngularVelo"
  "cityBody\0229\n\017pose_covariance\030\010 \001(\0132 .mavs"
  "dk.rpc.telemetry.Covariance\022=\n\023velocity_"
  "covariance\030\t \001(\0132 .mavsdk.rpc.telemetry."
  "Covariance\"j\n\010MavFrame\022\023\n\017MAV_FRAME_UNDE"
  "F\020\000\022\026\n\022MAV_FRAME_BODY_NED\020\010\022\030\n\024MAV_FRAME"
  "_VISION_NED\020\020\022\027\n\023MAV_FRAME_ESTIM_NED\020\022\"Y"
  "\n\013PositionNed\022\030\n\007north_m\030\001 \001(\002B\007\202\265\030\003NaN\022"
  "\027\n\006east_m\030\002 \001(\002B\007\202\265\030\003NaN\022\027\n\006down_m\030\003 \001(\002"
  "B\007\202\265\030\003NaN\"D\n\013VelocityNed\022\021\n\tnorth_m_s\030\001 "
  "\001(\002\022\020\n\010east_m_s\030\002 \001(\002\022\020\n\010down_m_s\030\003 \001(\002\""
  "\177\n\023PositionVelocityNed\0223\n\010position\030\001 \001(\013"
  "2!.mavsdk.rpc.telemetry.PositionNed\0223\n\010v"
  "elocity\030\002 \001(\0132!.mavsdk.rpc.telemetry.Vel"
  "ocityNed\"r\n\013GroundTruth\022\035\n\014latitude_deg\030"
  "\001 \001(\001B\007\202\265\030\003NaN\022\036\n\rlongitude_deg\030\002 \001(\001B\007\202"
  "\265\030\003NaN\022$\n\023absolute_altitude_m\030\003 \001(\002B\007\202\265\030"
  "\003NaN\"x\n\020FixedwingMetrics\022\035\n\014airspeed_m_s"
  "\030\001 \001(\002B\007\202\265\030\003NaN\022$\n\023throttle_percentage\030\002"
  " \001(\002B\007\202\265\030\003NaN\022\037\n\016climb_rate_m_s\030\003 \001(\002B\007\202"
  "\265\030\003NaN\"i\n\017AccelerationFrd\022\035\n\014forward_m_s"
  "2\030\001 \001(\002B\007\202\265\030\003NaN\022\033\n\nright_m_s2\030\002 \001(\002B\007\202\265"
  "\030\003NaN\022\032\n\tdown_m_s2\030\003 \001(\002B\007\202\265\030\003NaN\"o\n\022Ang"
  "ularVelocityFrd\022\036\n\rforward_rad_s\030\001 \001(\002B\007"
  "\202\265\030\003NaN\022\034\n\013right_rad_s\030\002 \001(\002B\007\202\265\030\003NaN\022\033\n"
  "\ndown_rad_s\030\003 \001(\002B\007\202\265\030\003NaN\"m\n\020MagneticFi"
  "eldFrd\022\036\n\rforward_gauss\030\001 \001(\002B\007\202\265\030\003NaN\022\034"
  "\n\013right_gauss\030\002 \001(\002B\007\202\265\030\003NaN\022\033\n\ndown_gau"
  "ss\030\003 \001(\002B\007\202\265\030\003NaN\"\365\001\n\003Imu\022\?\n\020acceleratio"
  "n_frd\030\001 \001(\0132%.mavsdk.rpc.telemetry.Accel"
  "erationFrd\022F\n\024angular_velocity_frd\030\002 \001(\013"
  "2(.mavsdk.rpc.telemetry.AngularVelocityF"
  "rd\022B\n\022magnetic_field_frd\030\003 \001(\0132&.mavsdk."
  "rpc.telemetry.MagneticFieldFrd\022!\n\020temper"
  "ature_degc\030\004 \001(\002B\007\202\265\030\003NaN\"\211\002\n\017TelemetryR"
  "esult\022<\n\006result\030\001 \001(\0162,.mavsdk.rpc.telem"
  "etry.TelemetryResult.Result\022\022\n\nresult_st"
  "r\030\002 \001(\t\"\243\001\n\006Result\022\022\n\016RESULT_UNKNOWN\020\000\022\022"
  "\n\016RESULT_SUCCESS\020\001\022\024\n\020RESULT_NO_SYSTEM\020\002"
  "\022\033\n\027RESULT_CONNECTION_ERROR\020\003\022\017\n\013RESULT_"
  "BUSY\020\004\022\031\n\025RESULT_COMMAND_DENIED\020\005\022\022\n\016RES"
  "ULT_TIMEOUT\020\006*\244\001\n\007FixType\022\023\n\017FIX_TYPE_NO"
  "_GPS\020\000\022\023\n\017FIX_TYPE_NO_FIX\020\001\022\023\n\017FIX_TYPE_"
  "FIX_2D\020\002\022\023\n\017FIX_TYPE_FIX_3D\020\003\022\025\n\021FIX_TYP"
  "E_FIX_DGPS\020\004\022\026\n\022FIX_TYPE_RTK_FLOAT\020\005\022\026\n\022"
  "FIX_TYPE_RTK_FIXED\020\006*\206\003\n\nFlightMode\022\027\n\023F"
  "LIGHT_MODE_UNKNOWN\020\000\022\025\n\021FLIGHT_MODE_READ"
  "Y\020\001\022\027\n\023FLIGHT_MODE_TAKEOFF\020\002\022\024\n\020FLIGHT_M"
  "ODE_HOLD\020\003\022\027\n\023FLIGHT_MODE_MISSION\020\004\022 \n\034F"
  "LIGHT_MODE_RETURN_TO_LAUNCH\020\005\022\024\n\020FLIGHT_"
  "MODE_LAND\020\006\022\030\n\024FLIGHT_MODE_OFFBOARD\020\007\022\031\n"
  "\025FLIGHT_MODE_FOLLOW_ME\020\010\022\026\n\022FLIGHT_MODE_"
  "MANUAL\020\t\022\026\n\022FLIGHT_MODE_ALTCTL\020\n\022\026\n\022FLIG"
  "HT_MODE_POSCTL\020\013\022\024\n\020FLIGHT_MODE_ACRO\020\014\022\032"
  "\n\026FLIGHT_MODE_STABILIZED\020\r\022\031\n\025FLIGHT_MOD"
  "E_RATTITUDE\020\016*h\n\016StatusTextType\022\031\n\025STATU"
  "S_TEXT_TYPE_INFO\020\000\022\034\n\030STATUS_TEXT_TYPE_W"
  "ARNING\020\001\022\035\n\031STATUS_TEXT_TYPE_CRITICAL\020\002*"
  "\223\001\n\013LandedState\022\030\n\024LANDED_STATE_UNKNOWN\020"
  "\000\022\032\n\026LANDED_STATE_ON_GROUND\020\001\022\027\n\023LANDED_"
  "STATE_IN_AIR\020\002\022\033\n\027LANDED_STATE_TAKING_OF"
  "F\020\003\022\030\n\024LANDED_STATE_LANDING\020\0042\210+\n\020Teleme"
  "tryService\022o\n\021SubscribePosition\022..mavsdk"
  ".rpc.telemetry.SubscribePositionRequest\032"
  "&.mavsdk.rpc.telemetry.PositionResponse\""
  "\0000\001\022c\n\rSubscribeHome\022*.mavsdk.rpc.teleme"
  "try.SubscribeHomeRequest\032\".mavsdk.rpc.te"
  "lemetry.HomeResponse\"\0000\001\022f\n\016SubscribeInA"
  "ir\022+.mavsdk.rpc.telemetry.SubscribeInAir"
  "Request\032#.mavsdk.rpc.telemetry.InAirResp"
  "onse\"\0000\001\022x\n\024SubscribeLandedState\0221.mavsd"
  "k.rpc.telemetry.SubscribeLandedStateRequ"
  "est\032).mavsdk.rpc.telemetry.LandedStateRe"
  "sponse\"\0000\001\022f\n\016SubscribeArmed\022+.mavsdk.rp"
  "c.telemetry.SubscribeArmedRequest\032#.mavs"
  "dk.rpc.telemetry.ArmedResponse\"\0000\001\022\215\001\n\033S"
  "ubscribeAttitudeQuaternion\0228.mavsdk.rpc."
  "telemetry.SubscribeAttitudeQuaternionReq"
  "uest\0320.mavsdk.rpc.telemetry.AttitudeQuat"
  "ernionResponse\"\0000\001\022~\n\026SubscribeAttitudeE"
  "uler\0223.mavsdk.rpc.telemetry.SubscribeAtt"
  "itudeEulerRequest\032+.mavsdk.rpc.telemetry"
  ".AttitudeEulerResponse\"\0000\001\022\250\001\n$Subscribe"
  "AttitudeAngularVelocityBody\022A.mavsdk.rpc"
  ".telemetry.SubscribeAttitudeAngularVeloc"
  "ityBodyRequest\0329.mavsdk.rpc.telemetry.At"
  "titudeAngularVelocityBodyResponse\"\0000\001\022\237\001"
  "\n!SubscribeCameraAttitudeQuaternion\022>.ma"
  "vsdk.rpc.telemetry.SubscribeCameraAttitu"
  "deQuaternionRequest\0326.mavsdk.rpc.telemet"
  "ry.CameraAttitudeQuaternionResponse\"\0000\001\022"
  "\220\001\n\034SubscribeCameraAttitudeEuler\0229.mavsd"
  "k.rpc.telemetry.SubscribeCameraAttitudeE"
  "ulerRequest\0321.mavsdk.rpc.telemetry.Camer"
  "aAttitudeEulerResponse\"\0000\001\022\201\001\n\027Subscribe"
  "GroundSpeedNed\0224.mavsdk.rpc.telemetry.Su"
  "bscribeGroundSpeedNedRequest\032,.mavsdk.rp"
  "c.telemetry.GroundSpeedNedResponse\"\0000\001\022l"
  "\n\020SubscribeGpsInfo\022-.mavsdk.rpc.telemetr"
  "y.SubscribeGpsInfoRequest\032%.mavsdk.rpc.t"
  "elemetry.GpsInfoResponse\"\0000\001\022l\n\020Subscrib"
  "eBattery\022-.mavsdk.rpc.telemetry.Subscrib"
  "eBatteryRequest\032%.mavsdk.rpc.telemetry.B"
  "atteryResponse\"\0000\001\022u\n\023SubscribeFlightMod"
  "e\0220.mavsdk.rpc.telemetry.SubscribeFlight"
  "ModeRequest\032(.mavsdk.rpc.telemetry.Fligh"
  "tModeResponse\"\0000\001\022i\n\017SubscribeHealth\022,.m"
  "avsdk.rpc.telemetry.SubscribeHealthReque"
  "st\032$.mavsdk.rpc.telemetry.HealthResponse"
  "\"\0000\001\022o\n\021SubscribeRcStatus\022..mavsdk.rpc.t"
  "elemetry.SubscribeRcStatusRequest\032&.mavs"
  "dk.rpc.telemetry.RcStatusResponse\"\0000\001\022u\n"
  "\023SubscribeStatusText\0220.mavsdk.rpc.teleme"
  "try.SubscribeStatusTextRequest\032(.mavsdk."
  "rpc.telemetry.StatusTextResponse\"\0000\001\022\226\001\n"
  "\036SubscribeActuatorControlTarget\022;.mavsdk"
  ".rpc.telemetry.SubscribeActuatorControlT"
  "argetRequest\0323.mavsdk.rpc.telemetry.Actu"
  "atorControlTargetResponse\"\0000\001\022\223\001\n\035Subscr"
  "ibeActuatorOutputStatus\022:.mavsdk.rpc.tel"
  "emetry.SubscribeActuatorOutputStatusRequ"
  "est\0322.mavsdk.rpc.telemetry.ActuatorOutpu"
  "tStatusResponse\"\0000\001\022o\n\021SubscribeOdometry"
  "\022..mavsdk.rpc.telemetry.SubscribeOdometr"
  "yRequest\032&.mavsdk.rpc.telemetry.Odometry"
  "Response\"\0000\001\022\220\001\n\034SubscribePositionVeloci"
  "tyNed\0229.mavsdk.rpc.telemetry.SubscribePo"
  "sitionVelocityNedRequest\0321.mavsdk.rpc.te"
  "lemetry.PositionVelocityNedResponse\"\0000\001\022"
  "x\n\024SubscribeGroundTruth\0221.mavsdk.rpc.tel"
  "emetry.SubscribeGroundTruthRequest\032).mav"
  "sdk.rpc.telemetry.GroundTruthResponse\"\0000"
  "\001\022\207\001\n\031SubscribeFixedwingMetrics\0226.mavsdk"
  ".rpc.telemetry.SubscribeFixedwingMetrics"
  "Request\032..mavsdk.rpc.telemetry.Fixedwing"
  "MetricsResponse\"\0000\001\022`\n\014SubscribeImu\022).ma"
  "vsdk.rpc.telemetry.SubscribeImuRequest\032!"
  ".mavsdk.rpc.telemetry.ImuResponse\"\0000\001\022x\n"
  "\024SubscribeHealthAllOk\0221.mavsdk.rpc.telem"
  "etry.SubscribeHealthAllOkRequest\032).mavsd"
  "k.rpc.telemetry.HealthAllOkResponse\"\0000\001\022"
  "~\n\026SubscribeUnixEpochTime\0223.mavsdk.rpc.t"
  "elemetry.SubscribeUnixEpochTimeRequest\032+"
  ".mavsdk.rpc.telemetry.UnixEpochTimeRespo"
  "nse\"\0000\001\022p\n\017SetRatePosition\022,.mavsdk.rpc."
  "telemetry.SetRatePositionRequest\032-.mavsd"
  "k.rpc.telemetry.SetRatePositionResponse\""
  "\000\022d\n\013SetRateHome\022(.mavsdk.rpc.telemetry."
  "SetRateHomeRequest\032).mavsdk.rpc.telemetr"
  "y.SetRateHomeResponse\"\000\022g\n\014SetRateInAir\022"
  ").mavsdk.rpc.telemetry.SetRateInAirReque"
  "st\032*.mavsdk.rpc.telemetry.SetRateInAirRe"
  "sponse\"\000\022y\n\022SetRateLandedState\022/.mavsdk."
  "rpc.telemetry.SetRateLandedStateRequest\032"
  "0.mavsdk.rpc.telemetry.SetRateLandedStat"
  "eResponse\"\000\022p\n\017SetRateAttitude\022,.mavsdk."
  "rpc.telemetry.SetRateAttitudeRequest\032-.m"
  "avsdk.rpc.telemetry.SetRateAttitudeRespo"
  "nse\"\000\022\202\001\n\025SetRateCameraAttitude\0222.mavsdk"
  ".rpc.telemetry.SetRateCameraAttitudeRequ"
  "est\0323.mavsdk.rpc.telemetry.SetRateCamera"
  "AttitudeResponse\"\000\022\202\001\n\025SetRateGroundSpee"
  "dNed\0222.mavsdk.rpc.telemetry.SetRateGroun"
  "dSpeedNedRequest\0323.mavsdk.rpc.telemetry."
  "SetRateGroundSpeedNedResponse\"\000\022m\n\016SetRa"
  "teGpsInfo\022+.mavsdk.rpc.telemetry.SetRate"
  "GpsInfoRequest\032,.mavsdk.rpc.telemetry.Se"
  "tRateGpsInfoResponse\"\000\022m\n\016SetRateBattery"
  "\022+.mavsdk.rpc.telemetry.SetRateBatteryRe"
  "quest\032,.mavsdk.rpc.telemetry.SetRateBatt"
  "eryResponse\"\000\022p\n\017SetRateRcStatus\022,.mavsd"
  "k.rpc.telemetry.SetRateRcStatusRequest\032-"
  ".mavsdk.rpc.telemetry.SetRateRcStatusRes"
  "ponse\"\000\022\227\001\n\034SetRateActuatorControlTarget"
  "\0229.mavsdk.rpc.telemetry.SetRateActuatorC"
  "ontrolTargetRequest\032:.mavsdk.rpc.telemet"
  "ry.SetRateActuatorControlTargetResponse\""
  "\000\022\224\001\n\033SetRateActuatorOutputStatus\0228.mavs"
  "dk.rpc.telemetry.SetRateActuatorOutputSt"
  "atusRequest\0329.mavsdk.rpc.telemetry.SetRa"
  "teActuatorOutputStatusResponse\"\000\022p\n\017SetR"
  "ateOdometry\022,.mavsdk.rpc.telemetry.SetRa"
  "teOdometryRequest\032-.mavsdk.rpc.telemetry"
  ".SetRateOdometryResponse\"\000\022\221\001\n\032SetRatePo"
  "sitionVelocityNed\0227.mavsdk.rpc.telemetry"
  ".SetRatePositionVelocityNedRequest\0328.mav"
  "sdk.rpc.telemetry.SetRatePositionVelocit"
  "yNedResponse\"\000\022y\n\022SetRateGroundTruth\022/.m"
  "avsdk.rpc.telemetry.SetRateGroundTruthRe"
  "quest\0320.mavsdk.rpc.telemetry.SetRateGrou"
  "ndTruthResponse\"\000\022\210\001\n\027SetRateFixedwingMe"
  "trics\0224.mavsdk.rpc.telemetry.SetRateFixe"
  "dwingMetricsRequest\0325.mavsdk.rpc.telemet"
  "ry.SetRateFixedwingMetricsResponse\"\000\022a\n\n"
  "SetRateImu\022\'.mavsdk.rpc.telemetry.SetRat"
  "eImuRequest\032(.mavsdk.rpc.telemetry.SetRa"
  "teImuResponse\"\000\022\177\n\024SetRateUnixEpochTime\022"
  "1.mavsdk.rpc.telemetry.SetRateUnixEpochT"
  "imeRequest\0322.mavsdk.rpc.telemetry.SetRat"
  "eUnixEpochTimeResponse\"\000B%\n\023io.mavsdk.te"
  "lemetryB\016TelemetryProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_telemetry_2ftelemetry_2eproto_deps[1] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_telemetry_2ftelemetry_2eproto_sccs[118] = {
  &scc_info_AccelerationFrd_telemetry_2ftelemetry_2eproto.base,
  &scc_info_ActuatorControlTarget_telemetry_2ftelemetry_2eproto.base,
  &scc_info_ActuatorControlTargetResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_ActuatorOutputStatus_telemetry_2ftelemetry_2eproto.base,
  &scc_info_ActuatorOutputStatusResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_AngularVelocityBody_telemetry_2ftelemetry_2eproto.base,
  &scc_info_AngularVelocityFrd_telemetry_2ftelemetry_2eproto.base,
  &scc_info_ArmedResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_AttitudeAngularVelocityBodyResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_AttitudeEulerResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_AttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_Battery_telemetry_2ftelemetry_2eproto.base,
  &scc_info_BatteryResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_CameraAttitudeEulerResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_CameraAttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_Covariance_telemetry_2ftelemetry_2eproto.base,
  &scc_info_EulerAngle_telemetry_2ftelemetry_2eproto.base,
  &scc_info_FixedwingMetrics_telemetry_2ftelemetry_2eproto.base,
  &scc_info_FixedwingMetricsResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_FlightModeResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_GpsInfo_telemetry_2ftelemetry_2eproto.base,
  &scc_info_GpsInfoResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_GroundSpeedNedResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_GroundTruth_telemetry_2ftelemetry_2eproto.base,
  &scc_info_GroundTruthResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_Health_telemetry_2ftelemetry_2eproto.base,
  &scc_info_HealthAllOkResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_HealthResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_HomeResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_Imu_telemetry_2ftelemetry_2eproto.base,
  &scc_info_ImuResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_InAirResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_LandedStateResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_MagneticFieldFrd_telemetry_2ftelemetry_2eproto.base,
  &scc_info_Odometry_telemetry_2ftelemetry_2eproto.base,
  &scc_info_OdometryResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_Position_telemetry_2ftelemetry_2eproto.base,
  &scc_info_PositionBody_telemetry_2ftelemetry_2eproto.base,
  &scc_info_PositionNed_telemetry_2ftelemetry_2eproto.base,
  &scc_info_PositionResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_PositionVelocityNed_telemetry_2ftelemetry_2eproto.base,
  &scc_info_PositionVelocityNedResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_Quaternion_telemetry_2ftelemetry_2eproto.base,
  &scc_info_RcStatus_telemetry_2ftelemetry_2eproto.base,
  &scc_info_RcStatusResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateActuatorControlTargetRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateActuatorControlTargetResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateActuatorOutputStatusRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateActuatorOutputStatusResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateAttitudeAngularVelocityBodyRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateAttitudeAngularVelocityBodyResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateAttitudeRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateAttitudeResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateBatteryRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateBatteryResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateCameraAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateCameraAttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateCameraAttitudeRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateCameraAttitudeResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateFixedwingMetricsRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateFixedwingMetricsResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateGpsInfoRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateGpsInfoResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateGroundSpeedNedRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateGroundSpeedNedResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateGroundTruthRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateGroundTruthResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateHomeRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateHomeResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateImuRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateImuResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateInAirRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateInAirResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateLandedStateRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateLandedStateResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateOdometryRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateOdometryResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRatePositionRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRatePositionResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRatePositionVelocityNedRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRatePositionVelocityNedResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateRcStatusRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateRcStatusResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateUnixEpochTimeRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SetRateUnixEpochTimeResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SpeedNed_telemetry_2ftelemetry_2eproto.base,
  &scc_info_StatusText_telemetry_2ftelemetry_2eproto.base,
  &scc_info_StatusTextResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeActuatorControlTargetRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeActuatorOutputStatusRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeArmedRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeAttitudeAngularVelocityBodyRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeAttitudeEulerRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeBatteryRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeCameraAttitudeEulerRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeCameraAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeFixedwingMetricsRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeFlightModeRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeGpsInfoRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeGroundSpeedNedRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeGroundTruthRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeHealthAllOkRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeHealthRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeHomeRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeImuRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeInAirRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeLandedStateRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeOdometryRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribePositionRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribePositionVelocityNedRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeRcStatusRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeStatusTextRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_SubscribeUnixEpochTimeRequest_telemetry_2ftelemetry_2eproto.base,
  &scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base,
  &scc_info_UnixEpochTimeResponse_telemetry_2ftelemetry_2eproto.base,
  &scc_info_VelocityBody_telemetry_2ftelemetry_2eproto.base,
  &scc_info_VelocityNed_telemetry_2ftelemetry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_telemetry_2ftelemetry_2eproto_once;
static bool descriptor_table_telemetry_2ftelemetry_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telemetry_2ftelemetry_2eproto = {
  &descriptor_table_telemetry_2ftelemetry_2eproto_initialized, descriptor_table_protodef_telemetry_2ftelemetry_2eproto, "telemetry/telemetry.proto", 15711,
  &descriptor_table_telemetry_2ftelemetry_2eproto_once, descriptor_table_telemetry_2ftelemetry_2eproto_sccs, descriptor_table_telemetry_2ftelemetry_2eproto_deps, 118, 1,
  schemas, file_default_instances, TableStruct_telemetry_2ftelemetry_2eproto::offsets,
  file_level_metadata_telemetry_2ftelemetry_2eproto, 118, file_level_enum_descriptors_telemetry_2ftelemetry_2eproto, file_level_service_descriptors_telemetry_2ftelemetry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_telemetry_2ftelemetry_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto), true);
namespace mavsdk {
namespace rpc {
namespace telemetry {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Odometry_MavFrame_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[0];
}
bool Odometry_MavFrame_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 16:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Odometry_MavFrame Odometry::MAV_FRAME_UNDEF;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_BODY_NED;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_VISION_NED;
constexpr Odometry_MavFrame Odometry::MAV_FRAME_ESTIM_NED;
constexpr Odometry_MavFrame Odometry::MavFrame_MIN;
constexpr Odometry_MavFrame Odometry::MavFrame_MAX;
constexpr int Odometry::MavFrame_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelemetryResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[1];
}
bool TelemetryResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TelemetryResult_Result TelemetryResult::RESULT_UNKNOWN;
constexpr TelemetryResult_Result TelemetryResult::RESULT_SUCCESS;
constexpr TelemetryResult_Result TelemetryResult::RESULT_NO_SYSTEM;
constexpr TelemetryResult_Result TelemetryResult::RESULT_CONNECTION_ERROR;
constexpr TelemetryResult_Result TelemetryResult::RESULT_BUSY;
constexpr TelemetryResult_Result TelemetryResult::RESULT_COMMAND_DENIED;
constexpr TelemetryResult_Result TelemetryResult::RESULT_TIMEOUT;
constexpr TelemetryResult_Result TelemetryResult::Result_MIN;
constexpr TelemetryResult_Result TelemetryResult::Result_MAX;
constexpr int TelemetryResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FixType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[2];
}
bool FixType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlightMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[3];
}
bool FlightMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusTextType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[4];
}
bool StatusTextType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LandedState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_telemetry_2ftelemetry_2eproto);
  return file_level_enum_descriptors_telemetry_2ftelemetry_2eproto[5];
}
bool LandedState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SubscribePositionRequest::InitAsDefaultInstance() {
}
class SubscribePositionRequest::_Internal {
 public:
};

SubscribePositionRequest::SubscribePositionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribePositionRequest)
}
SubscribePositionRequest::SubscribePositionRequest(const SubscribePositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribePositionRequest)
}

void SubscribePositionRequest::SharedCtor() {
}

SubscribePositionRequest::~SubscribePositionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribePositionRequest)
  SharedDtor();
}

void SubscribePositionRequest::SharedDtor() {
}

void SubscribePositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribePositionRequest& SubscribePositionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribePositionRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribePositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribePositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribePositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribePositionRequest)
  return target;
}

size_t SubscribePositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribePositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribePositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribePositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribePositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribePositionRequest)
    MergeFrom(*source);
  }
}

void SubscribePositionRequest::MergeFrom(const SubscribePositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribePositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribePositionRequest::CopyFrom(const SubscribePositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribePositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribePositionRequest::IsInitialized() const {
  return true;
}

void SubscribePositionRequest::InternalSwap(SubscribePositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribePositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_PositionResponse_default_instance_._instance.get_mutable()->position_ = const_cast< ::mavsdk::rpc::telemetry::Position*>(
      ::mavsdk::rpc::telemetry::Position::internal_default_instance());
}
class PositionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Position& position(const PositionResponse* msg);
};

const ::mavsdk::rpc::telemetry::Position&
PositionResponse::_Internal::position(const PositionResponse* msg) {
  return *msg->position_;
}
PositionResponse::PositionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.PositionResponse)
}
PositionResponse::PositionResponse(const PositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::mavsdk::rpc::telemetry::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionResponse)
}

void PositionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionResponse_telemetry_2ftelemetry_2eproto.base);
  position_ = nullptr;
}

PositionResponse::~PositionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionResponse)
  SharedDtor();
}

void PositionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void PositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionResponse& PositionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void PositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Position position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionResponse)
  return target;
}

size_t PositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.PositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.PositionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.PositionResponse)
    MergeFrom(*source);
  }
}

void PositionResponse::MergeFrom(const PositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::mavsdk::rpc::telemetry::Position::MergeFrom(from._internal_position());
  }
}

void PositionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.PositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionResponse::CopyFrom(const PositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionResponse::IsInitialized() const {
  return true;
}

void PositionResponse::InternalSwap(PositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeHomeRequest::InitAsDefaultInstance() {
}
class SubscribeHomeRequest::_Internal {
 public:
};

SubscribeHomeRequest::SubscribeHomeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeHomeRequest)
}
SubscribeHomeRequest::SubscribeHomeRequest(const SubscribeHomeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeHomeRequest)
}

void SubscribeHomeRequest::SharedCtor() {
}

SubscribeHomeRequest::~SubscribeHomeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  SharedDtor();
}

void SubscribeHomeRequest::SharedDtor() {
}

void SubscribeHomeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeHomeRequest& SubscribeHomeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeHomeRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeHomeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeHomeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeHomeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  return target;
}

size_t SubscribeHomeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeHomeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeHomeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeHomeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeHomeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeHomeRequest)
    MergeFrom(*source);
  }
}

void SubscribeHomeRequest::MergeFrom(const SubscribeHomeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeHomeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeHomeRequest::CopyFrom(const SubscribeHomeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeHomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeHomeRequest::IsInitialized() const {
  return true;
}

void SubscribeHomeRequest::InternalSwap(SubscribeHomeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeHomeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HomeResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_HomeResponse_default_instance_._instance.get_mutable()->home_ = const_cast< ::mavsdk::rpc::telemetry::Position*>(
      ::mavsdk::rpc::telemetry::Position::internal_default_instance());
}
class HomeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Position& home(const HomeResponse* msg);
};

const ::mavsdk::rpc::telemetry::Position&
HomeResponse::_Internal::home(const HomeResponse* msg) {
  return *msg->home_;
}
HomeResponse::HomeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.HomeResponse)
}
HomeResponse::HomeResponse(const HomeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_home()) {
    home_ = new ::mavsdk::rpc::telemetry::Position(*from.home_);
  } else {
    home_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.HomeResponse)
}

void HomeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HomeResponse_telemetry_2ftelemetry_2eproto.base);
  home_ = nullptr;
}

HomeResponse::~HomeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.HomeResponse)
  SharedDtor();
}

void HomeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete home_;
}

void HomeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HomeResponse& HomeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HomeResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void HomeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.HomeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && home_ != nullptr) {
    delete home_;
  }
  home_ = nullptr;
  _internal_metadata_.Clear();
}

const char* HomeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Position home = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_home(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HomeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.HomeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Position home = 1;
  if (this->has_home()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::home(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.HomeResponse)
  return target;
}

size_t HomeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.HomeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Position home = 1;
  if (this->has_home()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *home_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HomeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.HomeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HomeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HomeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.HomeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.HomeResponse)
    MergeFrom(*source);
  }
}

void HomeResponse::MergeFrom(const HomeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.HomeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_home()) {
    _internal_mutable_home()->::mavsdk::rpc::telemetry::Position::MergeFrom(from._internal_home());
  }
}

void HomeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.HomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeResponse::CopyFrom(const HomeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.HomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeResponse::IsInitialized() const {
  return true;
}

void HomeResponse::InternalSwap(HomeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(home_, other->home_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HomeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeInAirRequest::InitAsDefaultInstance() {
}
class SubscribeInAirRequest::_Internal {
 public:
};

SubscribeInAirRequest::SubscribeInAirRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeInAirRequest)
}
SubscribeInAirRequest::SubscribeInAirRequest(const SubscribeInAirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeInAirRequest)
}

void SubscribeInAirRequest::SharedCtor() {
}

SubscribeInAirRequest::~SubscribeInAirRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  SharedDtor();
}

void SubscribeInAirRequest::SharedDtor() {
}

void SubscribeInAirRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeInAirRequest& SubscribeInAirRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeInAirRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeInAirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeInAirRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeInAirRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  return target;
}

size_t SubscribeInAirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeInAirRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeInAirRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeInAirRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeInAirRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeInAirRequest)
    MergeFrom(*source);
  }
}

void SubscribeInAirRequest::MergeFrom(const SubscribeInAirRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeInAirRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeInAirRequest::CopyFrom(const SubscribeInAirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeInAirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeInAirRequest::IsInitialized() const {
  return true;
}

void SubscribeInAirRequest::InternalSwap(SubscribeInAirRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeInAirRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InAirResponse::InitAsDefaultInstance() {
}
class InAirResponse::_Internal {
 public:
};

InAirResponse::InAirResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.InAirResponse)
}
InAirResponse::InAirResponse(const InAirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_in_air_ = from.is_in_air_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.InAirResponse)
}

void InAirResponse::SharedCtor() {
  is_in_air_ = false;
}

InAirResponse::~InAirResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.InAirResponse)
  SharedDtor();
}

void InAirResponse::SharedDtor() {
}

void InAirResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InAirResponse& InAirResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InAirResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void InAirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.InAirResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_in_air_ = false;
  _internal_metadata_.Clear();
}

const char* InAirResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_in_air = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_in_air_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InAirResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.InAirResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_in_air = 1;
  if (this->is_in_air() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_in_air(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.InAirResponse)
  return target;
}

size_t InAirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.InAirResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_in_air = 1;
  if (this->is_in_air() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InAirResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.InAirResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InAirResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InAirResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.InAirResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.InAirResponse)
    MergeFrom(*source);
  }
}

void InAirResponse::MergeFrom(const InAirResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.InAirResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_in_air() != 0) {
    _internal_set_is_in_air(from._internal_is_in_air());
  }
}

void InAirResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.InAirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InAirResponse::CopyFrom(const InAirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.InAirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InAirResponse::IsInitialized() const {
  return true;
}

void InAirResponse::InternalSwap(InAirResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_in_air_, other->is_in_air_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InAirResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeLandedStateRequest::InitAsDefaultInstance() {
}
class SubscribeLandedStateRequest::_Internal {
 public:
};

SubscribeLandedStateRequest::SubscribeLandedStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
}
SubscribeLandedStateRequest::SubscribeLandedStateRequest(const SubscribeLandedStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
}

void SubscribeLandedStateRequest::SharedCtor() {
}

SubscribeLandedStateRequest::~SubscribeLandedStateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  SharedDtor();
}

void SubscribeLandedStateRequest::SharedDtor() {
}

void SubscribeLandedStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeLandedStateRequest& SubscribeLandedStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeLandedStateRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeLandedStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeLandedStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeLandedStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  return target;
}

size_t SubscribeLandedStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeLandedStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeLandedStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeLandedStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
    MergeFrom(*source);
  }
}

void SubscribeLandedStateRequest::MergeFrom(const SubscribeLandedStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeLandedStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeLandedStateRequest::CopyFrom(const SubscribeLandedStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeLandedStateRequest::IsInitialized() const {
  return true;
}

void SubscribeLandedStateRequest::InternalSwap(SubscribeLandedStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeLandedStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LandedStateResponse::InitAsDefaultInstance() {
}
class LandedStateResponse::_Internal {
 public:
};

LandedStateResponse::LandedStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.LandedStateResponse)
}
LandedStateResponse::LandedStateResponse(const LandedStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  landed_state_ = from.landed_state_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.LandedStateResponse)
}

void LandedStateResponse::SharedCtor() {
  landed_state_ = 0;
}

LandedStateResponse::~LandedStateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.LandedStateResponse)
  SharedDtor();
}

void LandedStateResponse::SharedDtor() {
}

void LandedStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandedStateResponse& LandedStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LandedStateResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void LandedStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.LandedStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landed_state_ = 0;
  _internal_metadata_.Clear();
}

const char* LandedStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.LandedState landed_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_landed_state(static_cast<::mavsdk::rpc::telemetry::LandedState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LandedStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.LandedStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.LandedState landed_state = 1;
  if (this->landed_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_landed_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.LandedStateResponse)
  return target;
}

size_t LandedStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.LandedStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.LandedState landed_state = 1;
  if (this->landed_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_landed_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandedStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.LandedStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LandedStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LandedStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.LandedStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.LandedStateResponse)
    MergeFrom(*source);
  }
}

void LandedStateResponse::MergeFrom(const LandedStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.LandedStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.landed_state() != 0) {
    _internal_set_landed_state(from._internal_landed_state());
  }
}

void LandedStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.LandedStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandedStateResponse::CopyFrom(const LandedStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.LandedStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandedStateResponse::IsInitialized() const {
  return true;
}

void LandedStateResponse::InternalSwap(LandedStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(landed_state_, other->landed_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LandedStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeArmedRequest::InitAsDefaultInstance() {
}
class SubscribeArmedRequest::_Internal {
 public:
};

SubscribeArmedRequest::SubscribeArmedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeArmedRequest)
}
SubscribeArmedRequest::SubscribeArmedRequest(const SubscribeArmedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeArmedRequest)
}

void SubscribeArmedRequest::SharedCtor() {
}

SubscribeArmedRequest::~SubscribeArmedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  SharedDtor();
}

void SubscribeArmedRequest::SharedDtor() {
}

void SubscribeArmedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeArmedRequest& SubscribeArmedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeArmedRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeArmedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeArmedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeArmedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  return target;
}

size_t SubscribeArmedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeArmedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeArmedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeArmedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeArmedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeArmedRequest)
    MergeFrom(*source);
  }
}

void SubscribeArmedRequest::MergeFrom(const SubscribeArmedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeArmedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeArmedRequest::CopyFrom(const SubscribeArmedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeArmedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeArmedRequest::IsInitialized() const {
  return true;
}

void SubscribeArmedRequest::InternalSwap(SubscribeArmedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeArmedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArmedResponse::InitAsDefaultInstance() {
}
class ArmedResponse::_Internal {
 public:
};

ArmedResponse::ArmedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.ArmedResponse)
}
ArmedResponse::ArmedResponse(const ArmedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_armed_ = from.is_armed_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ArmedResponse)
}

void ArmedResponse::SharedCtor() {
  is_armed_ = false;
}

ArmedResponse::~ArmedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ArmedResponse)
  SharedDtor();
}

void ArmedResponse::SharedDtor() {
}

void ArmedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArmedResponse& ArmedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArmedResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void ArmedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ArmedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_armed_ = false;
  _internal_metadata_.Clear();
}

const char* ArmedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_armed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_armed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArmedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ArmedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_armed = 1;
  if (this->is_armed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_armed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ArmedResponse)
  return target;
}

size_t ArmedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ArmedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_armed = 1;
  if (this->is_armed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArmedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ArmedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ArmedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArmedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ArmedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ArmedResponse)
    MergeFrom(*source);
  }
}

void ArmedResponse::MergeFrom(const ArmedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ArmedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_armed() != 0) {
    _internal_set_is_armed(from._internal_is_armed());
  }
}

void ArmedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ArmedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmedResponse::CopyFrom(const ArmedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ArmedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmedResponse::IsInitialized() const {
  return true;
}

void ArmedResponse::InternalSwap(ArmedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_armed_, other->is_armed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArmedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeAttitudeQuaternionRequest::InitAsDefaultInstance() {
}
class SubscribeAttitudeQuaternionRequest::_Internal {
 public:
};

SubscribeAttitudeQuaternionRequest::SubscribeAttitudeQuaternionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
}
SubscribeAttitudeQuaternionRequest::SubscribeAttitudeQuaternionRequest(const SubscribeAttitudeQuaternionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
}

void SubscribeAttitudeQuaternionRequest::SharedCtor() {
}

SubscribeAttitudeQuaternionRequest::~SubscribeAttitudeQuaternionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  SharedDtor();
}

void SubscribeAttitudeQuaternionRequest::SharedDtor() {
}

void SubscribeAttitudeQuaternionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeAttitudeQuaternionRequest& SubscribeAttitudeQuaternionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeAttitudeQuaternionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeAttitudeQuaternionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeAttitudeQuaternionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  return target;
}

size_t SubscribeAttitudeQuaternionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeAttitudeQuaternionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeAttitudeQuaternionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeAttitudeQuaternionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
    MergeFrom(*source);
  }
}

void SubscribeAttitudeQuaternionRequest::MergeFrom(const SubscribeAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeAttitudeQuaternionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeAttitudeQuaternionRequest::CopyFrom(const SubscribeAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeAttitudeQuaternionRequest::IsInitialized() const {
  return true;
}

void SubscribeAttitudeQuaternionRequest::InternalSwap(SubscribeAttitudeQuaternionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeAttitudeQuaternionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttitudeQuaternionResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_AttitudeQuaternionResponse_default_instance_._instance.get_mutable()->attitude_quaternion_ = const_cast< ::mavsdk::rpc::telemetry::Quaternion*>(
      ::mavsdk::rpc::telemetry::Quaternion::internal_default_instance());
}
class AttitudeQuaternionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Quaternion& attitude_quaternion(const AttitudeQuaternionResponse* msg);
};

const ::mavsdk::rpc::telemetry::Quaternion&
AttitudeQuaternionResponse::_Internal::attitude_quaternion(const AttitudeQuaternionResponse* msg) {
  return *msg->attitude_quaternion_;
}
AttitudeQuaternionResponse::AttitudeQuaternionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
}
AttitudeQuaternionResponse::AttitudeQuaternionResponse(const AttitudeQuaternionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_attitude_quaternion()) {
    attitude_quaternion_ = new ::mavsdk::rpc::telemetry::Quaternion(*from.attitude_quaternion_);
  } else {
    attitude_quaternion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
}

void AttitudeQuaternionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto.base);
  attitude_quaternion_ = nullptr;
}

AttitudeQuaternionResponse::~AttitudeQuaternionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  SharedDtor();
}

void AttitudeQuaternionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete attitude_quaternion_;
}

void AttitudeQuaternionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttitudeQuaternionResponse& AttitudeQuaternionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void AttitudeQuaternionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && attitude_quaternion_ != nullptr) {
    delete attitude_quaternion_;
  }
  attitude_quaternion_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AttitudeQuaternionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttitudeQuaternionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  if (this->has_attitude_quaternion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude_quaternion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  return target;
}

size_t AttitudeQuaternionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  if (this->has_attitude_quaternion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_quaternion_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttitudeQuaternionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AttitudeQuaternionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttitudeQuaternionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
    MergeFrom(*source);
  }
}

void AttitudeQuaternionResponse::MergeFrom(const AttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude_quaternion()) {
    _internal_mutable_attitude_quaternion()->::mavsdk::rpc::telemetry::Quaternion::MergeFrom(from._internal_attitude_quaternion());
  }
}

void AttitudeQuaternionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttitudeQuaternionResponse::CopyFrom(const AttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudeQuaternionResponse::IsInitialized() const {
  return true;
}

void AttitudeQuaternionResponse::InternalSwap(AttitudeQuaternionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attitude_quaternion_, other->attitude_quaternion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttitudeQuaternionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeAttitudeEulerRequest::InitAsDefaultInstance() {
}
class SubscribeAttitudeEulerRequest::_Internal {
 public:
};

SubscribeAttitudeEulerRequest::SubscribeAttitudeEulerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
}
SubscribeAttitudeEulerRequest::SubscribeAttitudeEulerRequest(const SubscribeAttitudeEulerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
}

void SubscribeAttitudeEulerRequest::SharedCtor() {
}

SubscribeAttitudeEulerRequest::~SubscribeAttitudeEulerRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  SharedDtor();
}

void SubscribeAttitudeEulerRequest::SharedDtor() {
}

void SubscribeAttitudeEulerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeAttitudeEulerRequest& SubscribeAttitudeEulerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeAttitudeEulerRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeAttitudeEulerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeAttitudeEulerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeAttitudeEulerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  return target;
}

size_t SubscribeAttitudeEulerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeAttitudeEulerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeAttitudeEulerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeAttitudeEulerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
    MergeFrom(*source);
  }
}

void SubscribeAttitudeEulerRequest::MergeFrom(const SubscribeAttitudeEulerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeAttitudeEulerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeAttitudeEulerRequest::CopyFrom(const SubscribeAttitudeEulerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeAttitudeEulerRequest::IsInitialized() const {
  return true;
}

void SubscribeAttitudeEulerRequest::InternalSwap(SubscribeAttitudeEulerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeAttitudeEulerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttitudeEulerResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_AttitudeEulerResponse_default_instance_._instance.get_mutable()->attitude_euler_ = const_cast< ::mavsdk::rpc::telemetry::EulerAngle*>(
      ::mavsdk::rpc::telemetry::EulerAngle::internal_default_instance());
}
class AttitudeEulerResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::EulerAngle& attitude_euler(const AttitudeEulerResponse* msg);
};

const ::mavsdk::rpc::telemetry::EulerAngle&
AttitudeEulerResponse::_Internal::attitude_euler(const AttitudeEulerResponse* msg) {
  return *msg->attitude_euler_;
}
AttitudeEulerResponse::AttitudeEulerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.AttitudeEulerResponse)
}
AttitudeEulerResponse::AttitudeEulerResponse(const AttitudeEulerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_attitude_euler()) {
    attitude_euler_ = new ::mavsdk::rpc::telemetry::EulerAngle(*from.attitude_euler_);
  } else {
    attitude_euler_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AttitudeEulerResponse)
}

void AttitudeEulerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttitudeEulerResponse_telemetry_2ftelemetry_2eproto.base);
  attitude_euler_ = nullptr;
}

AttitudeEulerResponse::~AttitudeEulerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  SharedDtor();
}

void AttitudeEulerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete attitude_euler_;
}

void AttitudeEulerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttitudeEulerResponse& AttitudeEulerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttitudeEulerResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void AttitudeEulerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && attitude_euler_ != nullptr) {
    delete attitude_euler_;
  }
  attitude_euler_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AttitudeEulerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_euler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttitudeEulerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  if (this->has_attitude_euler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude_euler(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  return target;
}

size_t AttitudeEulerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  if (this->has_attitude_euler()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_euler_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttitudeEulerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AttitudeEulerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttitudeEulerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.AttitudeEulerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.AttitudeEulerResponse)
    MergeFrom(*source);
  }
}

void AttitudeEulerResponse::MergeFrom(const AttitudeEulerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude_euler()) {
    _internal_mutable_attitude_euler()->::mavsdk::rpc::telemetry::EulerAngle::MergeFrom(from._internal_attitude_euler());
  }
}

void AttitudeEulerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttitudeEulerResponse::CopyFrom(const AttitudeEulerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AttitudeEulerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudeEulerResponse::IsInitialized() const {
  return true;
}

void AttitudeEulerResponse::InternalSwap(AttitudeEulerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attitude_euler_, other->attitude_euler_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttitudeEulerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeAttitudeAngularVelocityBodyRequest::InitAsDefaultInstance() {
}
class SubscribeAttitudeAngularVelocityBodyRequest::_Internal {
 public:
};

SubscribeAttitudeAngularVelocityBodyRequest::SubscribeAttitudeAngularVelocityBodyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
}
SubscribeAttitudeAngularVelocityBodyRequest::SubscribeAttitudeAngularVelocityBodyRequest(const SubscribeAttitudeAngularVelocityBodyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
}

void SubscribeAttitudeAngularVelocityBodyRequest::SharedCtor() {
}

SubscribeAttitudeAngularVelocityBodyRequest::~SubscribeAttitudeAngularVelocityBodyRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  SharedDtor();
}

void SubscribeAttitudeAngularVelocityBodyRequest::SharedDtor() {
}

void SubscribeAttitudeAngularVelocityBodyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeAttitudeAngularVelocityBodyRequest& SubscribeAttitudeAngularVelocityBodyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeAttitudeAngularVelocityBodyRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeAttitudeAngularVelocityBodyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeAttitudeAngularVelocityBodyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeAttitudeAngularVelocityBodyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  return target;
}

size_t SubscribeAttitudeAngularVelocityBodyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeAttitudeAngularVelocityBodyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeAttitudeAngularVelocityBodyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeAttitudeAngularVelocityBodyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
    MergeFrom(*source);
  }
}

void SubscribeAttitudeAngularVelocityBodyRequest::MergeFrom(const SubscribeAttitudeAngularVelocityBodyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeAttitudeAngularVelocityBodyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeAttitudeAngularVelocityBodyRequest::CopyFrom(const SubscribeAttitudeAngularVelocityBodyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeAttitudeAngularVelocityBodyRequest::IsInitialized() const {
  return true;
}

void SubscribeAttitudeAngularVelocityBodyRequest::InternalSwap(SubscribeAttitudeAngularVelocityBodyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeAttitudeAngularVelocityBodyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttitudeAngularVelocityBodyResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_AttitudeAngularVelocityBodyResponse_default_instance_._instance.get_mutable()->attitude_angular_velocity_body_ = const_cast< ::mavsdk::rpc::telemetry::AngularVelocityBody*>(
      ::mavsdk::rpc::telemetry::AngularVelocityBody::internal_default_instance());
}
class AttitudeAngularVelocityBodyResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::AngularVelocityBody& attitude_angular_velocity_body(const AttitudeAngularVelocityBodyResponse* msg);
};

const ::mavsdk::rpc::telemetry::AngularVelocityBody&
AttitudeAngularVelocityBodyResponse::_Internal::attitude_angular_velocity_body(const AttitudeAngularVelocityBodyResponse* msg) {
  return *msg->attitude_angular_velocity_body_;
}
AttitudeAngularVelocityBodyResponse::AttitudeAngularVelocityBodyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
}
AttitudeAngularVelocityBodyResponse::AttitudeAngularVelocityBodyResponse(const AttitudeAngularVelocityBodyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_attitude_angular_velocity_body()) {
    attitude_angular_velocity_body_ = new ::mavsdk::rpc::telemetry::AngularVelocityBody(*from.attitude_angular_velocity_body_);
  } else {
    attitude_angular_velocity_body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
}

void AttitudeAngularVelocityBodyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AttitudeAngularVelocityBodyResponse_telemetry_2ftelemetry_2eproto.base);
  attitude_angular_velocity_body_ = nullptr;
}

AttitudeAngularVelocityBodyResponse::~AttitudeAngularVelocityBodyResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  SharedDtor();
}

void AttitudeAngularVelocityBodyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete attitude_angular_velocity_body_;
}

void AttitudeAngularVelocityBodyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttitudeAngularVelocityBodyResponse& AttitudeAngularVelocityBodyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttitudeAngularVelocityBodyResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void AttitudeAngularVelocityBodyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && attitude_angular_velocity_body_ != nullptr) {
    delete attitude_angular_velocity_body_;
  }
  attitude_angular_velocity_body_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AttitudeAngularVelocityBodyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_angular_velocity_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttitudeAngularVelocityBodyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
  if (this->has_attitude_angular_velocity_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude_angular_velocity_body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  return target;
}

size_t AttitudeAngularVelocityBodyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
  if (this->has_attitude_angular_velocity_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_angular_velocity_body_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttitudeAngularVelocityBodyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AttitudeAngularVelocityBodyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttitudeAngularVelocityBodyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
    MergeFrom(*source);
  }
}

void AttitudeAngularVelocityBodyResponse::MergeFrom(const AttitudeAngularVelocityBodyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude_angular_velocity_body()) {
    _internal_mutable_attitude_angular_velocity_body()->::mavsdk::rpc::telemetry::AngularVelocityBody::MergeFrom(from._internal_attitude_angular_velocity_body());
  }
}

void AttitudeAngularVelocityBodyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttitudeAngularVelocityBodyResponse::CopyFrom(const AttitudeAngularVelocityBodyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttitudeAngularVelocityBodyResponse::IsInitialized() const {
  return true;
}

void AttitudeAngularVelocityBodyResponse::InternalSwap(AttitudeAngularVelocityBodyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attitude_angular_velocity_body_, other->attitude_angular_velocity_body_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttitudeAngularVelocityBodyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeCameraAttitudeQuaternionRequest::InitAsDefaultInstance() {
}
class SubscribeCameraAttitudeQuaternionRequest::_Internal {
 public:
};

SubscribeCameraAttitudeQuaternionRequest::SubscribeCameraAttitudeQuaternionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
}
SubscribeCameraAttitudeQuaternionRequest::SubscribeCameraAttitudeQuaternionRequest(const SubscribeCameraAttitudeQuaternionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
}

void SubscribeCameraAttitudeQuaternionRequest::SharedCtor() {
}

SubscribeCameraAttitudeQuaternionRequest::~SubscribeCameraAttitudeQuaternionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  SharedDtor();
}

void SubscribeCameraAttitudeQuaternionRequest::SharedDtor() {
}

void SubscribeCameraAttitudeQuaternionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeCameraAttitudeQuaternionRequest& SubscribeCameraAttitudeQuaternionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeCameraAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeCameraAttitudeQuaternionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeCameraAttitudeQuaternionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeCameraAttitudeQuaternionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  return target;
}

size_t SubscribeCameraAttitudeQuaternionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeCameraAttitudeQuaternionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeCameraAttitudeQuaternionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeCameraAttitudeQuaternionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
    MergeFrom(*source);
  }
}

void SubscribeCameraAttitudeQuaternionRequest::MergeFrom(const SubscribeCameraAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeCameraAttitudeQuaternionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCameraAttitudeQuaternionRequest::CopyFrom(const SubscribeCameraAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCameraAttitudeQuaternionRequest::IsInitialized() const {
  return true;
}

void SubscribeCameraAttitudeQuaternionRequest::InternalSwap(SubscribeCameraAttitudeQuaternionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeCameraAttitudeQuaternionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraAttitudeQuaternionResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_CameraAttitudeQuaternionResponse_default_instance_._instance.get_mutable()->attitude_quaternion_ = const_cast< ::mavsdk::rpc::telemetry::Quaternion*>(
      ::mavsdk::rpc::telemetry::Quaternion::internal_default_instance());
}
class CameraAttitudeQuaternionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Quaternion& attitude_quaternion(const CameraAttitudeQuaternionResponse* msg);
};

const ::mavsdk::rpc::telemetry::Quaternion&
CameraAttitudeQuaternionResponse::_Internal::attitude_quaternion(const CameraAttitudeQuaternionResponse* msg) {
  return *msg->attitude_quaternion_;
}
CameraAttitudeQuaternionResponse::CameraAttitudeQuaternionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
}
CameraAttitudeQuaternionResponse::CameraAttitudeQuaternionResponse(const CameraAttitudeQuaternionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_attitude_quaternion()) {
    attitude_quaternion_ = new ::mavsdk::rpc::telemetry::Quaternion(*from.attitude_quaternion_);
  } else {
    attitude_quaternion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
}

void CameraAttitudeQuaternionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraAttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto.base);
  attitude_quaternion_ = nullptr;
}

CameraAttitudeQuaternionResponse::~CameraAttitudeQuaternionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  SharedDtor();
}

void CameraAttitudeQuaternionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete attitude_quaternion_;
}

void CameraAttitudeQuaternionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraAttitudeQuaternionResponse& CameraAttitudeQuaternionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraAttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void CameraAttitudeQuaternionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && attitude_quaternion_ != nullptr) {
    delete attitude_quaternion_;
  }
  attitude_quaternion_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CameraAttitudeQuaternionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraAttitudeQuaternionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  if (this->has_attitude_quaternion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude_quaternion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  return target;
}

size_t CameraAttitudeQuaternionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  if (this->has_attitude_quaternion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_quaternion_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraAttitudeQuaternionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraAttitudeQuaternionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraAttitudeQuaternionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
    MergeFrom(*source);
  }
}

void CameraAttitudeQuaternionResponse::MergeFrom(const CameraAttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude_quaternion()) {
    _internal_mutable_attitude_quaternion()->::mavsdk::rpc::telemetry::Quaternion::MergeFrom(from._internal_attitude_quaternion());
  }
}

void CameraAttitudeQuaternionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraAttitudeQuaternionResponse::CopyFrom(const CameraAttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraAttitudeQuaternionResponse::IsInitialized() const {
  return true;
}

void CameraAttitudeQuaternionResponse::InternalSwap(CameraAttitudeQuaternionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attitude_quaternion_, other->attitude_quaternion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraAttitudeQuaternionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeCameraAttitudeEulerRequest::InitAsDefaultInstance() {
}
class SubscribeCameraAttitudeEulerRequest::_Internal {
 public:
};

SubscribeCameraAttitudeEulerRequest::SubscribeCameraAttitudeEulerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
}
SubscribeCameraAttitudeEulerRequest::SubscribeCameraAttitudeEulerRequest(const SubscribeCameraAttitudeEulerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
}

void SubscribeCameraAttitudeEulerRequest::SharedCtor() {
}

SubscribeCameraAttitudeEulerRequest::~SubscribeCameraAttitudeEulerRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  SharedDtor();
}

void SubscribeCameraAttitudeEulerRequest::SharedDtor() {
}

void SubscribeCameraAttitudeEulerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeCameraAttitudeEulerRequest& SubscribeCameraAttitudeEulerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeCameraAttitudeEulerRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeCameraAttitudeEulerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeCameraAttitudeEulerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeCameraAttitudeEulerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  return target;
}

size_t SubscribeCameraAttitudeEulerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeCameraAttitudeEulerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeCameraAttitudeEulerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeCameraAttitudeEulerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
    MergeFrom(*source);
  }
}

void SubscribeCameraAttitudeEulerRequest::MergeFrom(const SubscribeCameraAttitudeEulerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeCameraAttitudeEulerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCameraAttitudeEulerRequest::CopyFrom(const SubscribeCameraAttitudeEulerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCameraAttitudeEulerRequest::IsInitialized() const {
  return true;
}

void SubscribeCameraAttitudeEulerRequest::InternalSwap(SubscribeCameraAttitudeEulerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeCameraAttitudeEulerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraAttitudeEulerResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_CameraAttitudeEulerResponse_default_instance_._instance.get_mutable()->attitude_euler_ = const_cast< ::mavsdk::rpc::telemetry::EulerAngle*>(
      ::mavsdk::rpc::telemetry::EulerAngle::internal_default_instance());
}
class CameraAttitudeEulerResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::EulerAngle& attitude_euler(const CameraAttitudeEulerResponse* msg);
};

const ::mavsdk::rpc::telemetry::EulerAngle&
CameraAttitudeEulerResponse::_Internal::attitude_euler(const CameraAttitudeEulerResponse* msg) {
  return *msg->attitude_euler_;
}
CameraAttitudeEulerResponse::CameraAttitudeEulerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
}
CameraAttitudeEulerResponse::CameraAttitudeEulerResponse(const CameraAttitudeEulerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_attitude_euler()) {
    attitude_euler_ = new ::mavsdk::rpc::telemetry::EulerAngle(*from.attitude_euler_);
  } else {
    attitude_euler_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
}

void CameraAttitudeEulerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraAttitudeEulerResponse_telemetry_2ftelemetry_2eproto.base);
  attitude_euler_ = nullptr;
}

CameraAttitudeEulerResponse::~CameraAttitudeEulerResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  SharedDtor();
}

void CameraAttitudeEulerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete attitude_euler_;
}

void CameraAttitudeEulerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraAttitudeEulerResponse& CameraAttitudeEulerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraAttitudeEulerResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void CameraAttitudeEulerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && attitude_euler_ != nullptr) {
    delete attitude_euler_;
  }
  attitude_euler_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CameraAttitudeEulerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attitude_euler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraAttitudeEulerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  if (this->has_attitude_euler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::attitude_euler(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  return target;
}

size_t CameraAttitudeEulerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  if (this->has_attitude_euler()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attitude_euler_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraAttitudeEulerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraAttitudeEulerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraAttitudeEulerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
    MergeFrom(*source);
  }
}

void CameraAttitudeEulerResponse::MergeFrom(const CameraAttitudeEulerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_attitude_euler()) {
    _internal_mutable_attitude_euler()->::mavsdk::rpc::telemetry::EulerAngle::MergeFrom(from._internal_attitude_euler());
  }
}

void CameraAttitudeEulerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraAttitudeEulerResponse::CopyFrom(const CameraAttitudeEulerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraAttitudeEulerResponse::IsInitialized() const {
  return true;
}

void CameraAttitudeEulerResponse::InternalSwap(CameraAttitudeEulerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(attitude_euler_, other->attitude_euler_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraAttitudeEulerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeGroundSpeedNedRequest::InitAsDefaultInstance() {
}
class SubscribeGroundSpeedNedRequest::_Internal {
 public:
};

SubscribeGroundSpeedNedRequest::SubscribeGroundSpeedNedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
}
SubscribeGroundSpeedNedRequest::SubscribeGroundSpeedNedRequest(const SubscribeGroundSpeedNedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
}

void SubscribeGroundSpeedNedRequest::SharedCtor() {
}

SubscribeGroundSpeedNedRequest::~SubscribeGroundSpeedNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
  SharedDtor();
}

void SubscribeGroundSpeedNedRequest::SharedDtor() {
}

void SubscribeGroundSpeedNedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeGroundSpeedNedRequest& SubscribeGroundSpeedNedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeGroundSpeedNedRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeGroundSpeedNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeGroundSpeedNedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeGroundSpeedNedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
  return target;
}

size_t SubscribeGroundSpeedNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeGroundSpeedNedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeGroundSpeedNedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeGroundSpeedNedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
    MergeFrom(*source);
  }
}

void SubscribeGroundSpeedNedRequest::MergeFrom(const SubscribeGroundSpeedNedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeGroundSpeedNedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeGroundSpeedNedRequest::CopyFrom(const SubscribeGroundSpeedNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeGroundSpeedNedRequest::IsInitialized() const {
  return true;
}

void SubscribeGroundSpeedNedRequest::InternalSwap(SubscribeGroundSpeedNedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeGroundSpeedNedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroundSpeedNedResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_GroundSpeedNedResponse_default_instance_._instance.get_mutable()->ground_speed_ned_ = const_cast< ::mavsdk::rpc::telemetry::SpeedNed*>(
      ::mavsdk::rpc::telemetry::SpeedNed::internal_default_instance());
}
class GroundSpeedNedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::SpeedNed& ground_speed_ned(const GroundSpeedNedResponse* msg);
};

const ::mavsdk::rpc::telemetry::SpeedNed&
GroundSpeedNedResponse::_Internal::ground_speed_ned(const GroundSpeedNedResponse* msg) {
  return *msg->ground_speed_ned_;
}
GroundSpeedNedResponse::GroundSpeedNedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
}
GroundSpeedNedResponse::GroundSpeedNedResponse(const GroundSpeedNedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ground_speed_ned()) {
    ground_speed_ned_ = new ::mavsdk::rpc::telemetry::SpeedNed(*from.ground_speed_ned_);
  } else {
    ground_speed_ned_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
}

void GroundSpeedNedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroundSpeedNedResponse_telemetry_2ftelemetry_2eproto.base);
  ground_speed_ned_ = nullptr;
}

GroundSpeedNedResponse::~GroundSpeedNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
  SharedDtor();
}

void GroundSpeedNedResponse::SharedDtor() {
  if (this != internal_default_instance()) delete ground_speed_ned_;
}

void GroundSpeedNedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroundSpeedNedResponse& GroundSpeedNedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroundSpeedNedResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void GroundSpeedNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ground_speed_ned_ != nullptr) {
    delete ground_speed_ned_;
  }
  ground_speed_ned_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GroundSpeedNedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.SpeedNed ground_speed_ned = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_speed_ned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroundSpeedNedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.SpeedNed ground_speed_ned = 1;
  if (this->has_ground_speed_ned()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ground_speed_ned(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
  return target;
}

size_t GroundSpeedNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.SpeedNed ground_speed_ned = 1;
  if (this->has_ground_speed_ned()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ground_speed_ned_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroundSpeedNedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundSpeedNedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroundSpeedNedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
    MergeFrom(*source);
  }
}

void GroundSpeedNedResponse::MergeFrom(const GroundSpeedNedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ground_speed_ned()) {
    _internal_mutable_ground_speed_ned()->::mavsdk::rpc::telemetry::SpeedNed::MergeFrom(from._internal_ground_speed_ned());
  }
}

void GroundSpeedNedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundSpeedNedResponse::CopyFrom(const GroundSpeedNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundSpeedNedResponse::IsInitialized() const {
  return true;
}

void GroundSpeedNedResponse::InternalSwap(GroundSpeedNedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ground_speed_ned_, other->ground_speed_ned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundSpeedNedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeGpsInfoRequest::InitAsDefaultInstance() {
}
class SubscribeGpsInfoRequest::_Internal {
 public:
};

SubscribeGpsInfoRequest::SubscribeGpsInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
}
SubscribeGpsInfoRequest::SubscribeGpsInfoRequest(const SubscribeGpsInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
}

void SubscribeGpsInfoRequest::SharedCtor() {
}

SubscribeGpsInfoRequest::~SubscribeGpsInfoRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  SharedDtor();
}

void SubscribeGpsInfoRequest::SharedDtor() {
}

void SubscribeGpsInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeGpsInfoRequest& SubscribeGpsInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeGpsInfoRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeGpsInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeGpsInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeGpsInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  return target;
}

size_t SubscribeGpsInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeGpsInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeGpsInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeGpsInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
    MergeFrom(*source);
  }
}

void SubscribeGpsInfoRequest::MergeFrom(const SubscribeGpsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeGpsInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeGpsInfoRequest::CopyFrom(const SubscribeGpsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeGpsInfoRequest::IsInitialized() const {
  return true;
}

void SubscribeGpsInfoRequest::InternalSwap(SubscribeGpsInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeGpsInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GpsInfoResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_GpsInfoResponse_default_instance_._instance.get_mutable()->gps_info_ = const_cast< ::mavsdk::rpc::telemetry::GpsInfo*>(
      ::mavsdk::rpc::telemetry::GpsInfo::internal_default_instance());
}
class GpsInfoResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::GpsInfo& gps_info(const GpsInfoResponse* msg);
};

const ::mavsdk::rpc::telemetry::GpsInfo&
GpsInfoResponse::_Internal::gps_info(const GpsInfoResponse* msg) {
  return *msg->gps_info_;
}
GpsInfoResponse::GpsInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.GpsInfoResponse)
}
GpsInfoResponse::GpsInfoResponse(const GpsInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_gps_info()) {
    gps_info_ = new ::mavsdk::rpc::telemetry::GpsInfo(*from.gps_info_);
  } else {
    gps_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GpsInfoResponse)
}

void GpsInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GpsInfoResponse_telemetry_2ftelemetry_2eproto.base);
  gps_info_ = nullptr;
}

GpsInfoResponse::~GpsInfoResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GpsInfoResponse)
  SharedDtor();
}

void GpsInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete gps_info_;
}

void GpsInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpsInfoResponse& GpsInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpsInfoResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void GpsInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && gps_info_ != nullptr) {
    delete gps_info_;
  }
  gps_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GpsInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpsInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
  if (this->has_gps_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gps_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GpsInfoResponse)
  return target;
}

size_t GpsInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
  if (this->has_gps_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpsInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GpsInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpsInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.GpsInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.GpsInfoResponse)
    MergeFrom(*source);
  }
}

void GpsInfoResponse::MergeFrom(const GpsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gps_info()) {
    _internal_mutable_gps_info()->::mavsdk::rpc::telemetry::GpsInfo::MergeFrom(from._internal_gps_info());
  }
}

void GpsInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsInfoResponse::CopyFrom(const GpsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GpsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsInfoResponse::IsInitialized() const {
  return true;
}

void GpsInfoResponse::InternalSwap(GpsInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(gps_info_, other->gps_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpsInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeBatteryRequest::InitAsDefaultInstance() {
}
class SubscribeBatteryRequest::_Internal {
 public:
};

SubscribeBatteryRequest::SubscribeBatteryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
}
SubscribeBatteryRequest::SubscribeBatteryRequest(const SubscribeBatteryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
}

void SubscribeBatteryRequest::SharedCtor() {
}

SubscribeBatteryRequest::~SubscribeBatteryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  SharedDtor();
}

void SubscribeBatteryRequest::SharedDtor() {
}

void SubscribeBatteryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeBatteryRequest& SubscribeBatteryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeBatteryRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeBatteryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeBatteryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeBatteryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  return target;
}

size_t SubscribeBatteryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeBatteryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeBatteryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeBatteryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
    MergeFrom(*source);
  }
}

void SubscribeBatteryRequest::MergeFrom(const SubscribeBatteryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeBatteryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeBatteryRequest::CopyFrom(const SubscribeBatteryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeBatteryRequest::IsInitialized() const {
  return true;
}

void SubscribeBatteryRequest::InternalSwap(SubscribeBatteryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeBatteryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatteryResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_BatteryResponse_default_instance_._instance.get_mutable()->battery_ = const_cast< ::mavsdk::rpc::telemetry::Battery*>(
      ::mavsdk::rpc::telemetry::Battery::internal_default_instance());
}
class BatteryResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Battery& battery(const BatteryResponse* msg);
};

const ::mavsdk::rpc::telemetry::Battery&
BatteryResponse::_Internal::battery(const BatteryResponse* msg) {
  return *msg->battery_;
}
BatteryResponse::BatteryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.BatteryResponse)
}
BatteryResponse::BatteryResponse(const BatteryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_battery()) {
    battery_ = new ::mavsdk::rpc::telemetry::Battery(*from.battery_);
  } else {
    battery_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.BatteryResponse)
}

void BatteryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatteryResponse_telemetry_2ftelemetry_2eproto.base);
  battery_ = nullptr;
}

BatteryResponse::~BatteryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.BatteryResponse)
  SharedDtor();
}

void BatteryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete battery_;
}

void BatteryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatteryResponse& BatteryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatteryResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void BatteryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.BatteryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && battery_ != nullptr) {
    delete battery_;
  }
  battery_ = nullptr;
  _internal_metadata_.Clear();
}

const char* BatteryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Battery battery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.BatteryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Battery battery = 1;
  if (this->has_battery()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::battery(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.BatteryResponse)
  return target;
}

size_t BatteryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.BatteryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Battery battery = 1;
  if (this->has_battery()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *battery_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.BatteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatteryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.BatteryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.BatteryResponse)
    MergeFrom(*source);
  }
}

void BatteryResponse::MergeFrom(const BatteryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.BatteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_battery()) {
    _internal_mutable_battery()->::mavsdk::rpc::telemetry::Battery::MergeFrom(from._internal_battery());
  }
}

void BatteryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.BatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryResponse::CopyFrom(const BatteryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.BatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryResponse::IsInitialized() const {
  return true;
}

void BatteryResponse::InternalSwap(BatteryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(battery_, other->battery_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeFlightModeRequest::InitAsDefaultInstance() {
}
class SubscribeFlightModeRequest::_Internal {
 public:
};

SubscribeFlightModeRequest::SubscribeFlightModeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
}
SubscribeFlightModeRequest::SubscribeFlightModeRequest(const SubscribeFlightModeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
}

void SubscribeFlightModeRequest::SharedCtor() {
}

SubscribeFlightModeRequest::~SubscribeFlightModeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  SharedDtor();
}

void SubscribeFlightModeRequest::SharedDtor() {
}

void SubscribeFlightModeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeFlightModeRequest& SubscribeFlightModeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeFlightModeRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeFlightModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeFlightModeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeFlightModeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  return target;
}

size_t SubscribeFlightModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeFlightModeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeFlightModeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeFlightModeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
    MergeFrom(*source);
  }
}

void SubscribeFlightModeRequest::MergeFrom(const SubscribeFlightModeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeFlightModeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeFlightModeRequest::CopyFrom(const SubscribeFlightModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeFlightModeRequest::IsInitialized() const {
  return true;
}

void SubscribeFlightModeRequest::InternalSwap(SubscribeFlightModeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeFlightModeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlightModeResponse::InitAsDefaultInstance() {
}
class FlightModeResponse::_Internal {
 public:
};

FlightModeResponse::FlightModeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.FlightModeResponse)
}
FlightModeResponse::FlightModeResponse(const FlightModeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flight_mode_ = from.flight_mode_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.FlightModeResponse)
}

void FlightModeResponse::SharedCtor() {
  flight_mode_ = 0;
}

FlightModeResponse::~FlightModeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.FlightModeResponse)
  SharedDtor();
}

void FlightModeResponse::SharedDtor() {
}

void FlightModeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlightModeResponse& FlightModeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlightModeResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void FlightModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.FlightModeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flight_mode_ = 0;
  _internal_metadata_.Clear();
}

const char* FlightModeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_flight_mode(static_cast<::mavsdk::rpc::telemetry::FlightMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlightModeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.FlightModeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
  if (this->flight_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_flight_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.FlightModeResponse)
  return target;
}

size_t FlightModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.FlightModeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
  if (this->flight_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flight_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlightModeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.FlightModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FlightModeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlightModeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.FlightModeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.FlightModeResponse)
    MergeFrom(*source);
  }
}

void FlightModeResponse::MergeFrom(const FlightModeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.FlightModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flight_mode() != 0) {
    _internal_set_flight_mode(from._internal_flight_mode());
  }
}

void FlightModeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.FlightModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlightModeResponse::CopyFrom(const FlightModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.FlightModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightModeResponse::IsInitialized() const {
  return true;
}

void FlightModeResponse::InternalSwap(FlightModeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(flight_mode_, other->flight_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightModeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeHealthRequest::InitAsDefaultInstance() {
}
class SubscribeHealthRequest::_Internal {
 public:
};

SubscribeHealthRequest::SubscribeHealthRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeHealthRequest)
}
SubscribeHealthRequest::SubscribeHealthRequest(const SubscribeHealthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeHealthRequest)
}

void SubscribeHealthRequest::SharedCtor() {
}

SubscribeHealthRequest::~SubscribeHealthRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  SharedDtor();
}

void SubscribeHealthRequest::SharedDtor() {
}

void SubscribeHealthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeHealthRequest& SubscribeHealthRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeHealthRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeHealthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeHealthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeHealthRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  return target;
}

size_t SubscribeHealthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeHealthRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeHealthRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeHealthRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeHealthRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeHealthRequest)
    MergeFrom(*source);
  }
}

void SubscribeHealthRequest::MergeFrom(const SubscribeHealthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeHealthRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeHealthRequest::CopyFrom(const SubscribeHealthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeHealthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeHealthRequest::IsInitialized() const {
  return true;
}

void SubscribeHealthRequest::InternalSwap(SubscribeHealthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeHealthRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HealthResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_HealthResponse_default_instance_._instance.get_mutable()->health_ = const_cast< ::mavsdk::rpc::telemetry::Health*>(
      ::mavsdk::rpc::telemetry::Health::internal_default_instance());
}
class HealthResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Health& health(const HealthResponse* msg);
};

const ::mavsdk::rpc::telemetry::Health&
HealthResponse::_Internal::health(const HealthResponse* msg) {
  return *msg->health_;
}
HealthResponse::HealthResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.HealthResponse)
}
HealthResponse::HealthResponse(const HealthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_health()) {
    health_ = new ::mavsdk::rpc::telemetry::Health(*from.health_);
  } else {
    health_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.HealthResponse)
}

void HealthResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HealthResponse_telemetry_2ftelemetry_2eproto.base);
  health_ = nullptr;
}

HealthResponse::~HealthResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.HealthResponse)
  SharedDtor();
}

void HealthResponse::SharedDtor() {
  if (this != internal_default_instance()) delete health_;
}

void HealthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthResponse& HealthResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void HealthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.HealthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && health_ != nullptr) {
    delete health_;
  }
  health_ = nullptr;
  _internal_metadata_.Clear();
}

const char* HealthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Health health = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_health(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.HealthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Health health = 1;
  if (this->has_health()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::health(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.HealthResponse)
  return target;
}

size_t HealthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.HealthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Health health = 1;
  if (this->has_health()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *health_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.HealthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.HealthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.HealthResponse)
    MergeFrom(*source);
  }
}

void HealthResponse::MergeFrom(const HealthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.HealthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_health()) {
    _internal_mutable_health()->::mavsdk::rpc::telemetry::Health::MergeFrom(from._internal_health());
  }
}

void HealthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.HealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthResponse::CopyFrom(const HealthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.HealthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthResponse::IsInitialized() const {
  return true;
}

void HealthResponse::InternalSwap(HealthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(health_, other->health_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeRcStatusRequest::InitAsDefaultInstance() {
}
class SubscribeRcStatusRequest::_Internal {
 public:
};

SubscribeRcStatusRequest::SubscribeRcStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
}
SubscribeRcStatusRequest::SubscribeRcStatusRequest(const SubscribeRcStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
}

void SubscribeRcStatusRequest::SharedCtor() {
}

SubscribeRcStatusRequest::~SubscribeRcStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  SharedDtor();
}

void SubscribeRcStatusRequest::SharedDtor() {
}

void SubscribeRcStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeRcStatusRequest& SubscribeRcStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeRcStatusRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeRcStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeRcStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeRcStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  return target;
}

size_t SubscribeRcStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeRcStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeRcStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeRcStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
    MergeFrom(*source);
  }
}

void SubscribeRcStatusRequest::MergeFrom(const SubscribeRcStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeRcStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeRcStatusRequest::CopyFrom(const SubscribeRcStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRcStatusRequest::IsInitialized() const {
  return true;
}

void SubscribeRcStatusRequest::InternalSwap(SubscribeRcStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRcStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RcStatusResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_RcStatusResponse_default_instance_._instance.get_mutable()->rc_status_ = const_cast< ::mavsdk::rpc::telemetry::RcStatus*>(
      ::mavsdk::rpc::telemetry::RcStatus::internal_default_instance());
}
class RcStatusResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::RcStatus& rc_status(const RcStatusResponse* msg);
};

const ::mavsdk::rpc::telemetry::RcStatus&
RcStatusResponse::_Internal::rc_status(const RcStatusResponse* msg) {
  return *msg->rc_status_;
}
RcStatusResponse::RcStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.RcStatusResponse)
}
RcStatusResponse::RcStatusResponse(const RcStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_rc_status()) {
    rc_status_ = new ::mavsdk::rpc::telemetry::RcStatus(*from.rc_status_);
  } else {
    rc_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.RcStatusResponse)
}

void RcStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RcStatusResponse_telemetry_2ftelemetry_2eproto.base);
  rc_status_ = nullptr;
}

RcStatusResponse::~RcStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.RcStatusResponse)
  SharedDtor();
}

void RcStatusResponse::SharedDtor() {
  if (this != internal_default_instance()) delete rc_status_;
}

void RcStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RcStatusResponse& RcStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RcStatusResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void RcStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.RcStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && rc_status_ != nullptr) {
    delete rc_status_;
  }
  rc_status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RcStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rc_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RcStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.RcStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
  if (this->has_rc_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::rc_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.RcStatusResponse)
  return target;
}

size_t RcStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.RcStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
  if (this->has_rc_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rc_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RcStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.RcStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RcStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RcStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.RcStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.RcStatusResponse)
    MergeFrom(*source);
  }
}

void RcStatusResponse::MergeFrom(const RcStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.RcStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_rc_status()) {
    _internal_mutable_rc_status()->::mavsdk::rpc::telemetry::RcStatus::MergeFrom(from._internal_rc_status());
  }
}

void RcStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.RcStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RcStatusResponse::CopyFrom(const RcStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.RcStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcStatusResponse::IsInitialized() const {
  return true;
}

void RcStatusResponse::InternalSwap(RcStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rc_status_, other->rc_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RcStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeStatusTextRequest::InitAsDefaultInstance() {
}
class SubscribeStatusTextRequest::_Internal {
 public:
};

SubscribeStatusTextRequest::SubscribeStatusTextRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
}
SubscribeStatusTextRequest::SubscribeStatusTextRequest(const SubscribeStatusTextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
}

void SubscribeStatusTextRequest::SharedCtor() {
}

SubscribeStatusTextRequest::~SubscribeStatusTextRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  SharedDtor();
}

void SubscribeStatusTextRequest::SharedDtor() {
}

void SubscribeStatusTextRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeStatusTextRequest& SubscribeStatusTextRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeStatusTextRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeStatusTextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeStatusTextRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeStatusTextRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  return target;
}

size_t SubscribeStatusTextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeStatusTextRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeStatusTextRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeStatusTextRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
    MergeFrom(*source);
  }
}

void SubscribeStatusTextRequest::MergeFrom(const SubscribeStatusTextRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeStatusTextRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeStatusTextRequest::CopyFrom(const SubscribeStatusTextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeStatusTextRequest::IsInitialized() const {
  return true;
}

void SubscribeStatusTextRequest::InternalSwap(SubscribeStatusTextRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeStatusTextRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusTextResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_StatusTextResponse_default_instance_._instance.get_mutable()->status_text_ = const_cast< ::mavsdk::rpc::telemetry::StatusText*>(
      ::mavsdk::rpc::telemetry::StatusText::internal_default_instance());
}
class StatusTextResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::StatusText& status_text(const StatusTextResponse* msg);
};

const ::mavsdk::rpc::telemetry::StatusText&
StatusTextResponse::_Internal::status_text(const StatusTextResponse* msg) {
  return *msg->status_text_;
}
StatusTextResponse::StatusTextResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.StatusTextResponse)
}
StatusTextResponse::StatusTextResponse(const StatusTextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status_text()) {
    status_text_ = new ::mavsdk::rpc::telemetry::StatusText(*from.status_text_);
  } else {
    status_text_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.StatusTextResponse)
}

void StatusTextResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusTextResponse_telemetry_2ftelemetry_2eproto.base);
  status_text_ = nullptr;
}

StatusTextResponse::~StatusTextResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.StatusTextResponse)
  SharedDtor();
}

void StatusTextResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_text_;
}

void StatusTextResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusTextResponse& StatusTextResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusTextResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void StatusTextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.StatusTextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_text_ != nullptr) {
    delete status_text_;
  }
  status_text_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StatusTextResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.StatusText status_text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusTextResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.StatusTextResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.StatusText status_text = 1;
  if (this->has_status_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status_text(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.StatusTextResponse)
  return target;
}

size_t StatusTextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.StatusTextResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.StatusText status_text = 1;
  if (this->has_status_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_text_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusTextResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.StatusTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusTextResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusTextResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.StatusTextResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.StatusTextResponse)
    MergeFrom(*source);
  }
}

void StatusTextResponse::MergeFrom(const StatusTextResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.StatusTextResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status_text()) {
    _internal_mutable_status_text()->::mavsdk::rpc::telemetry::StatusText::MergeFrom(from._internal_status_text());
  }
}

void StatusTextResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.StatusTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusTextResponse::CopyFrom(const StatusTextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.StatusTextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusTextResponse::IsInitialized() const {
  return true;
}

void StatusTextResponse::InternalSwap(StatusTextResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_text_, other->status_text_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusTextResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeActuatorControlTargetRequest::InitAsDefaultInstance() {
}
class SubscribeActuatorControlTargetRequest::_Internal {
 public:
};

SubscribeActuatorControlTargetRequest::SubscribeActuatorControlTargetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
}
SubscribeActuatorControlTargetRequest::SubscribeActuatorControlTargetRequest(const SubscribeActuatorControlTargetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
}

void SubscribeActuatorControlTargetRequest::SharedCtor() {
}

SubscribeActuatorControlTargetRequest::~SubscribeActuatorControlTargetRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  SharedDtor();
}

void SubscribeActuatorControlTargetRequest::SharedDtor() {
}

void SubscribeActuatorControlTargetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeActuatorControlTargetRequest& SubscribeActuatorControlTargetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeActuatorControlTargetRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeActuatorControlTargetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeActuatorControlTargetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeActuatorControlTargetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  return target;
}

size_t SubscribeActuatorControlTargetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeActuatorControlTargetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeActuatorControlTargetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeActuatorControlTargetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
    MergeFrom(*source);
  }
}

void SubscribeActuatorControlTargetRequest::MergeFrom(const SubscribeActuatorControlTargetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeActuatorControlTargetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeActuatorControlTargetRequest::CopyFrom(const SubscribeActuatorControlTargetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeActuatorControlTargetRequest::IsInitialized() const {
  return true;
}

void SubscribeActuatorControlTargetRequest::InternalSwap(SubscribeActuatorControlTargetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeActuatorControlTargetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActuatorControlTargetResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_ActuatorControlTargetResponse_default_instance_._instance.get_mutable()->actuator_control_target_ = const_cast< ::mavsdk::rpc::telemetry::ActuatorControlTarget*>(
      ::mavsdk::rpc::telemetry::ActuatorControlTarget::internal_default_instance());
}
class ActuatorControlTargetResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::ActuatorControlTarget& actuator_control_target(const ActuatorControlTargetResponse* msg);
};

const ::mavsdk::rpc::telemetry::ActuatorControlTarget&
ActuatorControlTargetResponse::_Internal::actuator_control_target(const ActuatorControlTargetResponse* msg) {
  return *msg->actuator_control_target_;
}
ActuatorControlTargetResponse::ActuatorControlTargetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
}
ActuatorControlTargetResponse::ActuatorControlTargetResponse(const ActuatorControlTargetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_actuator_control_target()) {
    actuator_control_target_ = new ::mavsdk::rpc::telemetry::ActuatorControlTarget(*from.actuator_control_target_);
  } else {
    actuator_control_target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
}

void ActuatorControlTargetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActuatorControlTargetResponse_telemetry_2ftelemetry_2eproto.base);
  actuator_control_target_ = nullptr;
}

ActuatorControlTargetResponse::~ActuatorControlTargetResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  SharedDtor();
}

void ActuatorControlTargetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete actuator_control_target_;
}

void ActuatorControlTargetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActuatorControlTargetResponse& ActuatorControlTargetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActuatorControlTargetResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void ActuatorControlTargetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && actuator_control_target_ != nullptr) {
    delete actuator_control_target_;
  }
  actuator_control_target_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ActuatorControlTargetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actuator_control_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorControlTargetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
  if (this->has_actuator_control_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::actuator_control_target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  return target;
}

size_t ActuatorControlTargetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
  if (this->has_actuator_control_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actuator_control_target_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorControlTargetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorControlTargetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorControlTargetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
    MergeFrom(*source);
  }
}

void ActuatorControlTargetResponse::MergeFrom(const ActuatorControlTargetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_actuator_control_target()) {
    _internal_mutable_actuator_control_target()->::mavsdk::rpc::telemetry::ActuatorControlTarget::MergeFrom(from._internal_actuator_control_target());
  }
}

void ActuatorControlTargetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorControlTargetResponse::CopyFrom(const ActuatorControlTargetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorControlTargetResponse::IsInitialized() const {
  return true;
}

void ActuatorControlTargetResponse::InternalSwap(ActuatorControlTargetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actuator_control_target_, other->actuator_control_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorControlTargetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeActuatorOutputStatusRequest::InitAsDefaultInstance() {
}
class SubscribeActuatorOutputStatusRequest::_Internal {
 public:
};

SubscribeActuatorOutputStatusRequest::SubscribeActuatorOutputStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
}
SubscribeActuatorOutputStatusRequest::SubscribeActuatorOutputStatusRequest(const SubscribeActuatorOutputStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
}

void SubscribeActuatorOutputStatusRequest::SharedCtor() {
}

SubscribeActuatorOutputStatusRequest::~SubscribeActuatorOutputStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  SharedDtor();
}

void SubscribeActuatorOutputStatusRequest::SharedDtor() {
}

void SubscribeActuatorOutputStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeActuatorOutputStatusRequest& SubscribeActuatorOutputStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeActuatorOutputStatusRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeActuatorOutputStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeActuatorOutputStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeActuatorOutputStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  return target;
}

size_t SubscribeActuatorOutputStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeActuatorOutputStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeActuatorOutputStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeActuatorOutputStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
    MergeFrom(*source);
  }
}

void SubscribeActuatorOutputStatusRequest::MergeFrom(const SubscribeActuatorOutputStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeActuatorOutputStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeActuatorOutputStatusRequest::CopyFrom(const SubscribeActuatorOutputStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeActuatorOutputStatusRequest::IsInitialized() const {
  return true;
}

void SubscribeActuatorOutputStatusRequest::InternalSwap(SubscribeActuatorOutputStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeActuatorOutputStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActuatorOutputStatusResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_ActuatorOutputStatusResponse_default_instance_._instance.get_mutable()->actuator_output_status_ = const_cast< ::mavsdk::rpc::telemetry::ActuatorOutputStatus*>(
      ::mavsdk::rpc::telemetry::ActuatorOutputStatus::internal_default_instance());
}
class ActuatorOutputStatusResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::ActuatorOutputStatus& actuator_output_status(const ActuatorOutputStatusResponse* msg);
};

const ::mavsdk::rpc::telemetry::ActuatorOutputStatus&
ActuatorOutputStatusResponse::_Internal::actuator_output_status(const ActuatorOutputStatusResponse* msg) {
  return *msg->actuator_output_status_;
}
ActuatorOutputStatusResponse::ActuatorOutputStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
}
ActuatorOutputStatusResponse::ActuatorOutputStatusResponse(const ActuatorOutputStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_actuator_output_status()) {
    actuator_output_status_ = new ::mavsdk::rpc::telemetry::ActuatorOutputStatus(*from.actuator_output_status_);
  } else {
    actuator_output_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
}

void ActuatorOutputStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActuatorOutputStatusResponse_telemetry_2ftelemetry_2eproto.base);
  actuator_output_status_ = nullptr;
}

ActuatorOutputStatusResponse::~ActuatorOutputStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  SharedDtor();
}

void ActuatorOutputStatusResponse::SharedDtor() {
  if (this != internal_default_instance()) delete actuator_output_status_;
}

void ActuatorOutputStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActuatorOutputStatusResponse& ActuatorOutputStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActuatorOutputStatusResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void ActuatorOutputStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && actuator_output_status_ != nullptr) {
    delete actuator_output_status_;
  }
  actuator_output_status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ActuatorOutputStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_actuator_output_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorOutputStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
  if (this->has_actuator_output_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::actuator_output_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  return target;
}

size_t ActuatorOutputStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
  if (this->has_actuator_output_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actuator_output_status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorOutputStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorOutputStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorOutputStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
    MergeFrom(*source);
  }
}

void ActuatorOutputStatusResponse::MergeFrom(const ActuatorOutputStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_actuator_output_status()) {
    _internal_mutable_actuator_output_status()->::mavsdk::rpc::telemetry::ActuatorOutputStatus::MergeFrom(from._internal_actuator_output_status());
  }
}

void ActuatorOutputStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorOutputStatusResponse::CopyFrom(const ActuatorOutputStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorOutputStatusResponse::IsInitialized() const {
  return true;
}

void ActuatorOutputStatusResponse::InternalSwap(ActuatorOutputStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(actuator_output_status_, other->actuator_output_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorOutputStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeOdometryRequest::InitAsDefaultInstance() {
}
class SubscribeOdometryRequest::_Internal {
 public:
};

SubscribeOdometryRequest::SubscribeOdometryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
}
SubscribeOdometryRequest::SubscribeOdometryRequest(const SubscribeOdometryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
}

void SubscribeOdometryRequest::SharedCtor() {
}

SubscribeOdometryRequest::~SubscribeOdometryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  SharedDtor();
}

void SubscribeOdometryRequest::SharedDtor() {
}

void SubscribeOdometryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeOdometryRequest& SubscribeOdometryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeOdometryRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeOdometryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeOdometryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeOdometryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  return target;
}

size_t SubscribeOdometryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeOdometryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeOdometryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeOdometryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
    MergeFrom(*source);
  }
}

void SubscribeOdometryRequest::MergeFrom(const SubscribeOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeOdometryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeOdometryRequest::CopyFrom(const SubscribeOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeOdometryRequest::IsInitialized() const {
  return true;
}

void SubscribeOdometryRequest::InternalSwap(SubscribeOdometryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeOdometryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OdometryResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_OdometryResponse_default_instance_._instance.get_mutable()->odometry_ = const_cast< ::mavsdk::rpc::telemetry::Odometry*>(
      ::mavsdk::rpc::telemetry::Odometry::internal_default_instance());
}
class OdometryResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Odometry& odometry(const OdometryResponse* msg);
};

const ::mavsdk::rpc::telemetry::Odometry&
OdometryResponse::_Internal::odometry(const OdometryResponse* msg) {
  return *msg->odometry_;
}
OdometryResponse::OdometryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.OdometryResponse)
}
OdometryResponse::OdometryResponse(const OdometryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_odometry()) {
    odometry_ = new ::mavsdk::rpc::telemetry::Odometry(*from.odometry_);
  } else {
    odometry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.OdometryResponse)
}

void OdometryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OdometryResponse_telemetry_2ftelemetry_2eproto.base);
  odometry_ = nullptr;
}

OdometryResponse::~OdometryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.OdometryResponse)
  SharedDtor();
}

void OdometryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete odometry_;
}

void OdometryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OdometryResponse& OdometryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OdometryResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void OdometryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.OdometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && odometry_ != nullptr) {
    delete odometry_;
  }
  odometry_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OdometryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Odometry odometry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OdometryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.OdometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Odometry odometry = 1;
  if (this->has_odometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::odometry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.OdometryResponse)
  return target;
}

size_t OdometryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.OdometryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Odometry odometry = 1;
  if (this->has_odometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odometry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdometryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.OdometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OdometryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.OdometryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.OdometryResponse)
    MergeFrom(*source);
  }
}

void OdometryResponse::MergeFrom(const OdometryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.OdometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_odometry()) {
    _internal_mutable_odometry()->::mavsdk::rpc::telemetry::Odometry::MergeFrom(from._internal_odometry());
  }
}

void OdometryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.OdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryResponse::CopyFrom(const OdometryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.OdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryResponse::IsInitialized() const {
  return true;
}

void OdometryResponse::InternalSwap(OdometryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(odometry_, other->odometry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OdometryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribePositionVelocityNedRequest::InitAsDefaultInstance() {
}
class SubscribePositionVelocityNedRequest::_Internal {
 public:
};

SubscribePositionVelocityNedRequest::SubscribePositionVelocityNedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
}
SubscribePositionVelocityNedRequest::SubscribePositionVelocityNedRequest(const SubscribePositionVelocityNedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
}

void SubscribePositionVelocityNedRequest::SharedCtor() {
}

SubscribePositionVelocityNedRequest::~SubscribePositionVelocityNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  SharedDtor();
}

void SubscribePositionVelocityNedRequest::SharedDtor() {
}

void SubscribePositionVelocityNedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribePositionVelocityNedRequest& SubscribePositionVelocityNedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribePositionVelocityNedRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribePositionVelocityNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribePositionVelocityNedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribePositionVelocityNedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  return target;
}

size_t SubscribePositionVelocityNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribePositionVelocityNedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribePositionVelocityNedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribePositionVelocityNedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
    MergeFrom(*source);
  }
}

void SubscribePositionVelocityNedRequest::MergeFrom(const SubscribePositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribePositionVelocityNedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribePositionVelocityNedRequest::CopyFrom(const SubscribePositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribePositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribePositionVelocityNedRequest::IsInitialized() const {
  return true;
}

void SubscribePositionVelocityNedRequest::InternalSwap(SubscribePositionVelocityNedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribePositionVelocityNedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionVelocityNedResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_PositionVelocityNedResponse_default_instance_._instance.get_mutable()->position_velocity_ned_ = const_cast< ::mavsdk::rpc::telemetry::PositionVelocityNed*>(
      ::mavsdk::rpc::telemetry::PositionVelocityNed::internal_default_instance());
}
class PositionVelocityNedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::PositionVelocityNed& position_velocity_ned(const PositionVelocityNedResponse* msg);
};

const ::mavsdk::rpc::telemetry::PositionVelocityNed&
PositionVelocityNedResponse::_Internal::position_velocity_ned(const PositionVelocityNedResponse* msg) {
  return *msg->position_velocity_ned_;
}
PositionVelocityNedResponse::PositionVelocityNedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
}
PositionVelocityNedResponse::PositionVelocityNedResponse(const PositionVelocityNedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position_velocity_ned()) {
    position_velocity_ned_ = new ::mavsdk::rpc::telemetry::PositionVelocityNed(*from.position_velocity_ned_);
  } else {
    position_velocity_ned_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
}

void PositionVelocityNedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionVelocityNedResponse_telemetry_2ftelemetry_2eproto.base);
  position_velocity_ned_ = nullptr;
}

PositionVelocityNedResponse::~PositionVelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  SharedDtor();
}

void PositionVelocityNedResponse::SharedDtor() {
  if (this != internal_default_instance()) delete position_velocity_ned_;
}

void PositionVelocityNedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionVelocityNedResponse& PositionVelocityNedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionVelocityNedResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void PositionVelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_velocity_ned_ != nullptr) {
    delete position_velocity_ned_;
  }
  position_velocity_ned_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PositionVelocityNedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.PositionVelocityNed position_velocity_ned = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_velocity_ned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionVelocityNedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.PositionVelocityNed position_velocity_ned = 1;
  if (this->has_position_velocity_ned()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position_velocity_ned(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  return target;
}

size_t PositionVelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.PositionVelocityNed position_velocity_ned = 1;
  if (this->has_position_velocity_ned()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_velocity_ned_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionVelocityNedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionVelocityNedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionVelocityNedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
    MergeFrom(*source);
  }
}

void PositionVelocityNedResponse::MergeFrom(const PositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_velocity_ned()) {
    _internal_mutable_position_velocity_ned()->::mavsdk::rpc::telemetry::PositionVelocityNed::MergeFrom(from._internal_position_velocity_ned());
  }
}

void PositionVelocityNedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionVelocityNedResponse::CopyFrom(const PositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionVelocityNedResponse::IsInitialized() const {
  return true;
}

void PositionVelocityNedResponse::InternalSwap(PositionVelocityNedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_velocity_ned_, other->position_velocity_ned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionVelocityNedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeGroundTruthRequest::InitAsDefaultInstance() {
}
class SubscribeGroundTruthRequest::_Internal {
 public:
};

SubscribeGroundTruthRequest::SubscribeGroundTruthRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
}
SubscribeGroundTruthRequest::SubscribeGroundTruthRequest(const SubscribeGroundTruthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
}

void SubscribeGroundTruthRequest::SharedCtor() {
}

SubscribeGroundTruthRequest::~SubscribeGroundTruthRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  SharedDtor();
}

void SubscribeGroundTruthRequest::SharedDtor() {
}

void SubscribeGroundTruthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeGroundTruthRequest& SubscribeGroundTruthRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeGroundTruthRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeGroundTruthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeGroundTruthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeGroundTruthRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  return target;
}

size_t SubscribeGroundTruthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeGroundTruthRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeGroundTruthRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeGroundTruthRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
    MergeFrom(*source);
  }
}

void SubscribeGroundTruthRequest::MergeFrom(const SubscribeGroundTruthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeGroundTruthRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeGroundTruthRequest::CopyFrom(const SubscribeGroundTruthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeGroundTruthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeGroundTruthRequest::IsInitialized() const {
  return true;
}

void SubscribeGroundTruthRequest::InternalSwap(SubscribeGroundTruthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeGroundTruthRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroundTruthResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_GroundTruthResponse_default_instance_._instance.get_mutable()->ground_truth_ = const_cast< ::mavsdk::rpc::telemetry::GroundTruth*>(
      ::mavsdk::rpc::telemetry::GroundTruth::internal_default_instance());
}
class GroundTruthResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::GroundTruth& ground_truth(const GroundTruthResponse* msg);
};

const ::mavsdk::rpc::telemetry::GroundTruth&
GroundTruthResponse::_Internal::ground_truth(const GroundTruthResponse* msg) {
  return *msg->ground_truth_;
}
GroundTruthResponse::GroundTruthResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.GroundTruthResponse)
}
GroundTruthResponse::GroundTruthResponse(const GroundTruthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ground_truth()) {
    ground_truth_ = new ::mavsdk::rpc::telemetry::GroundTruth(*from.ground_truth_);
  } else {
    ground_truth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GroundTruthResponse)
}

void GroundTruthResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroundTruthResponse_telemetry_2ftelemetry_2eproto.base);
  ground_truth_ = nullptr;
}

GroundTruthResponse::~GroundTruthResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GroundTruthResponse)
  SharedDtor();
}

void GroundTruthResponse::SharedDtor() {
  if (this != internal_default_instance()) delete ground_truth_;
}

void GroundTruthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroundTruthResponse& GroundTruthResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroundTruthResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void GroundTruthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ground_truth_ != nullptr) {
    delete ground_truth_;
  }
  ground_truth_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GroundTruthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.GroundTruth ground_truth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_truth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroundTruthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.GroundTruth ground_truth = 1;
  if (this->has_ground_truth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ground_truth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GroundTruthResponse)
  return target;
}

size_t GroundTruthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.GroundTruth ground_truth = 1;
  if (this->has_ground_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ground_truth_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroundTruthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundTruthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroundTruthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.GroundTruthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.GroundTruthResponse)
    MergeFrom(*source);
  }
}

void GroundTruthResponse::MergeFrom(const GroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ground_truth()) {
    _internal_mutable_ground_truth()->::mavsdk::rpc::telemetry::GroundTruth::MergeFrom(from._internal_ground_truth());
  }
}

void GroundTruthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTruthResponse::CopyFrom(const GroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruthResponse::IsInitialized() const {
  return true;
}

void GroundTruthResponse::InternalSwap(GroundTruthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ground_truth_, other->ground_truth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundTruthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeFixedwingMetricsRequest::InitAsDefaultInstance() {
}
class SubscribeFixedwingMetricsRequest::_Internal {
 public:
};

SubscribeFixedwingMetricsRequest::SubscribeFixedwingMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
}
SubscribeFixedwingMetricsRequest::SubscribeFixedwingMetricsRequest(const SubscribeFixedwingMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
}

void SubscribeFixedwingMetricsRequest::SharedCtor() {
}

SubscribeFixedwingMetricsRequest::~SubscribeFixedwingMetricsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  SharedDtor();
}

void SubscribeFixedwingMetricsRequest::SharedDtor() {
}

void SubscribeFixedwingMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeFixedwingMetricsRequest& SubscribeFixedwingMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeFixedwingMetricsRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeFixedwingMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeFixedwingMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeFixedwingMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  return target;
}

size_t SubscribeFixedwingMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeFixedwingMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeFixedwingMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeFixedwingMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
    MergeFrom(*source);
  }
}

void SubscribeFixedwingMetricsRequest::MergeFrom(const SubscribeFixedwingMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeFixedwingMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeFixedwingMetricsRequest::CopyFrom(const SubscribeFixedwingMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeFixedwingMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeFixedwingMetricsRequest::IsInitialized() const {
  return true;
}

void SubscribeFixedwingMetricsRequest::InternalSwap(SubscribeFixedwingMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeFixedwingMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FixedwingMetricsResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_FixedwingMetricsResponse_default_instance_._instance.get_mutable()->fixedwing_metrics_ = const_cast< ::mavsdk::rpc::telemetry::FixedwingMetrics*>(
      ::mavsdk::rpc::telemetry::FixedwingMetrics::internal_default_instance());
}
class FixedwingMetricsResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::FixedwingMetrics& fixedwing_metrics(const FixedwingMetricsResponse* msg);
};

const ::mavsdk::rpc::telemetry::FixedwingMetrics&
FixedwingMetricsResponse::_Internal::fixedwing_metrics(const FixedwingMetricsResponse* msg) {
  return *msg->fixedwing_metrics_;
}
FixedwingMetricsResponse::FixedwingMetricsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
}
FixedwingMetricsResponse::FixedwingMetricsResponse(const FixedwingMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fixedwing_metrics()) {
    fixedwing_metrics_ = new ::mavsdk::rpc::telemetry::FixedwingMetrics(*from.fixedwing_metrics_);
  } else {
    fixedwing_metrics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
}

void FixedwingMetricsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FixedwingMetricsResponse_telemetry_2ftelemetry_2eproto.base);
  fixedwing_metrics_ = nullptr;
}

FixedwingMetricsResponse::~FixedwingMetricsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  SharedDtor();
}

void FixedwingMetricsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete fixedwing_metrics_;
}

void FixedwingMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedwingMetricsResponse& FixedwingMetricsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixedwingMetricsResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void FixedwingMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fixedwing_metrics_ != nullptr) {
    delete fixedwing_metrics_;
  }
  fixedwing_metrics_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FixedwingMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.FixedwingMetrics fixedwing_metrics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixedwing_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedwingMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.FixedwingMetrics fixedwing_metrics = 1;
  if (this->has_fixedwing_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fixedwing_metrics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  return target;
}

size_t FixedwingMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.FixedwingMetrics fixedwing_metrics = 1;
  if (this->has_fixedwing_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fixedwing_metrics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedwingMetricsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedwingMetricsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedwingMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
    MergeFrom(*source);
  }
}

void FixedwingMetricsResponse::MergeFrom(const FixedwingMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fixedwing_metrics()) {
    _internal_mutable_fixedwing_metrics()->::mavsdk::rpc::telemetry::FixedwingMetrics::MergeFrom(from._internal_fixedwing_metrics());
  }
}

void FixedwingMetricsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedwingMetricsResponse::CopyFrom(const FixedwingMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.FixedwingMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedwingMetricsResponse::IsInitialized() const {
  return true;
}

void FixedwingMetricsResponse::InternalSwap(FixedwingMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fixedwing_metrics_, other->fixedwing_metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedwingMetricsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeImuRequest::InitAsDefaultInstance() {
}
class SubscribeImuRequest::_Internal {
 public:
};

SubscribeImuRequest::SubscribeImuRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeImuRequest)
}
SubscribeImuRequest::SubscribeImuRequest(const SubscribeImuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeImuRequest)
}

void SubscribeImuRequest::SharedCtor() {
}

SubscribeImuRequest::~SubscribeImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeImuRequest)
  SharedDtor();
}

void SubscribeImuRequest::SharedDtor() {
}

void SubscribeImuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeImuRequest& SubscribeImuRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeImuRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeImuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeImuRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeImuRequest)
  return target;
}

size_t SubscribeImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeImuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeImuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeImuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeImuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeImuRequest)
    MergeFrom(*source);
  }
}

void SubscribeImuRequest::MergeFrom(const SubscribeImuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeImuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeImuRequest::CopyFrom(const SubscribeImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeImuRequest::IsInitialized() const {
  return true;
}

void SubscribeImuRequest::InternalSwap(SubscribeImuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeImuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImuResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_ImuResponse_default_instance_._instance.get_mutable()->imu_ = const_cast< ::mavsdk::rpc::telemetry::Imu*>(
      ::mavsdk::rpc::telemetry::Imu::internal_default_instance());
}
class ImuResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::Imu& imu(const ImuResponse* msg);
};

const ::mavsdk::rpc::telemetry::Imu&
ImuResponse::_Internal::imu(const ImuResponse* msg) {
  return *msg->imu_;
}
ImuResponse::ImuResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.ImuResponse)
}
ImuResponse::ImuResponse(const ImuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_imu()) {
    imu_ = new ::mavsdk::rpc::telemetry::Imu(*from.imu_);
  } else {
    imu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ImuResponse)
}

void ImuResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImuResponse_telemetry_2ftelemetry_2eproto.base);
  imu_ = nullptr;
}

ImuResponse::~ImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ImuResponse)
  SharedDtor();
}

void ImuResponse::SharedDtor() {
  if (this != internal_default_instance()) delete imu_;
}

void ImuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuResponse& ImuResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImuResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void ImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && imu_ != nullptr) {
    delete imu_;
  }
  imu_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ImuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.Imu imu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Imu imu = 1;
  if (this->has_imu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::imu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ImuResponse)
  return target;
}

size_t ImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ImuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.Imu imu = 1;
  if (this->has_imu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ImuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ImuResponse)
    MergeFrom(*source);
  }
}

void ImuResponse::MergeFrom(const ImuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu()) {
    _internal_mutable_imu()->::mavsdk::rpc::telemetry::Imu::MergeFrom(from._internal_imu());
  }
}

void ImuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuResponse::CopyFrom(const ImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuResponse::IsInitialized() const {
  return true;
}

void ImuResponse::InternalSwap(ImuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(imu_, other->imu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeHealthAllOkRequest::InitAsDefaultInstance() {
}
class SubscribeHealthAllOkRequest::_Internal {
 public:
};

SubscribeHealthAllOkRequest::SubscribeHealthAllOkRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
}
SubscribeHealthAllOkRequest::SubscribeHealthAllOkRequest(const SubscribeHealthAllOkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
}

void SubscribeHealthAllOkRequest::SharedCtor() {
}

SubscribeHealthAllOkRequest::~SubscribeHealthAllOkRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  SharedDtor();
}

void SubscribeHealthAllOkRequest::SharedDtor() {
}

void SubscribeHealthAllOkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeHealthAllOkRequest& SubscribeHealthAllOkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeHealthAllOkRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeHealthAllOkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeHealthAllOkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeHealthAllOkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  return target;
}

size_t SubscribeHealthAllOkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeHealthAllOkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeHealthAllOkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeHealthAllOkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
    MergeFrom(*source);
  }
}

void SubscribeHealthAllOkRequest::MergeFrom(const SubscribeHealthAllOkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeHealthAllOkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeHealthAllOkRequest::CopyFrom(const SubscribeHealthAllOkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeHealthAllOkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeHealthAllOkRequest::IsInitialized() const {
  return true;
}

void SubscribeHealthAllOkRequest::InternalSwap(SubscribeHealthAllOkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeHealthAllOkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HealthAllOkResponse::InitAsDefaultInstance() {
}
class HealthAllOkResponse::_Internal {
 public:
};

HealthAllOkResponse::HealthAllOkResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.HealthAllOkResponse)
}
HealthAllOkResponse::HealthAllOkResponse(const HealthAllOkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_health_all_ok_ = from.is_health_all_ok_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.HealthAllOkResponse)
}

void HealthAllOkResponse::SharedCtor() {
  is_health_all_ok_ = false;
}

HealthAllOkResponse::~HealthAllOkResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.HealthAllOkResponse)
  SharedDtor();
}

void HealthAllOkResponse::SharedDtor() {
}

void HealthAllOkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthAllOkResponse& HealthAllOkResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthAllOkResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void HealthAllOkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_health_all_ok_ = false;
  _internal_metadata_.Clear();
}

const char* HealthAllOkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_health_all_ok = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_health_all_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthAllOkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_health_all_ok = 1;
  if (this->is_health_all_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_health_all_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.HealthAllOkResponse)
  return target;
}

size_t HealthAllOkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_health_all_ok = 1;
  if (this->is_health_all_ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthAllOkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthAllOkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthAllOkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.HealthAllOkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.HealthAllOkResponse)
    MergeFrom(*source);
  }
}

void HealthAllOkResponse::MergeFrom(const HealthAllOkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_health_all_ok() != 0) {
    _internal_set_is_health_all_ok(from._internal_is_health_all_ok());
  }
}

void HealthAllOkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthAllOkResponse::CopyFrom(const HealthAllOkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.HealthAllOkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthAllOkResponse::IsInitialized() const {
  return true;
}

void HealthAllOkResponse::InternalSwap(HealthAllOkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_health_all_ok_, other->is_health_all_ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthAllOkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeUnixEpochTimeRequest::InitAsDefaultInstance() {
}
class SubscribeUnixEpochTimeRequest::_Internal {
 public:
};

SubscribeUnixEpochTimeRequest::SubscribeUnixEpochTimeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
}
SubscribeUnixEpochTimeRequest::SubscribeUnixEpochTimeRequest(const SubscribeUnixEpochTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
}

void SubscribeUnixEpochTimeRequest::SharedCtor() {
}

SubscribeUnixEpochTimeRequest::~SubscribeUnixEpochTimeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  SharedDtor();
}

void SubscribeUnixEpochTimeRequest::SharedDtor() {
}

void SubscribeUnixEpochTimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeUnixEpochTimeRequest& SubscribeUnixEpochTimeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeUnixEpochTimeRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SubscribeUnixEpochTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeUnixEpochTimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeUnixEpochTimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  return target;
}

size_t SubscribeUnixEpochTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeUnixEpochTimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeUnixEpochTimeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeUnixEpochTimeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
    MergeFrom(*source);
  }
}

void SubscribeUnixEpochTimeRequest::MergeFrom(const SubscribeUnixEpochTimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeUnixEpochTimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeUnixEpochTimeRequest::CopyFrom(const SubscribeUnixEpochTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SubscribeUnixEpochTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeUnixEpochTimeRequest::IsInitialized() const {
  return true;
}

void SubscribeUnixEpochTimeRequest::InternalSwap(SubscribeUnixEpochTimeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeUnixEpochTimeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnixEpochTimeResponse::InitAsDefaultInstance() {
}
class UnixEpochTimeResponse::_Internal {
 public:
};

UnixEpochTimeResponse::UnixEpochTimeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
}
UnixEpochTimeResponse::UnixEpochTimeResponse(const UnixEpochTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_us_ = from.time_us_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
}

void UnixEpochTimeResponse::SharedCtor() {
  time_us_ = PROTOBUF_ULONGLONG(0);
}

UnixEpochTimeResponse::~UnixEpochTimeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  SharedDtor();
}

void UnixEpochTimeResponse::SharedDtor() {
}

void UnixEpochTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnixEpochTimeResponse& UnixEpochTimeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnixEpochTimeResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void UnixEpochTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_us_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* UnixEpochTimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnixEpochTimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_us = 1;
  if (this->time_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  return target;
}

size_t UnixEpochTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 time_us = 1;
  if (this->time_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_us());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnixEpochTimeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnixEpochTimeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnixEpochTimeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
    MergeFrom(*source);
  }
}

void UnixEpochTimeResponse::MergeFrom(const UnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_us() != 0) {
    _internal_set_time_us(from._internal_time_us());
  }
}

void UnixEpochTimeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnixEpochTimeResponse::CopyFrom(const UnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.UnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnixEpochTimeResponse::IsInitialized() const {
  return true;
}

void UnixEpochTimeResponse::InternalSwap(UnixEpochTimeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_us_, other->time_us_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnixEpochTimeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRatePositionRequest::InitAsDefaultInstance() {
}
class SetRatePositionRequest::_Internal {
 public:
};

SetRatePositionRequest::SetRatePositionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRatePositionRequest)
}
SetRatePositionRequest::SetRatePositionRequest(const SetRatePositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRatePositionRequest)
}

void SetRatePositionRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRatePositionRequest::~SetRatePositionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRatePositionRequest)
  SharedDtor();
}

void SetRatePositionRequest::SharedDtor() {
}

void SetRatePositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRatePositionRequest& SetRatePositionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRatePositionRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRatePositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRatePositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRatePositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRatePositionRequest)
  return target;
}

size_t SetRatePositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRatePositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRatePositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRatePositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRatePositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRatePositionRequest)
    MergeFrom(*source);
  }
}

void SetRatePositionRequest::MergeFrom(const SetRatePositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRatePositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRatePositionRequest::CopyFrom(const SetRatePositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRatePositionRequest::IsInitialized() const {
  return true;
}

void SetRatePositionRequest::InternalSwap(SetRatePositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRatePositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRatePositionResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRatePositionResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRatePositionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRatePositionResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRatePositionResponse::_Internal::telemetry_result(const SetRatePositionResponse* msg) {
  return *msg->telemetry_result_;
}
SetRatePositionResponse::SetRatePositionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRatePositionResponse)
}
SetRatePositionResponse::SetRatePositionResponse(const SetRatePositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRatePositionResponse)
}

void SetRatePositionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRatePositionResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRatePositionResponse::~SetRatePositionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRatePositionResponse)
  SharedDtor();
}

void SetRatePositionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRatePositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRatePositionResponse& SetRatePositionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRatePositionResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRatePositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRatePositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRatePositionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRatePositionResponse)
  return target;
}

size_t SetRatePositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRatePositionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRatePositionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRatePositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRatePositionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRatePositionResponse)
    MergeFrom(*source);
  }
}

void SetRatePositionResponse::MergeFrom(const SetRatePositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRatePositionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRatePositionResponse::CopyFrom(const SetRatePositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRatePositionResponse::IsInitialized() const {
  return true;
}

void SetRatePositionResponse::InternalSwap(SetRatePositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRatePositionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateHomeRequest::InitAsDefaultInstance() {
}
class SetRateHomeRequest::_Internal {
 public:
};

SetRateHomeRequest::SetRateHomeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateHomeRequest)
}
SetRateHomeRequest::SetRateHomeRequest(const SetRateHomeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateHomeRequest)
}

void SetRateHomeRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateHomeRequest::~SetRateHomeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateHomeRequest)
  SharedDtor();
}

void SetRateHomeRequest::SharedDtor() {
}

void SetRateHomeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateHomeRequest& SetRateHomeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateHomeRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateHomeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateHomeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateHomeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateHomeRequest)
  return target;
}

size_t SetRateHomeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateHomeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateHomeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateHomeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateHomeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateHomeRequest)
    MergeFrom(*source);
  }
}

void SetRateHomeRequest::MergeFrom(const SetRateHomeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateHomeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateHomeRequest::CopyFrom(const SetRateHomeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateHomeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateHomeRequest::IsInitialized() const {
  return true;
}

void SetRateHomeRequest::InternalSwap(SetRateHomeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateHomeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateHomeResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateHomeResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateHomeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateHomeResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateHomeResponse::_Internal::telemetry_result(const SetRateHomeResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateHomeResponse::SetRateHomeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateHomeResponse)
}
SetRateHomeResponse::SetRateHomeResponse(const SetRateHomeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateHomeResponse)
}

void SetRateHomeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateHomeResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateHomeResponse::~SetRateHomeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateHomeResponse)
  SharedDtor();
}

void SetRateHomeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateHomeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateHomeResponse& SetRateHomeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateHomeResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateHomeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateHomeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateHomeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateHomeResponse)
  return target;
}

size_t SetRateHomeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateHomeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateHomeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateHomeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateHomeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateHomeResponse)
    MergeFrom(*source);
  }
}

void SetRateHomeResponse::MergeFrom(const SetRateHomeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateHomeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateHomeResponse::CopyFrom(const SetRateHomeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateHomeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateHomeResponse::IsInitialized() const {
  return true;
}

void SetRateHomeResponse::InternalSwap(SetRateHomeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateHomeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateInAirRequest::InitAsDefaultInstance() {
}
class SetRateInAirRequest::_Internal {
 public:
};

SetRateInAirRequest::SetRateInAirRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateInAirRequest)
}
SetRateInAirRequest::SetRateInAirRequest(const SetRateInAirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateInAirRequest)
}

void SetRateInAirRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateInAirRequest::~SetRateInAirRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateInAirRequest)
  SharedDtor();
}

void SetRateInAirRequest::SharedDtor() {
}

void SetRateInAirRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateInAirRequest& SetRateInAirRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateInAirRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateInAirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateInAirRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateInAirRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateInAirRequest)
  return target;
}

size_t SetRateInAirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateInAirRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateInAirRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateInAirRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateInAirRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateInAirRequest)
    MergeFrom(*source);
  }
}

void SetRateInAirRequest::MergeFrom(const SetRateInAirRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateInAirRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateInAirRequest::CopyFrom(const SetRateInAirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateInAirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateInAirRequest::IsInitialized() const {
  return true;
}

void SetRateInAirRequest::InternalSwap(SetRateInAirRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateInAirRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateInAirResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateInAirResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateInAirResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateInAirResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateInAirResponse::_Internal::telemetry_result(const SetRateInAirResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateInAirResponse::SetRateInAirResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateInAirResponse)
}
SetRateInAirResponse::SetRateInAirResponse(const SetRateInAirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateInAirResponse)
}

void SetRateInAirResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateInAirResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateInAirResponse::~SetRateInAirResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateInAirResponse)
  SharedDtor();
}

void SetRateInAirResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateInAirResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateInAirResponse& SetRateInAirResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateInAirResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateInAirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateInAirResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateInAirResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateInAirResponse)
  return target;
}

size_t SetRateInAirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateInAirResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateInAirResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateInAirResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateInAirResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateInAirResponse)
    MergeFrom(*source);
  }
}

void SetRateInAirResponse::MergeFrom(const SetRateInAirResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateInAirResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateInAirResponse::CopyFrom(const SetRateInAirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateInAirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateInAirResponse::IsInitialized() const {
  return true;
}

void SetRateInAirResponse::InternalSwap(SetRateInAirResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateInAirResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateLandedStateRequest::InitAsDefaultInstance() {
}
class SetRateLandedStateRequest::_Internal {
 public:
};

SetRateLandedStateRequest::SetRateLandedStateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
}
SetRateLandedStateRequest::SetRateLandedStateRequest(const SetRateLandedStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
}

void SetRateLandedStateRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateLandedStateRequest::~SetRateLandedStateRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  SharedDtor();
}

void SetRateLandedStateRequest::SharedDtor() {
}

void SetRateLandedStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateLandedStateRequest& SetRateLandedStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateLandedStateRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateLandedStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateLandedStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateLandedStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  return target;
}

size_t SetRateLandedStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateLandedStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateLandedStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateLandedStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
    MergeFrom(*source);
  }
}

void SetRateLandedStateRequest::MergeFrom(const SetRateLandedStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateLandedStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateLandedStateRequest::CopyFrom(const SetRateLandedStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateLandedStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateLandedStateRequest::IsInitialized() const {
  return true;
}

void SetRateLandedStateRequest::InternalSwap(SetRateLandedStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateLandedStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateLandedStateResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateLandedStateResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateLandedStateResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateLandedStateResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateLandedStateResponse::_Internal::telemetry_result(const SetRateLandedStateResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateLandedStateResponse::SetRateLandedStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
}
SetRateLandedStateResponse::SetRateLandedStateResponse(const SetRateLandedStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
}

void SetRateLandedStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateLandedStateResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateLandedStateResponse::~SetRateLandedStateResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  SharedDtor();
}

void SetRateLandedStateResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateLandedStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateLandedStateResponse& SetRateLandedStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateLandedStateResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateLandedStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateLandedStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateLandedStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  return target;
}

size_t SetRateLandedStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateLandedStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateLandedStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateLandedStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
    MergeFrom(*source);
  }
}

void SetRateLandedStateResponse::MergeFrom(const SetRateLandedStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateLandedStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateLandedStateResponse::CopyFrom(const SetRateLandedStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateLandedStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateLandedStateResponse::IsInitialized() const {
  return true;
}

void SetRateLandedStateResponse::InternalSwap(SetRateLandedStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateLandedStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateAttitudeRequest::InitAsDefaultInstance() {
}
class SetRateAttitudeRequest::_Internal {
 public:
};

SetRateAttitudeRequest::SetRateAttitudeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
}
SetRateAttitudeRequest::SetRateAttitudeRequest(const SetRateAttitudeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
}

void SetRateAttitudeRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateAttitudeRequest::~SetRateAttitudeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  SharedDtor();
}

void SetRateAttitudeRequest::SharedDtor() {
}

void SetRateAttitudeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateAttitudeRequest& SetRateAttitudeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateAttitudeRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateAttitudeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateAttitudeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateAttitudeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  return target;
}

size_t SetRateAttitudeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateAttitudeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateAttitudeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateAttitudeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
    MergeFrom(*source);
  }
}

void SetRateAttitudeRequest::MergeFrom(const SetRateAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateAttitudeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateAttitudeRequest::CopyFrom(const SetRateAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateAttitudeRequest::IsInitialized() const {
  return true;
}

void SetRateAttitudeRequest::InternalSwap(SetRateAttitudeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateAttitudeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateAttitudeResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateAttitudeResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateAttitudeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateAttitudeResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateAttitudeResponse::_Internal::telemetry_result(const SetRateAttitudeResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateAttitudeResponse::SetRateAttitudeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
}
SetRateAttitudeResponse::SetRateAttitudeResponse(const SetRateAttitudeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
}

void SetRateAttitudeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateAttitudeResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateAttitudeResponse::~SetRateAttitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  SharedDtor();
}

void SetRateAttitudeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateAttitudeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateAttitudeResponse& SetRateAttitudeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateAttitudeResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateAttitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateAttitudeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateAttitudeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  return target;
}

size_t SetRateAttitudeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateAttitudeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateAttitudeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateAttitudeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
    MergeFrom(*source);
  }
}

void SetRateAttitudeResponse::MergeFrom(const SetRateAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateAttitudeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateAttitudeResponse::CopyFrom(const SetRateAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateAttitudeResponse::IsInitialized() const {
  return true;
}

void SetRateAttitudeResponse::InternalSwap(SetRateAttitudeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateAttitudeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateAttitudeAngularVelocityBodyRequest::InitAsDefaultInstance() {
}
class SetRateAttitudeAngularVelocityBodyRequest::_Internal {
 public:
};

SetRateAttitudeAngularVelocityBodyRequest::SetRateAttitudeAngularVelocityBodyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
}
SetRateAttitudeAngularVelocityBodyRequest::SetRateAttitudeAngularVelocityBodyRequest(const SetRateAttitudeAngularVelocityBodyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
}

void SetRateAttitudeAngularVelocityBodyRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateAttitudeAngularVelocityBodyRequest::~SetRateAttitudeAngularVelocityBodyRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  SharedDtor();
}

void SetRateAttitudeAngularVelocityBodyRequest::SharedDtor() {
}

void SetRateAttitudeAngularVelocityBodyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateAttitudeAngularVelocityBodyRequest& SetRateAttitudeAngularVelocityBodyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateAttitudeAngularVelocityBodyRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateAttitudeAngularVelocityBodyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateAttitudeAngularVelocityBodyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateAttitudeAngularVelocityBodyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  return target;
}

size_t SetRateAttitudeAngularVelocityBodyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateAttitudeAngularVelocityBodyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateAttitudeAngularVelocityBodyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateAttitudeAngularVelocityBodyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
    MergeFrom(*source);
  }
}

void SetRateAttitudeAngularVelocityBodyRequest::MergeFrom(const SetRateAttitudeAngularVelocityBodyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateAttitudeAngularVelocityBodyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateAttitudeAngularVelocityBodyRequest::CopyFrom(const SetRateAttitudeAngularVelocityBodyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateAttitudeAngularVelocityBodyRequest::IsInitialized() const {
  return true;
}

void SetRateAttitudeAngularVelocityBodyRequest::InternalSwap(SetRateAttitudeAngularVelocityBodyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateAttitudeAngularVelocityBodyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateAttitudeAngularVelocityBodyResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateAttitudeAngularVelocityBodyResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateAttitudeAngularVelocityBodyResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateAttitudeAngularVelocityBodyResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateAttitudeAngularVelocityBodyResponse::_Internal::telemetry_result(const SetRateAttitudeAngularVelocityBodyResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateAttitudeAngularVelocityBodyResponse::SetRateAttitudeAngularVelocityBodyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
}
SetRateAttitudeAngularVelocityBodyResponse::SetRateAttitudeAngularVelocityBodyResponse(const SetRateAttitudeAngularVelocityBodyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
}

void SetRateAttitudeAngularVelocityBodyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateAttitudeAngularVelocityBodyResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateAttitudeAngularVelocityBodyResponse::~SetRateAttitudeAngularVelocityBodyResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  SharedDtor();
}

void SetRateAttitudeAngularVelocityBodyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateAttitudeAngularVelocityBodyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateAttitudeAngularVelocityBodyResponse& SetRateAttitudeAngularVelocityBodyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateAttitudeAngularVelocityBodyResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateAttitudeAngularVelocityBodyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateAttitudeAngularVelocityBodyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateAttitudeAngularVelocityBodyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  return target;
}

size_t SetRateAttitudeAngularVelocityBodyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateAttitudeAngularVelocityBodyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateAttitudeAngularVelocityBodyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateAttitudeAngularVelocityBodyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
    MergeFrom(*source);
  }
}

void SetRateAttitudeAngularVelocityBodyResponse::MergeFrom(const SetRateAttitudeAngularVelocityBodyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateAttitudeAngularVelocityBodyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateAttitudeAngularVelocityBodyResponse::CopyFrom(const SetRateAttitudeAngularVelocityBodyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateAttitudeAngularVelocityBodyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateAttitudeAngularVelocityBodyResponse::IsInitialized() const {
  return true;
}

void SetRateAttitudeAngularVelocityBodyResponse::InternalSwap(SetRateAttitudeAngularVelocityBodyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateAttitudeAngularVelocityBodyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateCameraAttitudeQuaternionRequest::InitAsDefaultInstance() {
}
class SetRateCameraAttitudeQuaternionRequest::_Internal {
 public:
};

SetRateCameraAttitudeQuaternionRequest::SetRateCameraAttitudeQuaternionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
}
SetRateCameraAttitudeQuaternionRequest::SetRateCameraAttitudeQuaternionRequest(const SetRateCameraAttitudeQuaternionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
}

void SetRateCameraAttitudeQuaternionRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateCameraAttitudeQuaternionRequest::~SetRateCameraAttitudeQuaternionRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  SharedDtor();
}

void SetRateCameraAttitudeQuaternionRequest::SharedDtor() {
}

void SetRateCameraAttitudeQuaternionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateCameraAttitudeQuaternionRequest& SetRateCameraAttitudeQuaternionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateCameraAttitudeQuaternionRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateCameraAttitudeQuaternionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateCameraAttitudeQuaternionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateCameraAttitudeQuaternionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  return target;
}

size_t SetRateCameraAttitudeQuaternionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateCameraAttitudeQuaternionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateCameraAttitudeQuaternionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateCameraAttitudeQuaternionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
    MergeFrom(*source);
  }
}

void SetRateCameraAttitudeQuaternionRequest::MergeFrom(const SetRateCameraAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateCameraAttitudeQuaternionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateCameraAttitudeQuaternionRequest::CopyFrom(const SetRateCameraAttitudeQuaternionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateCameraAttitudeQuaternionRequest::IsInitialized() const {
  return true;
}

void SetRateCameraAttitudeQuaternionRequest::InternalSwap(SetRateCameraAttitudeQuaternionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateCameraAttitudeQuaternionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateCameraAttitudeQuaternionResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateCameraAttitudeQuaternionResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateCameraAttitudeQuaternionResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateCameraAttitudeQuaternionResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateCameraAttitudeQuaternionResponse::_Internal::telemetry_result(const SetRateCameraAttitudeQuaternionResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateCameraAttitudeQuaternionResponse::SetRateCameraAttitudeQuaternionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
}
SetRateCameraAttitudeQuaternionResponse::SetRateCameraAttitudeQuaternionResponse(const SetRateCameraAttitudeQuaternionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
}

void SetRateCameraAttitudeQuaternionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateCameraAttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateCameraAttitudeQuaternionResponse::~SetRateCameraAttitudeQuaternionResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  SharedDtor();
}

void SetRateCameraAttitudeQuaternionResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateCameraAttitudeQuaternionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateCameraAttitudeQuaternionResponse& SetRateCameraAttitudeQuaternionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateCameraAttitudeQuaternionResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateCameraAttitudeQuaternionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateCameraAttitudeQuaternionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateCameraAttitudeQuaternionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  return target;
}

size_t SetRateCameraAttitudeQuaternionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateCameraAttitudeQuaternionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateCameraAttitudeQuaternionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateCameraAttitudeQuaternionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
    MergeFrom(*source);
  }
}

void SetRateCameraAttitudeQuaternionResponse::MergeFrom(const SetRateCameraAttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateCameraAttitudeQuaternionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateCameraAttitudeQuaternionResponse::CopyFrom(const SetRateCameraAttitudeQuaternionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeQuaternionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateCameraAttitudeQuaternionResponse::IsInitialized() const {
  return true;
}

void SetRateCameraAttitudeQuaternionResponse::InternalSwap(SetRateCameraAttitudeQuaternionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateCameraAttitudeQuaternionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateCameraAttitudeRequest::InitAsDefaultInstance() {
}
class SetRateCameraAttitudeRequest::_Internal {
 public:
};

SetRateCameraAttitudeRequest::SetRateCameraAttitudeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
}
SetRateCameraAttitudeRequest::SetRateCameraAttitudeRequest(const SetRateCameraAttitudeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
}

void SetRateCameraAttitudeRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateCameraAttitudeRequest::~SetRateCameraAttitudeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  SharedDtor();
}

void SetRateCameraAttitudeRequest::SharedDtor() {
}

void SetRateCameraAttitudeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateCameraAttitudeRequest& SetRateCameraAttitudeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateCameraAttitudeRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateCameraAttitudeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateCameraAttitudeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateCameraAttitudeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  return target;
}

size_t SetRateCameraAttitudeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateCameraAttitudeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateCameraAttitudeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateCameraAttitudeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
    MergeFrom(*source);
  }
}

void SetRateCameraAttitudeRequest::MergeFrom(const SetRateCameraAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateCameraAttitudeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateCameraAttitudeRequest::CopyFrom(const SetRateCameraAttitudeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateCameraAttitudeRequest::IsInitialized() const {
  return true;
}

void SetRateCameraAttitudeRequest::InternalSwap(SetRateCameraAttitudeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateCameraAttitudeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateCameraAttitudeResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateCameraAttitudeResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateCameraAttitudeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateCameraAttitudeResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateCameraAttitudeResponse::_Internal::telemetry_result(const SetRateCameraAttitudeResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateCameraAttitudeResponse::SetRateCameraAttitudeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
}
SetRateCameraAttitudeResponse::SetRateCameraAttitudeResponse(const SetRateCameraAttitudeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
}

void SetRateCameraAttitudeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateCameraAttitudeResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateCameraAttitudeResponse::~SetRateCameraAttitudeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  SharedDtor();
}

void SetRateCameraAttitudeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateCameraAttitudeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateCameraAttitudeResponse& SetRateCameraAttitudeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateCameraAttitudeResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateCameraAttitudeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateCameraAttitudeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateCameraAttitudeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  return target;
}

size_t SetRateCameraAttitudeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateCameraAttitudeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateCameraAttitudeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateCameraAttitudeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
    MergeFrom(*source);
  }
}

void SetRateCameraAttitudeResponse::MergeFrom(const SetRateCameraAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateCameraAttitudeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateCameraAttitudeResponse::CopyFrom(const SetRateCameraAttitudeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateCameraAttitudeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateCameraAttitudeResponse::IsInitialized() const {
  return true;
}

void SetRateCameraAttitudeResponse::InternalSwap(SetRateCameraAttitudeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateCameraAttitudeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateGroundSpeedNedRequest::InitAsDefaultInstance() {
}
class SetRateGroundSpeedNedRequest::_Internal {
 public:
};

SetRateGroundSpeedNedRequest::SetRateGroundSpeedNedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
}
SetRateGroundSpeedNedRequest::SetRateGroundSpeedNedRequest(const SetRateGroundSpeedNedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
}

void SetRateGroundSpeedNedRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateGroundSpeedNedRequest::~SetRateGroundSpeedNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
  SharedDtor();
}

void SetRateGroundSpeedNedRequest::SharedDtor() {
}

void SetRateGroundSpeedNedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateGroundSpeedNedRequest& SetRateGroundSpeedNedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateGroundSpeedNedRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateGroundSpeedNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateGroundSpeedNedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateGroundSpeedNedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
  return target;
}

size_t SetRateGroundSpeedNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateGroundSpeedNedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateGroundSpeedNedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateGroundSpeedNedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
    MergeFrom(*source);
  }
}

void SetRateGroundSpeedNedRequest::MergeFrom(const SetRateGroundSpeedNedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateGroundSpeedNedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateGroundSpeedNedRequest::CopyFrom(const SetRateGroundSpeedNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateGroundSpeedNedRequest::IsInitialized() const {
  return true;
}

void SetRateGroundSpeedNedRequest::InternalSwap(SetRateGroundSpeedNedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateGroundSpeedNedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateGroundSpeedNedResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateGroundSpeedNedResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateGroundSpeedNedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateGroundSpeedNedResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateGroundSpeedNedResponse::_Internal::telemetry_result(const SetRateGroundSpeedNedResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateGroundSpeedNedResponse::SetRateGroundSpeedNedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
}
SetRateGroundSpeedNedResponse::SetRateGroundSpeedNedResponse(const SetRateGroundSpeedNedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
}

void SetRateGroundSpeedNedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateGroundSpeedNedResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateGroundSpeedNedResponse::~SetRateGroundSpeedNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
  SharedDtor();
}

void SetRateGroundSpeedNedResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateGroundSpeedNedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateGroundSpeedNedResponse& SetRateGroundSpeedNedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateGroundSpeedNedResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateGroundSpeedNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateGroundSpeedNedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateGroundSpeedNedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
  return target;
}

size_t SetRateGroundSpeedNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateGroundSpeedNedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateGroundSpeedNedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateGroundSpeedNedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
    MergeFrom(*source);
  }
}

void SetRateGroundSpeedNedResponse::MergeFrom(const SetRateGroundSpeedNedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateGroundSpeedNedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateGroundSpeedNedResponse::CopyFrom(const SetRateGroundSpeedNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundSpeedNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateGroundSpeedNedResponse::IsInitialized() const {
  return true;
}

void SetRateGroundSpeedNedResponse::InternalSwap(SetRateGroundSpeedNedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateGroundSpeedNedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateGpsInfoRequest::InitAsDefaultInstance() {
}
class SetRateGpsInfoRequest::_Internal {
 public:
};

SetRateGpsInfoRequest::SetRateGpsInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
}
SetRateGpsInfoRequest::SetRateGpsInfoRequest(const SetRateGpsInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
}

void SetRateGpsInfoRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateGpsInfoRequest::~SetRateGpsInfoRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  SharedDtor();
}

void SetRateGpsInfoRequest::SharedDtor() {
}

void SetRateGpsInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateGpsInfoRequest& SetRateGpsInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateGpsInfoRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateGpsInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateGpsInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateGpsInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  return target;
}

size_t SetRateGpsInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateGpsInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateGpsInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateGpsInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
    MergeFrom(*source);
  }
}

void SetRateGpsInfoRequest::MergeFrom(const SetRateGpsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateGpsInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateGpsInfoRequest::CopyFrom(const SetRateGpsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateGpsInfoRequest::IsInitialized() const {
  return true;
}

void SetRateGpsInfoRequest::InternalSwap(SetRateGpsInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateGpsInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateGpsInfoResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateGpsInfoResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateGpsInfoResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateGpsInfoResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateGpsInfoResponse::_Internal::telemetry_result(const SetRateGpsInfoResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateGpsInfoResponse::SetRateGpsInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
}
SetRateGpsInfoResponse::SetRateGpsInfoResponse(const SetRateGpsInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
}

void SetRateGpsInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateGpsInfoResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateGpsInfoResponse::~SetRateGpsInfoResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  SharedDtor();
}

void SetRateGpsInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateGpsInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateGpsInfoResponse& SetRateGpsInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateGpsInfoResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateGpsInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateGpsInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateGpsInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  return target;
}

size_t SetRateGpsInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateGpsInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateGpsInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateGpsInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
    MergeFrom(*source);
  }
}

void SetRateGpsInfoResponse::MergeFrom(const SetRateGpsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateGpsInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateGpsInfoResponse::CopyFrom(const SetRateGpsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGpsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateGpsInfoResponse::IsInitialized() const {
  return true;
}

void SetRateGpsInfoResponse::InternalSwap(SetRateGpsInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateGpsInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateBatteryRequest::InitAsDefaultInstance() {
}
class SetRateBatteryRequest::_Internal {
 public:
};

SetRateBatteryRequest::SetRateBatteryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateBatteryRequest)
}
SetRateBatteryRequest::SetRateBatteryRequest(const SetRateBatteryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateBatteryRequest)
}

void SetRateBatteryRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateBatteryRequest::~SetRateBatteryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  SharedDtor();
}

void SetRateBatteryRequest::SharedDtor() {
}

void SetRateBatteryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateBatteryRequest& SetRateBatteryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateBatteryRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateBatteryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateBatteryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateBatteryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  return target;
}

size_t SetRateBatteryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateBatteryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateBatteryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateBatteryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateBatteryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateBatteryRequest)
    MergeFrom(*source);
  }
}

void SetRateBatteryRequest::MergeFrom(const SetRateBatteryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateBatteryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateBatteryRequest::CopyFrom(const SetRateBatteryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateBatteryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateBatteryRequest::IsInitialized() const {
  return true;
}

void SetRateBatteryRequest::InternalSwap(SetRateBatteryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateBatteryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateBatteryResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateBatteryResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateBatteryResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateBatteryResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateBatteryResponse::_Internal::telemetry_result(const SetRateBatteryResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateBatteryResponse::SetRateBatteryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateBatteryResponse)
}
SetRateBatteryResponse::SetRateBatteryResponse(const SetRateBatteryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateBatteryResponse)
}

void SetRateBatteryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateBatteryResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateBatteryResponse::~SetRateBatteryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  SharedDtor();
}

void SetRateBatteryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateBatteryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateBatteryResponse& SetRateBatteryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateBatteryResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateBatteryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateBatteryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateBatteryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  return target;
}

size_t SetRateBatteryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateBatteryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateBatteryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateBatteryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateBatteryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateBatteryResponse)
    MergeFrom(*source);
  }
}

void SetRateBatteryResponse::MergeFrom(const SetRateBatteryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateBatteryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateBatteryResponse::CopyFrom(const SetRateBatteryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateBatteryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateBatteryResponse::IsInitialized() const {
  return true;
}

void SetRateBatteryResponse::InternalSwap(SetRateBatteryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateBatteryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateRcStatusRequest::InitAsDefaultInstance() {
}
class SetRateRcStatusRequest::_Internal {
 public:
};

SetRateRcStatusRequest::SetRateRcStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
}
SetRateRcStatusRequest::SetRateRcStatusRequest(const SetRateRcStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
}

void SetRateRcStatusRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateRcStatusRequest::~SetRateRcStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  SharedDtor();
}

void SetRateRcStatusRequest::SharedDtor() {
}

void SetRateRcStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateRcStatusRequest& SetRateRcStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateRcStatusRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateRcStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateRcStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateRcStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  return target;
}

size_t SetRateRcStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateRcStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateRcStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateRcStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
    MergeFrom(*source);
  }
}

void SetRateRcStatusRequest::MergeFrom(const SetRateRcStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateRcStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateRcStatusRequest::CopyFrom(const SetRateRcStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateRcStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateRcStatusRequest::IsInitialized() const {
  return true;
}

void SetRateRcStatusRequest::InternalSwap(SetRateRcStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateRcStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateRcStatusResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateRcStatusResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateRcStatusResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateRcStatusResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateRcStatusResponse::_Internal::telemetry_result(const SetRateRcStatusResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateRcStatusResponse::SetRateRcStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
}
SetRateRcStatusResponse::SetRateRcStatusResponse(const SetRateRcStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
}

void SetRateRcStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateRcStatusResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateRcStatusResponse::~SetRateRcStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  SharedDtor();
}

void SetRateRcStatusResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateRcStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateRcStatusResponse& SetRateRcStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateRcStatusResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateRcStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateRcStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateRcStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  return target;
}

size_t SetRateRcStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateRcStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateRcStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateRcStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
    MergeFrom(*source);
  }
}

void SetRateRcStatusResponse::MergeFrom(const SetRateRcStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateRcStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateRcStatusResponse::CopyFrom(const SetRateRcStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateRcStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateRcStatusResponse::IsInitialized() const {
  return true;
}

void SetRateRcStatusResponse::InternalSwap(SetRateRcStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateRcStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateActuatorControlTargetRequest::InitAsDefaultInstance() {
}
class SetRateActuatorControlTargetRequest::_Internal {
 public:
};

SetRateActuatorControlTargetRequest::SetRateActuatorControlTargetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
}
SetRateActuatorControlTargetRequest::SetRateActuatorControlTargetRequest(const SetRateActuatorControlTargetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
}

void SetRateActuatorControlTargetRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateActuatorControlTargetRequest::~SetRateActuatorControlTargetRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  SharedDtor();
}

void SetRateActuatorControlTargetRequest::SharedDtor() {
}

void SetRateActuatorControlTargetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateActuatorControlTargetRequest& SetRateActuatorControlTargetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateActuatorControlTargetRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateActuatorControlTargetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateActuatorControlTargetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateActuatorControlTargetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  return target;
}

size_t SetRateActuatorControlTargetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateActuatorControlTargetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateActuatorControlTargetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateActuatorControlTargetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
    MergeFrom(*source);
  }
}

void SetRateActuatorControlTargetRequest::MergeFrom(const SetRateActuatorControlTargetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateActuatorControlTargetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateActuatorControlTargetRequest::CopyFrom(const SetRateActuatorControlTargetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateActuatorControlTargetRequest::IsInitialized() const {
  return true;
}

void SetRateActuatorControlTargetRequest::InternalSwap(SetRateActuatorControlTargetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateActuatorControlTargetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateActuatorControlTargetResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateActuatorControlTargetResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateActuatorControlTargetResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateActuatorControlTargetResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateActuatorControlTargetResponse::_Internal::telemetry_result(const SetRateActuatorControlTargetResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateActuatorControlTargetResponse::SetRateActuatorControlTargetResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
}
SetRateActuatorControlTargetResponse::SetRateActuatorControlTargetResponse(const SetRateActuatorControlTargetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
}

void SetRateActuatorControlTargetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateActuatorControlTargetResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateActuatorControlTargetResponse::~SetRateActuatorControlTargetResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  SharedDtor();
}

void SetRateActuatorControlTargetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateActuatorControlTargetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateActuatorControlTargetResponse& SetRateActuatorControlTargetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateActuatorControlTargetResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateActuatorControlTargetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateActuatorControlTargetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateActuatorControlTargetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  return target;
}

size_t SetRateActuatorControlTargetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateActuatorControlTargetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateActuatorControlTargetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateActuatorControlTargetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
    MergeFrom(*source);
  }
}

void SetRateActuatorControlTargetResponse::MergeFrom(const SetRateActuatorControlTargetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateActuatorControlTargetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateActuatorControlTargetResponse::CopyFrom(const SetRateActuatorControlTargetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorControlTargetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateActuatorControlTargetResponse::IsInitialized() const {
  return true;
}

void SetRateActuatorControlTargetResponse::InternalSwap(SetRateActuatorControlTargetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateActuatorControlTargetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateActuatorOutputStatusRequest::InitAsDefaultInstance() {
}
class SetRateActuatorOutputStatusRequest::_Internal {
 public:
};

SetRateActuatorOutputStatusRequest::SetRateActuatorOutputStatusRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
}
SetRateActuatorOutputStatusRequest::SetRateActuatorOutputStatusRequest(const SetRateActuatorOutputStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
}

void SetRateActuatorOutputStatusRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateActuatorOutputStatusRequest::~SetRateActuatorOutputStatusRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  SharedDtor();
}

void SetRateActuatorOutputStatusRequest::SharedDtor() {
}

void SetRateActuatorOutputStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateActuatorOutputStatusRequest& SetRateActuatorOutputStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateActuatorOutputStatusRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateActuatorOutputStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateActuatorOutputStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateActuatorOutputStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  return target;
}

size_t SetRateActuatorOutputStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateActuatorOutputStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateActuatorOutputStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateActuatorOutputStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
    MergeFrom(*source);
  }
}

void SetRateActuatorOutputStatusRequest::MergeFrom(const SetRateActuatorOutputStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateActuatorOutputStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateActuatorOutputStatusRequest::CopyFrom(const SetRateActuatorOutputStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateActuatorOutputStatusRequest::IsInitialized() const {
  return true;
}

void SetRateActuatorOutputStatusRequest::InternalSwap(SetRateActuatorOutputStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateActuatorOutputStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateActuatorOutputStatusResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateActuatorOutputStatusResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateActuatorOutputStatusResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateActuatorOutputStatusResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateActuatorOutputStatusResponse::_Internal::telemetry_result(const SetRateActuatorOutputStatusResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateActuatorOutputStatusResponse::SetRateActuatorOutputStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
}
SetRateActuatorOutputStatusResponse::SetRateActuatorOutputStatusResponse(const SetRateActuatorOutputStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
}

void SetRateActuatorOutputStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateActuatorOutputStatusResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateActuatorOutputStatusResponse::~SetRateActuatorOutputStatusResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  SharedDtor();
}

void SetRateActuatorOutputStatusResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateActuatorOutputStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateActuatorOutputStatusResponse& SetRateActuatorOutputStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateActuatorOutputStatusResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateActuatorOutputStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateActuatorOutputStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateActuatorOutputStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  return target;
}

size_t SetRateActuatorOutputStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateActuatorOutputStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateActuatorOutputStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateActuatorOutputStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
    MergeFrom(*source);
  }
}

void SetRateActuatorOutputStatusResponse::MergeFrom(const SetRateActuatorOutputStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateActuatorOutputStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateActuatorOutputStatusResponse::CopyFrom(const SetRateActuatorOutputStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateActuatorOutputStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateActuatorOutputStatusResponse::IsInitialized() const {
  return true;
}

void SetRateActuatorOutputStatusResponse::InternalSwap(SetRateActuatorOutputStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateActuatorOutputStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateOdometryRequest::InitAsDefaultInstance() {
}
class SetRateOdometryRequest::_Internal {
 public:
};

SetRateOdometryRequest::SetRateOdometryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateOdometryRequest)
}
SetRateOdometryRequest::SetRateOdometryRequest(const SetRateOdometryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateOdometryRequest)
}

void SetRateOdometryRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateOdometryRequest::~SetRateOdometryRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  SharedDtor();
}

void SetRateOdometryRequest::SharedDtor() {
}

void SetRateOdometryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateOdometryRequest& SetRateOdometryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateOdometryRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateOdometryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateOdometryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateOdometryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  return target;
}

size_t SetRateOdometryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateOdometryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateOdometryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateOdometryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateOdometryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateOdometryRequest)
    MergeFrom(*source);
  }
}

void SetRateOdometryRequest::MergeFrom(const SetRateOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateOdometryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateOdometryRequest::CopyFrom(const SetRateOdometryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateOdometryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateOdometryRequest::IsInitialized() const {
  return true;
}

void SetRateOdometryRequest::InternalSwap(SetRateOdometryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateOdometryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateOdometryResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateOdometryResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateOdometryResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateOdometryResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateOdometryResponse::_Internal::telemetry_result(const SetRateOdometryResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateOdometryResponse::SetRateOdometryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateOdometryResponse)
}
SetRateOdometryResponse::SetRateOdometryResponse(const SetRateOdometryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateOdometryResponse)
}

void SetRateOdometryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateOdometryResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateOdometryResponse::~SetRateOdometryResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  SharedDtor();
}

void SetRateOdometryResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateOdometryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateOdometryResponse& SetRateOdometryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateOdometryResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateOdometryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateOdometryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateOdometryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  return target;
}

size_t SetRateOdometryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateOdometryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateOdometryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateOdometryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateOdometryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateOdometryResponse)
    MergeFrom(*source);
  }
}

void SetRateOdometryResponse::MergeFrom(const SetRateOdometryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateOdometryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateOdometryResponse::CopyFrom(const SetRateOdometryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateOdometryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateOdometryResponse::IsInitialized() const {
  return true;
}

void SetRateOdometryResponse::InternalSwap(SetRateOdometryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateOdometryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRatePositionVelocityNedRequest::InitAsDefaultInstance() {
}
class SetRatePositionVelocityNedRequest::_Internal {
 public:
};

SetRatePositionVelocityNedRequest::SetRatePositionVelocityNedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
}
SetRatePositionVelocityNedRequest::SetRatePositionVelocityNedRequest(const SetRatePositionVelocityNedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
}

void SetRatePositionVelocityNedRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRatePositionVelocityNedRequest::~SetRatePositionVelocityNedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  SharedDtor();
}

void SetRatePositionVelocityNedRequest::SharedDtor() {
}

void SetRatePositionVelocityNedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRatePositionVelocityNedRequest& SetRatePositionVelocityNedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRatePositionVelocityNedRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRatePositionVelocityNedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRatePositionVelocityNedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRatePositionVelocityNedRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  return target;
}

size_t SetRatePositionVelocityNedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRatePositionVelocityNedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRatePositionVelocityNedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRatePositionVelocityNedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
    MergeFrom(*source);
  }
}

void SetRatePositionVelocityNedRequest::MergeFrom(const SetRatePositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRatePositionVelocityNedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRatePositionVelocityNedRequest::CopyFrom(const SetRatePositionVelocityNedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRatePositionVelocityNedRequest::IsInitialized() const {
  return true;
}

void SetRatePositionVelocityNedRequest::InternalSwap(SetRatePositionVelocityNedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRatePositionVelocityNedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRatePositionVelocityNedResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRatePositionVelocityNedResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRatePositionVelocityNedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRatePositionVelocityNedResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRatePositionVelocityNedResponse::_Internal::telemetry_result(const SetRatePositionVelocityNedResponse* msg) {
  return *msg->telemetry_result_;
}
SetRatePositionVelocityNedResponse::SetRatePositionVelocityNedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
}
SetRatePositionVelocityNedResponse::SetRatePositionVelocityNedResponse(const SetRatePositionVelocityNedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
}

void SetRatePositionVelocityNedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRatePositionVelocityNedResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRatePositionVelocityNedResponse::~SetRatePositionVelocityNedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  SharedDtor();
}

void SetRatePositionVelocityNedResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRatePositionVelocityNedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRatePositionVelocityNedResponse& SetRatePositionVelocityNedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRatePositionVelocityNedResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRatePositionVelocityNedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRatePositionVelocityNedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRatePositionVelocityNedResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  return target;
}

size_t SetRatePositionVelocityNedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRatePositionVelocityNedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRatePositionVelocityNedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRatePositionVelocityNedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
    MergeFrom(*source);
  }
}

void SetRatePositionVelocityNedResponse::MergeFrom(const SetRatePositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRatePositionVelocityNedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRatePositionVelocityNedResponse::CopyFrom(const SetRatePositionVelocityNedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRatePositionVelocityNedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRatePositionVelocityNedResponse::IsInitialized() const {
  return true;
}

void SetRatePositionVelocityNedResponse::InternalSwap(SetRatePositionVelocityNedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRatePositionVelocityNedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateGroundTruthRequest::InitAsDefaultInstance() {
}
class SetRateGroundTruthRequest::_Internal {
 public:
};

SetRateGroundTruthRequest::SetRateGroundTruthRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
}
SetRateGroundTruthRequest::SetRateGroundTruthRequest(const SetRateGroundTruthRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
}

void SetRateGroundTruthRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateGroundTruthRequest::~SetRateGroundTruthRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  SharedDtor();
}

void SetRateGroundTruthRequest::SharedDtor() {
}

void SetRateGroundTruthRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateGroundTruthRequest& SetRateGroundTruthRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateGroundTruthRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateGroundTruthRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateGroundTruthRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateGroundTruthRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  return target;
}

size_t SetRateGroundTruthRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateGroundTruthRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateGroundTruthRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateGroundTruthRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
    MergeFrom(*source);
  }
}

void SetRateGroundTruthRequest::MergeFrom(const SetRateGroundTruthRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateGroundTruthRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateGroundTruthRequest::CopyFrom(const SetRateGroundTruthRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateGroundTruthRequest::IsInitialized() const {
  return true;
}

void SetRateGroundTruthRequest::InternalSwap(SetRateGroundTruthRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateGroundTruthRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateGroundTruthResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateGroundTruthResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateGroundTruthResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateGroundTruthResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateGroundTruthResponse::_Internal::telemetry_result(const SetRateGroundTruthResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateGroundTruthResponse::SetRateGroundTruthResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
}
SetRateGroundTruthResponse::SetRateGroundTruthResponse(const SetRateGroundTruthResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
}

void SetRateGroundTruthResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateGroundTruthResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateGroundTruthResponse::~SetRateGroundTruthResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  SharedDtor();
}

void SetRateGroundTruthResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateGroundTruthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateGroundTruthResponse& SetRateGroundTruthResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateGroundTruthResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateGroundTruthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateGroundTruthResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateGroundTruthResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  return target;
}

size_t SetRateGroundTruthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateGroundTruthResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateGroundTruthResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateGroundTruthResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
    MergeFrom(*source);
  }
}

void SetRateGroundTruthResponse::MergeFrom(const SetRateGroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateGroundTruthResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateGroundTruthResponse::CopyFrom(const SetRateGroundTruthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateGroundTruthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateGroundTruthResponse::IsInitialized() const {
  return true;
}

void SetRateGroundTruthResponse::InternalSwap(SetRateGroundTruthResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateGroundTruthResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateFixedwingMetricsRequest::InitAsDefaultInstance() {
}
class SetRateFixedwingMetricsRequest::_Internal {
 public:
};

SetRateFixedwingMetricsRequest::SetRateFixedwingMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
}
SetRateFixedwingMetricsRequest::SetRateFixedwingMetricsRequest(const SetRateFixedwingMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
}

void SetRateFixedwingMetricsRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateFixedwingMetricsRequest::~SetRateFixedwingMetricsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  SharedDtor();
}

void SetRateFixedwingMetricsRequest::SharedDtor() {
}

void SetRateFixedwingMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateFixedwingMetricsRequest& SetRateFixedwingMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateFixedwingMetricsRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateFixedwingMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateFixedwingMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateFixedwingMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  return target;
}

size_t SetRateFixedwingMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateFixedwingMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateFixedwingMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateFixedwingMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
    MergeFrom(*source);
  }
}

void SetRateFixedwingMetricsRequest::MergeFrom(const SetRateFixedwingMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateFixedwingMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateFixedwingMetricsRequest::CopyFrom(const SetRateFixedwingMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateFixedwingMetricsRequest::IsInitialized() const {
  return true;
}

void SetRateFixedwingMetricsRequest::InternalSwap(SetRateFixedwingMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateFixedwingMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateFixedwingMetricsResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateFixedwingMetricsResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateFixedwingMetricsResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateFixedwingMetricsResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateFixedwingMetricsResponse::_Internal::telemetry_result(const SetRateFixedwingMetricsResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateFixedwingMetricsResponse::SetRateFixedwingMetricsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
}
SetRateFixedwingMetricsResponse::SetRateFixedwingMetricsResponse(const SetRateFixedwingMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
}

void SetRateFixedwingMetricsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateFixedwingMetricsResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateFixedwingMetricsResponse::~SetRateFixedwingMetricsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  SharedDtor();
}

void SetRateFixedwingMetricsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateFixedwingMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateFixedwingMetricsResponse& SetRateFixedwingMetricsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateFixedwingMetricsResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateFixedwingMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateFixedwingMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateFixedwingMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  return target;
}

size_t SetRateFixedwingMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateFixedwingMetricsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateFixedwingMetricsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateFixedwingMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
    MergeFrom(*source);
  }
}

void SetRateFixedwingMetricsResponse::MergeFrom(const SetRateFixedwingMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateFixedwingMetricsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateFixedwingMetricsResponse::CopyFrom(const SetRateFixedwingMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateFixedwingMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateFixedwingMetricsResponse::IsInitialized() const {
  return true;
}

void SetRateFixedwingMetricsResponse::InternalSwap(SetRateFixedwingMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateFixedwingMetricsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateImuRequest::InitAsDefaultInstance() {
}
class SetRateImuRequest::_Internal {
 public:
};

SetRateImuRequest::SetRateImuRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateImuRequest)
}
SetRateImuRequest::SetRateImuRequest(const SetRateImuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateImuRequest)
}

void SetRateImuRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateImuRequest::~SetRateImuRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateImuRequest)
  SharedDtor();
}

void SetRateImuRequest::SharedDtor() {
}

void SetRateImuRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateImuRequest& SetRateImuRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateImuRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateImuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateImuRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateImuRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateImuRequest)
  return target;
}

size_t SetRateImuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateImuRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateImuRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateImuRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateImuRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateImuRequest)
    MergeFrom(*source);
  }
}

void SetRateImuRequest::MergeFrom(const SetRateImuRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateImuRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateImuRequest::CopyFrom(const SetRateImuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateImuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateImuRequest::IsInitialized() const {
  return true;
}

void SetRateImuRequest::InternalSwap(SetRateImuRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateImuRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateImuResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateImuResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateImuResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateImuResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateImuResponse::_Internal::telemetry_result(const SetRateImuResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateImuResponse::SetRateImuResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateImuResponse)
}
SetRateImuResponse::SetRateImuResponse(const SetRateImuResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateImuResponse)
}

void SetRateImuResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateImuResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateImuResponse::~SetRateImuResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateImuResponse)
  SharedDtor();
}

void SetRateImuResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateImuResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateImuResponse& SetRateImuResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateImuResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateImuResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateImuResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateImuResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateImuResponse)
  return target;
}

size_t SetRateImuResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateImuResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateImuResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateImuResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateImuResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateImuResponse)
    MergeFrom(*source);
  }
}

void SetRateImuResponse::MergeFrom(const SetRateImuResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateImuResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateImuResponse::CopyFrom(const SetRateImuResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateImuResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateImuResponse::IsInitialized() const {
  return true;
}

void SetRateImuResponse::InternalSwap(SetRateImuResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateImuResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateUnixEpochTimeRequest::InitAsDefaultInstance() {
}
class SetRateUnixEpochTimeRequest::_Internal {
 public:
};

SetRateUnixEpochTimeRequest::SetRateUnixEpochTimeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
}
SetRateUnixEpochTimeRequest::SetRateUnixEpochTimeRequest(const SetRateUnixEpochTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rate_hz_ = from.rate_hz_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
}

void SetRateUnixEpochTimeRequest::SharedCtor() {
  rate_hz_ = 0;
}

SetRateUnixEpochTimeRequest::~SetRateUnixEpochTimeRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  SharedDtor();
}

void SetRateUnixEpochTimeRequest::SharedDtor() {
}

void SetRateUnixEpochTimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateUnixEpochTimeRequest& SetRateUnixEpochTimeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateUnixEpochTimeRequest_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateUnixEpochTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rate_hz_ = 0;
  _internal_metadata_.Clear();
}

const char* SetRateUnixEpochTimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rate_hz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rate_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateUnixEpochTimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rate_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  return target;
}

size_t SetRateUnixEpochTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rate_hz = 1;
  if (!(this->rate_hz() <= 0 && this->rate_hz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateUnixEpochTimeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateUnixEpochTimeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateUnixEpochTimeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
    MergeFrom(*source);
  }
}

void SetRateUnixEpochTimeRequest::MergeFrom(const SetRateUnixEpochTimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rate_hz() <= 0 && from.rate_hz() >= 0)) {
    _internal_set_rate_hz(from._internal_rate_hz());
  }
}

void SetRateUnixEpochTimeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateUnixEpochTimeRequest::CopyFrom(const SetRateUnixEpochTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateUnixEpochTimeRequest::IsInitialized() const {
  return true;
}

void SetRateUnixEpochTimeRequest::InternalSwap(SetRateUnixEpochTimeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rate_hz_, other->rate_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateUnixEpochTimeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRateUnixEpochTimeResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_SetRateUnixEpochTimeResponse_default_instance_._instance.get_mutable()->telemetry_result_ = const_cast< ::mavsdk::rpc::telemetry::TelemetryResult*>(
      ::mavsdk::rpc::telemetry::TelemetryResult::internal_default_instance());
}
class SetRateUnixEpochTimeResponse::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::TelemetryResult& telemetry_result(const SetRateUnixEpochTimeResponse* msg);
};

const ::mavsdk::rpc::telemetry::TelemetryResult&
SetRateUnixEpochTimeResponse::_Internal::telemetry_result(const SetRateUnixEpochTimeResponse* msg) {
  return *msg->telemetry_result_;
}
SetRateUnixEpochTimeResponse::SetRateUnixEpochTimeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
}
SetRateUnixEpochTimeResponse::SetRateUnixEpochTimeResponse(const SetRateUnixEpochTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_telemetry_result()) {
    telemetry_result_ = new ::mavsdk::rpc::telemetry::TelemetryResult(*from.telemetry_result_);
  } else {
    telemetry_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
}

void SetRateUnixEpochTimeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRateUnixEpochTimeResponse_telemetry_2ftelemetry_2eproto.base);
  telemetry_result_ = nullptr;
}

SetRateUnixEpochTimeResponse::~SetRateUnixEpochTimeResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  SharedDtor();
}

void SetRateUnixEpochTimeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete telemetry_result_;
}

void SetRateUnixEpochTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRateUnixEpochTimeResponse& SetRateUnixEpochTimeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRateUnixEpochTimeResponse_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SetRateUnixEpochTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && telemetry_result_ != nullptr) {
    delete telemetry_result_;
  }
  telemetry_result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SetRateUnixEpochTimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRateUnixEpochTimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::telemetry_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  return target;
}

size_t SetRateUnixEpochTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult telemetry_result = 1;
  if (this->has_telemetry_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRateUnixEpochTimeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRateUnixEpochTimeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRateUnixEpochTimeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
    MergeFrom(*source);
  }
}

void SetRateUnixEpochTimeResponse::MergeFrom(const SetRateUnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_telemetry_result()) {
    _internal_mutable_telemetry_result()->::mavsdk::rpc::telemetry::TelemetryResult::MergeFrom(from._internal_telemetry_result());
  }
}

void SetRateUnixEpochTimeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRateUnixEpochTimeResponse::CopyFrom(const SetRateUnixEpochTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SetRateUnixEpochTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRateUnixEpochTimeResponse::IsInitialized() const {
  return true;
}

void SetRateUnixEpochTimeResponse::InternalSwap(SetRateUnixEpochTimeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(telemetry_result_, other->telemetry_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRateUnixEpochTimeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::_Internal {
 public:
};

Position::Position()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Position)
}

void Position::SharedCtor() {
  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
  _internal_metadata_.Clear();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          absolute_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          relative_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_absolute_altitude_m(), target);
  }

  // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->relative_altitude_m() <= 0 && this->relative_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_relative_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float relative_altitude_m = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->relative_altitude_m() <= 0 && this->relative_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  if (!(from.absolute_altitude_m() <= 0 && from.absolute_altitude_m() >= 0)) {
    _internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
  if (!(from.relative_altitude_m() <= 0 && from.relative_altitude_m() >= 0)) {
    _internal_set_relative_altitude_m(from._internal_relative_altitude_m());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latitude_deg_, other->latitude_deg_);
  swap(longitude_deg_, other->longitude_deg_);
  swap(absolute_altitude_m_, other->absolute_altitude_m_);
  swap(relative_altitude_m_, other->relative_altitude_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
}

void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quaternion& Quaternion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quaternion_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Quaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  // float x = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Quaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Quaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(w_, other->w_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EulerAngle::InitAsDefaultInstance() {
}
class EulerAngle::_Internal {
 public:
};

EulerAngle::EulerAngle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.EulerAngle)
}
EulerAngle::EulerAngle(const EulerAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_deg_, &from.roll_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_deg_) -
    reinterpret_cast<char*>(&roll_deg_)) + sizeof(yaw_deg_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.EulerAngle)
}

void EulerAngle::SharedCtor() {
  ::memset(&roll_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&roll_deg_)) + sizeof(yaw_deg_));
}

EulerAngle::~EulerAngle() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.EulerAngle)
  SharedDtor();
}

void EulerAngle::SharedDtor() {
}

void EulerAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EulerAngle& EulerAngle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EulerAngle_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void EulerAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.EulerAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_deg_) -
      reinterpret_cast<char*>(&roll_deg_)) + sizeof(yaw_deg_));
  _internal_metadata_.Clear();
}

const char* EulerAngle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          roll_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EulerAngle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.EulerAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->roll_deg() <= 0 && this->roll_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_deg(), target);
  }

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->pitch_deg() <= 0 && this->pitch_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_deg(), target);
  }

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.EulerAngle)
  return target;
}

size_t EulerAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.EulerAngle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->roll_deg() <= 0 && this->roll_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->pitch_deg() <= 0 && this->pitch_deg() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->yaw_deg() <= 0 && this->yaw_deg() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EulerAngle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.EulerAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const EulerAngle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EulerAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.EulerAngle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.EulerAngle)
    MergeFrom(*source);
  }
}

void EulerAngle::MergeFrom(const EulerAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.EulerAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.roll_deg() <= 0 && from.roll_deg() >= 0)) {
    _internal_set_roll_deg(from._internal_roll_deg());
  }
  if (!(from.pitch_deg() <= 0 && from.pitch_deg() >= 0)) {
    _internal_set_pitch_deg(from._internal_pitch_deg());
  }
  if (!(from.yaw_deg() <= 0 && from.yaw_deg() >= 0)) {
    _internal_set_yaw_deg(from._internal_yaw_deg());
  }
}

void EulerAngle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EulerAngle::CopyFrom(const EulerAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EulerAngle::IsInitialized() const {
  return true;
}

void EulerAngle::InternalSwap(EulerAngle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roll_deg_, other->roll_deg_);
  swap(pitch_deg_, other->pitch_deg_);
  swap(yaw_deg_, other->yaw_deg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EulerAngle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AngularVelocityBody::InitAsDefaultInstance() {
}
class AngularVelocityBody::_Internal {
 public:
};

AngularVelocityBody::AngularVelocityBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.AngularVelocityBody)
}
AngularVelocityBody::AngularVelocityBody(const AngularVelocityBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_rad_s_, &from.roll_rad_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rad_s_) -
    reinterpret_cast<char*>(&roll_rad_s_)) + sizeof(yaw_rad_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AngularVelocityBody)
}

void AngularVelocityBody::SharedCtor() {
  ::memset(&roll_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rad_s_) -
      reinterpret_cast<char*>(&roll_rad_s_)) + sizeof(yaw_rad_s_));
}

AngularVelocityBody::~AngularVelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AngularVelocityBody)
  SharedDtor();
}

void AngularVelocityBody::SharedDtor() {
}

void AngularVelocityBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AngularVelocityBody& AngularVelocityBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AngularVelocityBody_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void AngularVelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rad_s_) -
      reinterpret_cast<char*>(&roll_rad_s_)) + sizeof(yaw_rad_s_));
  _internal_metadata_.Clear();
}

const char* AngularVelocityBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          roll_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pitch_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yaw_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AngularVelocityBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->roll_rad_s() <= 0 && this->roll_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_roll_rad_s(), target);
  }

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->pitch_rad_s() <= 0 && this->pitch_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch_rad_s(), target);
  }

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->yaw_rad_s() <= 0 && this->yaw_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_rad_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AngularVelocityBody)
  return target;
}

size_t AngularVelocityBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->roll_rad_s() <= 0 && this->roll_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->pitch_rad_s() <= 0 && this->pitch_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->yaw_rad_s() <= 0 && this->yaw_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AngularVelocityBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  const AngularVelocityBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AngularVelocityBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.AngularVelocityBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.AngularVelocityBody)
    MergeFrom(*source);
  }
}

void AngularVelocityBody::MergeFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.roll_rad_s() <= 0 && from.roll_rad_s() >= 0)) {
    _internal_set_roll_rad_s(from._internal_roll_rad_s());
  }
  if (!(from.pitch_rad_s() <= 0 && from.pitch_rad_s() >= 0)) {
    _internal_set_pitch_rad_s(from._internal_pitch_rad_s());
  }
  if (!(from.yaw_rad_s() <= 0 && from.yaw_rad_s() >= 0)) {
    _internal_set_yaw_rad_s(from._internal_yaw_rad_s());
  }
}

void AngularVelocityBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngularVelocityBody::CopyFrom(const AngularVelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AngularVelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularVelocityBody::IsInitialized() const {
  return true;
}

void AngularVelocityBody::InternalSwap(AngularVelocityBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roll_rad_s_, other->roll_rad_s_);
  swap(pitch_rad_s_, other->pitch_rad_s_);
  swap(yaw_rad_s_, other->yaw_rad_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AngularVelocityBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeedNed::InitAsDefaultInstance() {
}
class SpeedNed::_Internal {
 public:
};

SpeedNed::SpeedNed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.SpeedNed)
}
SpeedNed::SpeedNed(const SpeedNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&velocity_north_m_s_, &from.velocity_north_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&velocity_down_m_s_) -
    reinterpret_cast<char*>(&velocity_north_m_s_)) + sizeof(velocity_down_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.SpeedNed)
}

void SpeedNed::SharedCtor() {
  ::memset(&velocity_north_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_down_m_s_) -
      reinterpret_cast<char*>(&velocity_north_m_s_)) + sizeof(velocity_down_m_s_));
}

SpeedNed::~SpeedNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.SpeedNed)
  SharedDtor();
}

void SpeedNed::SharedDtor() {
}

void SpeedNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedNed& SpeedNed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedNed_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void SpeedNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.SpeedNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&velocity_north_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_down_m_s_) -
      reinterpret_cast<char*>(&velocity_north_m_s_)) + sizeof(velocity_down_m_s_));
  _internal_metadata_.Clear();
}

const char* SpeedNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float velocity_north_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          velocity_north_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocity_east_m_s = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          velocity_east_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocity_down_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          velocity_down_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedNed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.SpeedNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float velocity_north_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->velocity_north_m_s() <= 0 && this->velocity_north_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_velocity_north_m_s(), target);
  }

  // float velocity_east_m_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->velocity_east_m_s() <= 0 && this->velocity_east_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_velocity_east_m_s(), target);
  }

  // float velocity_down_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->velocity_down_m_s() <= 0 && this->velocity_down_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_velocity_down_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.SpeedNed)
  return target;
}

size_t SpeedNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.SpeedNed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float velocity_north_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->velocity_north_m_s() <= 0 && this->velocity_north_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocity_east_m_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->velocity_east_m_s() <= 0 && this->velocity_east_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocity_down_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->velocity_down_m_s() <= 0 && this->velocity_down_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedNed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.SpeedNed)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedNed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedNed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.SpeedNed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.SpeedNed)
    MergeFrom(*source);
  }
}

void SpeedNed::MergeFrom(const SpeedNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.SpeedNed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.velocity_north_m_s() <= 0 && from.velocity_north_m_s() >= 0)) {
    _internal_set_velocity_north_m_s(from._internal_velocity_north_m_s());
  }
  if (!(from.velocity_east_m_s() <= 0 && from.velocity_east_m_s() >= 0)) {
    _internal_set_velocity_east_m_s(from._internal_velocity_east_m_s());
  }
  if (!(from.velocity_down_m_s() <= 0 && from.velocity_down_m_s() >= 0)) {
    _internal_set_velocity_down_m_s(from._internal_velocity_down_m_s());
  }
}

void SpeedNed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.SpeedNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedNed::CopyFrom(const SpeedNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.SpeedNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedNed::IsInitialized() const {
  return true;
}

void SpeedNed::InternalSwap(SpeedNed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(velocity_north_m_s_, other->velocity_north_m_s_);
  swap(velocity_east_m_s_, other->velocity_east_m_s_);
  swap(velocity_down_m_s_, other->velocity_down_m_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedNed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GpsInfo::InitAsDefaultInstance() {
}
class GpsInfo::_Internal {
 public:
};

GpsInfo::GpsInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.GpsInfo)
}
GpsInfo::GpsInfo(const GpsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_satellites_, &from.num_satellites_,
    static_cast<size_t>(reinterpret_cast<char*>(&fix_type_) -
    reinterpret_cast<char*>(&num_satellites_)) + sizeof(fix_type_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GpsInfo)
}

void GpsInfo::SharedCtor() {
  ::memset(&num_satellites_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fix_type_) -
      reinterpret_cast<char*>(&num_satellites_)) + sizeof(fix_type_));
}

GpsInfo::~GpsInfo() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GpsInfo)
  SharedDtor();
}

void GpsInfo::SharedDtor() {
}

void GpsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GpsInfo& GpsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GpsInfo_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void GpsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GpsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_satellites_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fix_type_) -
      reinterpret_cast<char*>(&num_satellites_)) + sizeof(fix_type_));
  _internal_metadata_.Clear();
}

const char* GpsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_satellites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.FixType fix_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_fix_type(static_cast<::mavsdk::rpc::telemetry::FixType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GpsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->num_satellites() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_satellites(), target);
  }

  // .mavsdk.rpc.telemetry.FixType fix_type = 2;
  if (this->fix_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_fix_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GpsInfo)
  return target;
}

size_t GpsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GpsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num_satellites = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->num_satellites() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_satellites());
  }

  // .mavsdk.rpc.telemetry.FixType fix_type = 2;
  if (this->fix_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fix_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.GpsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GpsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.GpsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.GpsInfo)
    MergeFrom(*source);
  }
}

void GpsInfo::MergeFrom(const GpsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GpsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_satellites() != 0) {
    _internal_set_num_satellites(from._internal_num_satellites());
  }
  if (from.fix_type() != 0) {
    _internal_set_fix_type(from._internal_fix_type());
  }
}

void GpsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.GpsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsInfo::CopyFrom(const GpsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GpsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsInfo::IsInitialized() const {
  return true;
}

void GpsInfo::InternalSwap(GpsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_satellites_, other->num_satellites_);
  swap(fix_type_, other->fix_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Battery::InitAsDefaultInstance() {
}
class Battery::_Internal {
 public:
};

Battery::Battery()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.Battery)
}
Battery::Battery(const Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&voltage_v_, &from.voltage_v_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_percent_) -
    reinterpret_cast<char*>(&voltage_v_)) + sizeof(remaining_percent_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Battery)
}

void Battery::SharedCtor() {
  ::memset(&voltage_v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_percent_) -
      reinterpret_cast<char*>(&voltage_v_)) + sizeof(remaining_percent_));
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Battery)
  SharedDtor();
}

void Battery::SharedDtor() {
}

void Battery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Battery& Battery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Battery_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&voltage_v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_percent_) -
      reinterpret_cast<char*>(&voltage_v_)) + sizeof(remaining_percent_));
  _internal_metadata_.Clear();
}

const char* Battery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          voltage_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          remaining_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Battery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->voltage_v() <= 0 && this->voltage_v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_voltage_v(), target);
  }

  // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->remaining_percent() <= 0 && this->remaining_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_remaining_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Battery)
  return target;
}

size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Battery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float voltage_v = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->voltage_v() <= 0 && this->voltage_v() >= 0)) {
    total_size += 1 + 4;
  }

  // float remaining_percent = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->remaining_percent() <= 0 && this->remaining_percent() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Battery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  const Battery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Battery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Battery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Battery)
    MergeFrom(*source);
  }
}

void Battery::MergeFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.voltage_v() <= 0 && from.voltage_v() >= 0)) {
    _internal_set_voltage_v(from._internal_voltage_v());
  }
  if (!(from.remaining_percent() <= 0 && from.remaining_percent() >= 0)) {
    _internal_set_remaining_percent(from._internal_remaining_percent());
  }
}

void Battery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {
  return true;
}

void Battery::InternalSwap(Battery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(voltage_v_, other->voltage_v_);
  swap(remaining_percent_, other->remaining_percent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Battery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Health::InitAsDefaultInstance() {
}
class Health::_Internal {
 public:
};

Health::Health()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.Health)
}
Health::Health(const Health& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_gyrometer_calibration_ok_, &from.is_gyrometer_calibration_ok_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_home_position_ok_) -
    reinterpret_cast<char*>(&is_gyrometer_calibration_ok_)) + sizeof(is_home_position_ok_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Health)
}

void Health::SharedCtor() {
  ::memset(&is_gyrometer_calibration_ok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_home_position_ok_) -
      reinterpret_cast<char*>(&is_gyrometer_calibration_ok_)) + sizeof(is_home_position_ok_));
}

Health::~Health() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Health)
  SharedDtor();
}

void Health::SharedDtor() {
}

void Health::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Health& Health::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Health_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void Health::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Health)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_gyrometer_calibration_ok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_home_position_ok_) -
      reinterpret_cast<char*>(&is_gyrometer_calibration_ok_)) + sizeof(is_home_position_ok_));
  _internal_metadata_.Clear();
}

const char* Health::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_gyrometer_calibration_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_accelerometer_calibration_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_magnetometer_calibration_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_level_calibration_ok = 4 [(.mavsdk.options.default_value) = "false"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_level_calibration_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_local_position_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_global_position_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_home_position_ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Health::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Health)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->is_gyrometer_calibration_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_gyrometer_calibration_ok(), target);
  }

  // bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->is_accelerometer_calibration_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_accelerometer_calibration_ok(), target);
  }

  // bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];
  if (this->is_magnetometer_calibration_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_magnetometer_calibration_ok(), target);
  }

  // bool is_level_calibration_ok = 4 [(.mavsdk.options.default_value) = "false"];
  if (this->is_level_calibration_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_level_calibration_ok(), target);
  }

  // bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];
  if (this->is_local_position_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_local_position_ok(), target);
  }

  // bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];
  if (this->is_global_position_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_global_position_ok(), target);
  }

  // bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];
  if (this->is_home_position_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_home_position_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Health)
  return target;
}

size_t Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Health)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->is_gyrometer_calibration_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->is_accelerometer_calibration_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];
  if (this->is_magnetometer_calibration_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_level_calibration_ok = 4 [(.mavsdk.options.default_value) = "false"];
  if (this->is_level_calibration_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];
  if (this->is_local_position_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];
  if (this->is_global_position_ok() != 0) {
    total_size += 1 + 1;
  }

  // bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];
  if (this->is_home_position_ok() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Health::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Health)
  GOOGLE_DCHECK_NE(&from, this);
  const Health* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Health>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Health)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Health)
    MergeFrom(*source);
  }
}

void Health::MergeFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Health)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_gyrometer_calibration_ok() != 0) {
    _internal_set_is_gyrometer_calibration_ok(from._internal_is_gyrometer_calibration_ok());
  }
  if (from.is_accelerometer_calibration_ok() != 0) {
    _internal_set_is_accelerometer_calibration_ok(from._internal_is_accelerometer_calibration_ok());
  }
  if (from.is_magnetometer_calibration_ok() != 0) {
    _internal_set_is_magnetometer_calibration_ok(from._internal_is_magnetometer_calibration_ok());
  }
  if (from.is_level_calibration_ok() != 0) {
    _internal_set_is_level_calibration_ok(from._internal_is_level_calibration_ok());
  }
  if (from.is_local_position_ok() != 0) {
    _internal_set_is_local_position_ok(from._internal_is_local_position_ok());
  }
  if (from.is_global_position_ok() != 0) {
    _internal_set_is_global_position_ok(from._internal_is_global_position_ok());
  }
  if (from.is_home_position_ok() != 0) {
    _internal_set_is_home_position_ok(from._internal_is_home_position_ok());
  }
}

void Health::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Health::CopyFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Health::IsInitialized() const {
  return true;
}

void Health::InternalSwap(Health* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(is_gyrometer_calibration_ok_, other->is_gyrometer_calibration_ok_);
  swap(is_accelerometer_calibration_ok_, other->is_accelerometer_calibration_ok_);
  swap(is_magnetometer_calibration_ok_, other->is_magnetometer_calibration_ok_);
  swap(is_level_calibration_ok_, other->is_level_calibration_ok_);
  swap(is_local_position_ok_, other->is_local_position_ok_);
  swap(is_global_position_ok_, other->is_global_position_ok_);
  swap(is_home_position_ok_, other->is_home_position_ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Health::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RcStatus::InitAsDefaultInstance() {
}
class RcStatus::_Internal {
 public:
};

RcStatus::RcStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.RcStatus)
}
RcStatus::RcStatus(const RcStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&was_available_once_, &from.was_available_once_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_strength_percent_) -
    reinterpret_cast<char*>(&was_available_once_)) + sizeof(signal_strength_percent_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.RcStatus)
}

void RcStatus::SharedCtor() {
  ::memset(&was_available_once_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_strength_percent_) -
      reinterpret_cast<char*>(&was_available_once_)) + sizeof(signal_strength_percent_));
}

RcStatus::~RcStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.RcStatus)
  SharedDtor();
}

void RcStatus::SharedDtor() {
}

void RcStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RcStatus& RcStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RcStatus_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void RcStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.RcStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&was_available_once_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_strength_percent_) -
      reinterpret_cast<char*>(&was_available_once_)) + sizeof(signal_strength_percent_));
  _internal_metadata_.Clear();
}

const char* RcStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          was_available_once_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "0"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          signal_strength_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RcStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.RcStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->was_available_once() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_was_available_once(), target);
  }

  // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->is_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_available(), target);
  }

  // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "0"];
  if (!(this->signal_strength_percent() <= 0 && this->signal_strength_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_signal_strength_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.RcStatus)
  return target;
}

size_t RcStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.RcStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];
  if (this->was_available_once() != 0) {
    total_size += 1 + 1;
  }

  // bool is_available = 2 [(.mavsdk.options.default_value) = "false"];
  if (this->is_available() != 0) {
    total_size += 1 + 1;
  }

  // float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "0"];
  if (!(this->signal_strength_percent() <= 0 && this->signal_strength_percent() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RcStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.RcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RcStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RcStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.RcStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.RcStatus)
    MergeFrom(*source);
  }
}

void RcStatus::MergeFrom(const RcStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.RcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.was_available_once() != 0) {
    _internal_set_was_available_once(from._internal_was_available_once());
  }
  if (from.is_available() != 0) {
    _internal_set_is_available(from._internal_is_available());
  }
  if (!(from.signal_strength_percent() <= 0 && from.signal_strength_percent() >= 0)) {
    _internal_set_signal_strength_percent(from._internal_signal_strength_percent());
  }
}

void RcStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.RcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RcStatus::CopyFrom(const RcStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.RcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RcStatus::IsInitialized() const {
  return true;
}

void RcStatus::InternalSwap(RcStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(was_available_once_, other->was_available_once_);
  swap(is_available_, other->is_available_);
  swap(signal_strength_percent_, other->signal_strength_percent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RcStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatusText::InitAsDefaultInstance() {
}
class StatusText::_Internal {
 public:
};

StatusText::StatusText()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.StatusText)
}
StatusText::StatusText(const StatusText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.StatusText)
}

void StatusText::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatusText_telemetry_2ftelemetry_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

StatusText::~StatusText() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.StatusText)
  SharedDtor();
}

void StatusText::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatusText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatusText& StatusText::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatusText_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void StatusText::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.StatusText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* StatusText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.StatusTextType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::mavsdk::rpc::telemetry::StatusTextType>(val));
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.telemetry.StatusText.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatusText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.StatusText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.StatusTextType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.telemetry.StatusText.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.StatusText)
  return target;
}

size_t StatusText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.StatusText)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .mavsdk.rpc.telemetry.StatusTextType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatusText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.StatusText)
  GOOGLE_DCHECK_NE(&from, this);
  const StatusText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatusText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.StatusText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.StatusText)
    MergeFrom(*source);
  }
}

void StatusText::MergeFrom(const StatusText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.StatusText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void StatusText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.StatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusText::CopyFrom(const StatusText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.StatusText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusText::IsInitialized() const {
  return true;
}

void StatusText::InternalSwap(StatusText* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActuatorControlTarget::InitAsDefaultInstance() {
}
class ActuatorControlTarget::_Internal {
 public:
};

ActuatorControlTarget::ActuatorControlTarget()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.ActuatorControlTarget)
}
ActuatorControlTarget::ActuatorControlTarget(const ActuatorControlTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      controls_(from.controls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_ = from.group_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ActuatorControlTarget)
}

void ActuatorControlTarget::SharedCtor() {
  group_ = 0;
}

ActuatorControlTarget::~ActuatorControlTarget() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ActuatorControlTarget)
  SharedDtor();
}

void ActuatorControlTarget::SharedDtor() {
}

void ActuatorControlTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActuatorControlTarget& ActuatorControlTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActuatorControlTarget_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void ActuatorControlTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controls_.Clear();
  group_ = 0;
  _internal_metadata_.Clear();
}

const char* ActuatorControlTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float controls = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_controls(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_controls(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorControlTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_group(), target);
  }

  // repeated float controls = 2;
  if (this->_internal_controls_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_controls(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ActuatorControlTarget)
  return target;
}

size_t ActuatorControlTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float controls = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_controls_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _controls_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 group = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorControlTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorControlTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorControlTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ActuatorControlTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ActuatorControlTarget)
    MergeFrom(*source);
  }
}

void ActuatorControlTarget::MergeFrom(const ActuatorControlTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controls_.MergeFrom(from.controls_);
  if (from.group() != 0) {
    _internal_set_group(from._internal_group());
  }
}

void ActuatorControlTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorControlTarget::CopyFrom(const ActuatorControlTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ActuatorControlTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorControlTarget::IsInitialized() const {
  return true;
}

void ActuatorControlTarget::InternalSwap(ActuatorControlTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  controls_.InternalSwap(&other->controls_);
  swap(group_, other->group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorControlTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActuatorOutputStatus::InitAsDefaultInstance() {
}
class ActuatorOutputStatus::_Internal {
 public:
};

ActuatorOutputStatus::ActuatorOutputStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.ActuatorOutputStatus)
}
ActuatorOutputStatus::ActuatorOutputStatus(const ActuatorOutputStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      actuator_(from.actuator_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.ActuatorOutputStatus)
}

void ActuatorOutputStatus::SharedCtor() {
  active_ = 0u;
}

ActuatorOutputStatus::~ActuatorOutputStatus() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  SharedDtor();
}

void ActuatorOutputStatus::SharedDtor() {
}

void ActuatorOutputStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActuatorOutputStatus& ActuatorOutputStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActuatorOutputStatus_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void ActuatorOutputStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actuator_.Clear();
  active_ = 0u;
  _internal_metadata_.Clear();
}

const char* ActuatorOutputStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float actuator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_actuator(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_actuator(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActuatorOutputStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_active(), target);
  }

  // repeated float actuator = 2;
  if (this->_internal_actuator_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_actuator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  return target;
}

size_t ActuatorOutputStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float actuator = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_actuator_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _actuator_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 active = 1 [(.mavsdk.options.default_value) = "0"];
  if (this->active() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActuatorOutputStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ActuatorOutputStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActuatorOutputStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.ActuatorOutputStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.ActuatorOutputStatus)
    MergeFrom(*source);
  }
}

void ActuatorOutputStatus::MergeFrom(const ActuatorOutputStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actuator_.MergeFrom(from.actuator_);
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
}

void ActuatorOutputStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActuatorOutputStatus::CopyFrom(const ActuatorOutputStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.ActuatorOutputStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorOutputStatus::IsInitialized() const {
  return true;
}

void ActuatorOutputStatus::InternalSwap(ActuatorOutputStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  actuator_.InternalSwap(&other->actuator_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorOutputStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Covariance::InitAsDefaultInstance() {
}
class Covariance::_Internal {
 public:
};

Covariance::Covariance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.Covariance)
}
Covariance::Covariance(const Covariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      covariance_matrix_(from.covariance_matrix_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Covariance)
}

void Covariance::SharedCtor() {
}

Covariance::~Covariance() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Covariance)
  SharedDtor();
}

void Covariance::SharedDtor() {
}

void Covariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Covariance& Covariance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Covariance_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void Covariance::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Covariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_matrix_.Clear();
  _internal_metadata_.Clear();
}

const char* Covariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float covariance_matrix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_covariance_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_covariance_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Covariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Covariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float covariance_matrix = 1;
  if (this->_internal_covariance_matrix_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_covariance_matrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Covariance)
  return target;
}

size_t Covariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Covariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float covariance_matrix = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_matrix_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _covariance_matrix_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Covariance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Covariance)
  GOOGLE_DCHECK_NE(&from, this);
  const Covariance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Covariance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Covariance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Covariance)
    MergeFrom(*source);
  }
}

void Covariance::MergeFrom(const Covariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Covariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_matrix_.MergeFrom(from.covariance_matrix_);
}

void Covariance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Covariance::CopyFrom(const Covariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Covariance::IsInitialized() const {
  return true;
}

void Covariance::InternalSwap(Covariance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  covariance_matrix_.InternalSwap(&other->covariance_matrix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Covariance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VelocityBody::InitAsDefaultInstance() {
}
class VelocityBody::_Internal {
 public:
};

VelocityBody::VelocityBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.VelocityBody)
}
VelocityBody::VelocityBody(const VelocityBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_m_s_, &from.x_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_m_s_) -
    reinterpret_cast<char*>(&x_m_s_)) + sizeof(z_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.VelocityBody)
}

void VelocityBody::SharedCtor() {
  ::memset(&x_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_s_) -
      reinterpret_cast<char*>(&x_m_s_)) + sizeof(z_m_s_));
}

VelocityBody::~VelocityBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.VelocityBody)
  SharedDtor();
}

void VelocityBody::SharedDtor() {
}

void VelocityBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VelocityBody& VelocityBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VelocityBody_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void VelocityBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.VelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_s_) -
      reinterpret_cast<char*>(&x_m_s_)) + sizeof(z_m_s_));
  _internal_metadata_.Clear();
}

const char* VelocityBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x_m_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_m_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z_m_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VelocityBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.VelocityBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_m_s = 1;
  if (!(this->x_m_s() <= 0 && this->x_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x_m_s(), target);
  }

  // float y_m_s = 2;
  if (!(this->y_m_s() <= 0 && this->y_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y_m_s(), target);
  }

  // float z_m_s = 3;
  if (!(this->z_m_s() <= 0 && this->z_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.VelocityBody)
  return target;
}

size_t VelocityBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.VelocityBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_m_s = 1;
  if (!(this->x_m_s() <= 0 && this->x_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_m_s = 2;
  if (!(this->y_m_s() <= 0 && this->y_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float z_m_s = 3;
  if (!(this->z_m_s() <= 0 && this->z_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.VelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelocityBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.VelocityBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.VelocityBody)
    MergeFrom(*source);
  }
}

void VelocityBody::MergeFrom(const VelocityBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.VelocityBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x_m_s() <= 0 && from.x_m_s() >= 0)) {
    _internal_set_x_m_s(from._internal_x_m_s());
  }
  if (!(from.y_m_s() <= 0 && from.y_m_s() >= 0)) {
    _internal_set_y_m_s(from._internal_y_m_s());
  }
  if (!(from.z_m_s() <= 0 && from.z_m_s() >= 0)) {
    _internal_set_z_m_s(from._internal_z_m_s());
  }
}

void VelocityBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.VelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityBody::CopyFrom(const VelocityBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.VelocityBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityBody::IsInitialized() const {
  return true;
}

void VelocityBody::InternalSwap(VelocityBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_m_s_, other->x_m_s_);
  swap(y_m_s_, other->y_m_s_);
  swap(z_m_s_, other->z_m_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VelocityBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionBody::InitAsDefaultInstance() {
}
class PositionBody::_Internal {
 public:
};

PositionBody::PositionBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.PositionBody)
}
PositionBody::PositionBody(const PositionBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_m_, &from.x_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_m_) -
    reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionBody)
}

void PositionBody::SharedCtor() {
  ::memset(&x_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_) -
      reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
}

PositionBody::~PositionBody() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionBody)
  SharedDtor();
}

void PositionBody::SharedDtor() {
}

void PositionBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionBody& PositionBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionBody_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void PositionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_) -
      reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
  _internal_metadata_.Clear();
}

const char* PositionBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_m = 1;
  if (!(this->x_m() <= 0 && this->x_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x_m(), target);
  }

  // float y_m = 2;
  if (!(this->y_m() <= 0 && this->y_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y_m(), target);
  }

  // float z_m = 3;
  if (!(this->z_m() <= 0 && this->z_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionBody)
  return target;
}

size_t PositionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x_m = 1;
  if (!(this->x_m() <= 0 && this->x_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float y_m = 2;
  if (!(this->y_m() <= 0 && this->y_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float z_m = 3;
  if (!(this->z_m() <= 0 && this->z_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.PositionBody)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.PositionBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.PositionBody)
    MergeFrom(*source);
  }
}

void PositionBody::MergeFrom(const PositionBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x_m() <= 0 && from.x_m() >= 0)) {
    _internal_set_x_m(from._internal_x_m());
  }
  if (!(from.y_m() <= 0 && from.y_m() >= 0)) {
    _internal_set_y_m(from._internal_y_m());
  }
  if (!(from.z_m() <= 0 && from.z_m() >= 0)) {
    _internal_set_z_m(from._internal_z_m());
  }
}

void PositionBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.PositionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionBody::CopyFrom(const PositionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionBody::IsInitialized() const {
  return true;
}

void PositionBody::InternalSwap(PositionBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_m_, other->x_m_);
  swap(y_m_, other->y_m_);
  swap(z_m_, other->z_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Odometry::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_Odometry_default_instance_._instance.get_mutable()->position_body_ = const_cast< ::mavsdk::rpc::telemetry::PositionBody*>(
      ::mavsdk::rpc::telemetry::PositionBody::internal_default_instance());
  ::mavsdk::rpc::telemetry::_Odometry_default_instance_._instance.get_mutable()->q_ = const_cast< ::mavsdk::rpc::telemetry::Quaternion*>(
      ::mavsdk::rpc::telemetry::Quaternion::internal_default_instance());
  ::mavsdk::rpc::telemetry::_Odometry_default_instance_._instance.get_mutable()->velocity_body_ = const_cast< ::mavsdk::rpc::telemetry::VelocityBody*>(
      ::mavsdk::rpc::telemetry::VelocityBody::internal_default_instance());
  ::mavsdk::rpc::telemetry::_Odometry_default_instance_._instance.get_mutable()->angular_velocity_body_ = const_cast< ::mavsdk::rpc::telemetry::AngularVelocityBody*>(
      ::mavsdk::rpc::telemetry::AngularVelocityBody::internal_default_instance());
  ::mavsdk::rpc::telemetry::_Odometry_default_instance_._instance.get_mutable()->pose_covariance_ = const_cast< ::mavsdk::rpc::telemetry::Covariance*>(
      ::mavsdk::rpc::telemetry::Covariance::internal_default_instance());
  ::mavsdk::rpc::telemetry::_Odometry_default_instance_._instance.get_mutable()->velocity_covariance_ = const_cast< ::mavsdk::rpc::telemetry::Covariance*>(
      ::mavsdk::rpc::telemetry::Covariance::internal_default_instance());
}
class Odometry::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::PositionBody& position_body(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry::Quaternion& q(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry::VelocityBody& velocity_body(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry::AngularVelocityBody& angular_velocity_body(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry::Covariance& pose_covariance(const Odometry* msg);
  static const ::mavsdk::rpc::telemetry::Covariance& velocity_covariance(const Odometry* msg);
};

const ::mavsdk::rpc::telemetry::PositionBody&
Odometry::_Internal::position_body(const Odometry* msg) {
  return *msg->position_body_;
}
const ::mavsdk::rpc::telemetry::Quaternion&
Odometry::_Internal::q(const Odometry* msg) {
  return *msg->q_;
}
const ::mavsdk::rpc::telemetry::VelocityBody&
Odometry::_Internal::velocity_body(const Odometry* msg) {
  return *msg->velocity_body_;
}
const ::mavsdk::rpc::telemetry::AngularVelocityBody&
Odometry::_Internal::angular_velocity_body(const Odometry* msg) {
  return *msg->angular_velocity_body_;
}
const ::mavsdk::rpc::telemetry::Covariance&
Odometry::_Internal::pose_covariance(const Odometry* msg) {
  return *msg->pose_covariance_;
}
const ::mavsdk::rpc::telemetry::Covariance&
Odometry::_Internal::velocity_covariance(const Odometry* msg) {
  return *msg->velocity_covariance_;
}
Odometry::Odometry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position_body()) {
    position_body_ = new ::mavsdk::rpc::telemetry::PositionBody(*from.position_body_);
  } else {
    position_body_ = nullptr;
  }
  if (from._internal_has_q()) {
    q_ = new ::mavsdk::rpc::telemetry::Quaternion(*from.q_);
  } else {
    q_ = nullptr;
  }
  if (from._internal_has_velocity_body()) {
    velocity_body_ = new ::mavsdk::rpc::telemetry::VelocityBody(*from.velocity_body_);
  } else {
    velocity_body_ = nullptr;
  }
  if (from._internal_has_angular_velocity_body()) {
    angular_velocity_body_ = new ::mavsdk::rpc::telemetry::AngularVelocityBody(*from.angular_velocity_body_);
  } else {
    angular_velocity_body_ = nullptr;
  }
  if (from._internal_has_pose_covariance()) {
    pose_covariance_ = new ::mavsdk::rpc::telemetry::Covariance(*from.pose_covariance_);
  } else {
    pose_covariance_ = nullptr;
  }
  if (from._internal_has_velocity_covariance()) {
    velocity_covariance_ = new ::mavsdk::rpc::telemetry::Covariance(*from.velocity_covariance_);
  } else {
    velocity_covariance_ = nullptr;
  }
  ::memcpy(&time_usec_, &from.time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&child_frame_id_) -
    reinterpret_cast<char*>(&time_usec_)) + sizeof(child_frame_id_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Odometry)
}

void Odometry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Odometry_telemetry_2ftelemetry_2eproto.base);
  ::memset(&position_body_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&child_frame_id_) -
      reinterpret_cast<char*>(&position_body_)) + sizeof(child_frame_id_));
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Odometry)
  SharedDtor();
}

void Odometry::SharedDtor() {
  if (this != internal_default_instance()) delete position_body_;
  if (this != internal_default_instance()) delete q_;
  if (this != internal_default_instance()) delete velocity_body_;
  if (this != internal_default_instance()) delete angular_velocity_body_;
  if (this != internal_default_instance()) delete pose_covariance_;
  if (this != internal_default_instance()) delete velocity_covariance_;
}

void Odometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Odometry& Odometry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Odometry_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_body_ != nullptr) {
    delete position_body_;
  }
  position_body_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_body_ != nullptr) {
    delete velocity_body_;
  }
  velocity_body_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && angular_velocity_body_ != nullptr) {
    delete angular_velocity_body_;
  }
  angular_velocity_body_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pose_covariance_ != nullptr) {
    delete pose_covariance_;
  }
  pose_covariance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_covariance_ != nullptr) {
    delete velocity_covariance_;
  }
  velocity_covariance_ = nullptr;
  ::memset(&time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&child_frame_id_) -
      reinterpret_cast<char*>(&time_usec_)) + sizeof(child_frame_id_));
  _internal_metadata_.Clear();
}

const char* Odometry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_frame_id(static_cast<::mavsdk::rpc::telemetry::Odometry_MavFrame>(val));
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_child_frame_id(static_cast<::mavsdk::rpc::telemetry::Odometry_MavFrame>(val));
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.PositionBody position_body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.Quaternion q = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_covariance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_covariance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Odometry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Odometry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_usec = 1;
  if (this->time_usec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_usec(), target);
  }

  // .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
  if (this->frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_frame_id(), target);
  }

  // .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
  if (this->child_frame_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_child_frame_id(), target);
  }

  // .mavsdk.rpc.telemetry.PositionBody position_body = 4;
  if (this->has_position_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position_body(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.Quaternion q = 5;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::q(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;
  if (this->has_velocity_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::velocity_body(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
  if (this->has_angular_velocity_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::angular_velocity_body(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
  if (this->has_pose_covariance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::pose_covariance(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
  if (this->has_velocity_covariance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::velocity_covariance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Odometry)
  return target;
}

size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Odometry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.PositionBody position_body = 4;
  if (this->has_position_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_body_);
  }

  // .mavsdk.rpc.telemetry.Quaternion q = 5;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  // .mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;
  if (this->has_velocity_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_body_);
  }

  // .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
  if (this->has_angular_velocity_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_body_);
  }

  // .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
  if (this->has_pose_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_covariance_);
  }

  // .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
  if (this->has_velocity_covariance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_covariance_);
  }

  // uint64 time_usec = 1;
  if (this->time_usec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_usec());
  }

  // .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
  if (this->frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frame_id());
  }

  // .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
  if (this->child_frame_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_child_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odometry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Odometry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Odometry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Odometry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Odometry)
    MergeFrom(*source);
  }
}

void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position_body()) {
    _internal_mutable_position_body()->::mavsdk::rpc::telemetry::PositionBody::MergeFrom(from._internal_position_body());
  }
  if (from.has_q()) {
    _internal_mutable_q()->::mavsdk::rpc::telemetry::Quaternion::MergeFrom(from._internal_q());
  }
  if (from.has_velocity_body()) {
    _internal_mutable_velocity_body()->::mavsdk::rpc::telemetry::VelocityBody::MergeFrom(from._internal_velocity_body());
  }
  if (from.has_angular_velocity_body()) {
    _internal_mutable_angular_velocity_body()->::mavsdk::rpc::telemetry::AngularVelocityBody::MergeFrom(from._internal_angular_velocity_body());
  }
  if (from.has_pose_covariance()) {
    _internal_mutable_pose_covariance()->::mavsdk::rpc::telemetry::Covariance::MergeFrom(from._internal_pose_covariance());
  }
  if (from.has_velocity_covariance()) {
    _internal_mutable_velocity_covariance()->::mavsdk::rpc::telemetry::Covariance::MergeFrom(from._internal_velocity_covariance());
  }
  if (from.time_usec() != 0) {
    _internal_set_time_usec(from._internal_time_usec());
  }
  if (from.frame_id() != 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.child_frame_id() != 0) {
    _internal_set_child_frame_id(from._internal_child_frame_id());
  }
}

void Odometry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  return true;
}

void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_body_, other->position_body_);
  swap(q_, other->q_);
  swap(velocity_body_, other->velocity_body_);
  swap(angular_velocity_body_, other->angular_velocity_body_);
  swap(pose_covariance_, other->pose_covariance_);
  swap(velocity_covariance_, other->velocity_covariance_);
  swap(time_usec_, other->time_usec_);
  swap(frame_id_, other->frame_id_);
  swap(child_frame_id_, other->child_frame_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Odometry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionNed::InitAsDefaultInstance() {
}
class PositionNed::_Internal {
 public:
};

PositionNed::PositionNed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.PositionNed)
}
PositionNed::PositionNed(const PositionNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&north_m_, &from.north_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_m_) -
    reinterpret_cast<char*>(&north_m_)) + sizeof(down_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionNed)
}

void PositionNed::SharedCtor() {
  ::memset(&north_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_) -
      reinterpret_cast<char*>(&north_m_)) + sizeof(down_m_));
}

PositionNed::~PositionNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionNed)
  SharedDtor();
}

void PositionNed::SharedDtor() {
}

void PositionNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionNed& PositionNed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionNed_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void PositionNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&north_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_) -
      reinterpret_cast<char*>(&north_m_)) + sizeof(down_m_));
  _internal_metadata_.Clear();
}

const char* PositionNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          north_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          east_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionNed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->north_m() <= 0 && this->north_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_north_m(), target);
  }

  // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->east_m() <= 0 && this->east_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_east_m(), target);
  }

  // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_m() <= 0 && this->down_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionNed)
  return target;
}

size_t PositionNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionNed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->north_m() <= 0 && this->north_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float east_m = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->east_m() <= 0 && this->east_m() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_m() <= 0 && this->down_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionNed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.PositionNed)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionNed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionNed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.PositionNed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.PositionNed)
    MergeFrom(*source);
  }
}

void PositionNed::MergeFrom(const PositionNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionNed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.north_m() <= 0 && from.north_m() >= 0)) {
    _internal_set_north_m(from._internal_north_m());
  }
  if (!(from.east_m() <= 0 && from.east_m() >= 0)) {
    _internal_set_east_m(from._internal_east_m());
  }
  if (!(from.down_m() <= 0 && from.down_m() >= 0)) {
    _internal_set_down_m(from._internal_down_m());
  }
}

void PositionNed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.PositionNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionNed::CopyFrom(const PositionNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionNed::IsInitialized() const {
  return true;
}

void PositionNed::InternalSwap(PositionNed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(north_m_, other->north_m_);
  swap(east_m_, other->east_m_);
  swap(down_m_, other->down_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionNed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VelocityNed::InitAsDefaultInstance() {
}
class VelocityNed::_Internal {
 public:
};

VelocityNed::VelocityNed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.VelocityNed)
}
VelocityNed::VelocityNed(const VelocityNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&north_m_s_, &from.north_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_m_s_) -
    reinterpret_cast<char*>(&north_m_s_)) + sizeof(down_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.VelocityNed)
}

void VelocityNed::SharedCtor() {
  ::memset(&north_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_s_) -
      reinterpret_cast<char*>(&north_m_s_)) + sizeof(down_m_s_));
}

VelocityNed::~VelocityNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.VelocityNed)
  SharedDtor();
}

void VelocityNed::SharedDtor() {
}

void VelocityNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VelocityNed& VelocityNed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VelocityNed_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void VelocityNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.VelocityNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&north_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_s_) -
      reinterpret_cast<char*>(&north_m_s_)) + sizeof(down_m_s_));
  _internal_metadata_.Clear();
}

const char* VelocityNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float north_m_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          north_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float east_m_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          east_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_m_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VelocityNed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.VelocityNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float north_m_s = 1;
  if (!(this->north_m_s() <= 0 && this->north_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_north_m_s(), target);
  }

  // float east_m_s = 2;
  if (!(this->east_m_s() <= 0 && this->east_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_east_m_s(), target);
  }

  // float down_m_s = 3;
  if (!(this->down_m_s() <= 0 && this->down_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.VelocityNed)
  return target;
}

size_t VelocityNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.VelocityNed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m_s = 1;
  if (!(this->north_m_s() <= 0 && this->north_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float east_m_s = 2;
  if (!(this->east_m_s() <= 0 && this->east_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_m_s = 3;
  if (!(this->down_m_s() <= 0 && this->down_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityNed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.VelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityNed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelocityNed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.VelocityNed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.VelocityNed)
    MergeFrom(*source);
  }
}

void VelocityNed::MergeFrom(const VelocityNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.VelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.north_m_s() <= 0 && from.north_m_s() >= 0)) {
    _internal_set_north_m_s(from._internal_north_m_s());
  }
  if (!(from.east_m_s() <= 0 && from.east_m_s() >= 0)) {
    _internal_set_east_m_s(from._internal_east_m_s());
  }
  if (!(from.down_m_s() <= 0 && from.down_m_s() >= 0)) {
    _internal_set_down_m_s(from._internal_down_m_s());
  }
}

void VelocityNed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.VelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityNed::CopyFrom(const VelocityNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.VelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityNed::IsInitialized() const {
  return true;
}

void VelocityNed::InternalSwap(VelocityNed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(north_m_s_, other->north_m_s_);
  swap(east_m_s_, other->east_m_s_);
  swap(down_m_s_, other->down_m_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VelocityNed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionVelocityNed::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_PositionVelocityNed_default_instance_._instance.get_mutable()->position_ = const_cast< ::mavsdk::rpc::telemetry::PositionNed*>(
      ::mavsdk::rpc::telemetry::PositionNed::internal_default_instance());
  ::mavsdk::rpc::telemetry::_PositionVelocityNed_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::mavsdk::rpc::telemetry::VelocityNed*>(
      ::mavsdk::rpc::telemetry::VelocityNed::internal_default_instance());
}
class PositionVelocityNed::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::PositionNed& position(const PositionVelocityNed* msg);
  static const ::mavsdk::rpc::telemetry::VelocityNed& velocity(const PositionVelocityNed* msg);
};

const ::mavsdk::rpc::telemetry::PositionNed&
PositionVelocityNed::_Internal::position(const PositionVelocityNed* msg) {
  return *msg->position_;
}
const ::mavsdk::rpc::telemetry::VelocityNed&
PositionVelocityNed::_Internal::velocity(const PositionVelocityNed* msg) {
  return *msg->velocity_;
}
PositionVelocityNed::PositionVelocityNed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.PositionVelocityNed)
}
PositionVelocityNed::PositionVelocityNed(const PositionVelocityNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::mavsdk::rpc::telemetry::PositionNed(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::mavsdk::rpc::telemetry::VelocityNed(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.PositionVelocityNed)
}

void PositionVelocityNed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionVelocityNed_telemetry_2ftelemetry_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_) -
      reinterpret_cast<char*>(&position_)) + sizeof(velocity_));
}

PositionVelocityNed::~PositionVelocityNed() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.PositionVelocityNed)
  SharedDtor();
}

void PositionVelocityNed::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
}

void PositionVelocityNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionVelocityNed& PositionVelocityNed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionVelocityNed_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void PositionVelocityNed::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PositionVelocityNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.PositionNed position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.VelocityNed velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionVelocityNed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.PositionNed position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.VelocityNed velocity = 2;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.PositionVelocityNed)
  return target;
}

size_t PositionVelocityNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.PositionNed position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .mavsdk.rpc.telemetry.VelocityNed velocity = 2;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionVelocityNed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionVelocityNed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionVelocityNed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.PositionVelocityNed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.PositionVelocityNed)
    MergeFrom(*source);
  }
}

void PositionVelocityNed::MergeFrom(const PositionVelocityNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::mavsdk::rpc::telemetry::PositionNed::MergeFrom(from._internal_position());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::mavsdk::rpc::telemetry::VelocityNed::MergeFrom(from._internal_velocity());
  }
}

void PositionVelocityNed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionVelocityNed::CopyFrom(const PositionVelocityNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.PositionVelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionVelocityNed::IsInitialized() const {
  return true;
}

void PositionVelocityNed::InternalSwap(PositionVelocityNed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionVelocityNed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroundTruth::InitAsDefaultInstance() {
}
class GroundTruth::_Internal {
 public:
};

GroundTruth::GroundTruth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.GroundTruth)
}
GroundTruth::GroundTruth(const GroundTruth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&absolute_altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(absolute_altitude_m_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.GroundTruth)
}

void GroundTruth::SharedCtor() {
  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absolute_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(absolute_altitude_m_));
}

GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.GroundTruth)
  SharedDtor();
}

void GroundTruth::SharedDtor() {
}

void GroundTruth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroundTruth& GroundTruth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroundTruth_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absolute_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(absolute_altitude_m_));
  _internal_metadata_.Clear();
}

const char* GroundTruth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          absolute_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroundTruth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_absolute_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.GroundTruth)
  return target;
}

size_t GroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.GroundTruth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->absolute_altitude_m() <= 0 && this->absolute_altitude_m() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroundTruth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundTruth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroundTruth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.GroundTruth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.GroundTruth)
    MergeFrom(*source);
  }
}

void GroundTruth::MergeFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  if (!(from.absolute_altitude_m() <= 0 && from.absolute_altitude_m() >= 0)) {
    _internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
}

void GroundTruth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruth::IsInitialized() const {
  return true;
}

void GroundTruth::InternalSwap(GroundTruth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latitude_deg_, other->latitude_deg_);
  swap(longitude_deg_, other->longitude_deg_);
  swap(absolute_altitude_m_, other->absolute_altitude_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundTruth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FixedwingMetrics::InitAsDefaultInstance() {
}
class FixedwingMetrics::_Internal {
 public:
};

FixedwingMetrics::FixedwingMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.FixedwingMetrics)
}
FixedwingMetrics::FixedwingMetrics(const FixedwingMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&airspeed_m_s_, &from.airspeed_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&climb_rate_m_s_) -
    reinterpret_cast<char*>(&airspeed_m_s_)) + sizeof(climb_rate_m_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.FixedwingMetrics)
}

void FixedwingMetrics::SharedCtor() {
  ::memset(&airspeed_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&climb_rate_m_s_) -
      reinterpret_cast<char*>(&airspeed_m_s_)) + sizeof(climb_rate_m_s_));
}

FixedwingMetrics::~FixedwingMetrics() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.FixedwingMetrics)
  SharedDtor();
}

void FixedwingMetrics::SharedDtor() {
}

void FixedwingMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedwingMetrics& FixedwingMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FixedwingMetrics_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void FixedwingMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&airspeed_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&climb_rate_m_s_) -
      reinterpret_cast<char*>(&airspeed_m_s_)) + sizeof(climb_rate_m_s_));
  _internal_metadata_.Clear();
}

const char* FixedwingMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          airspeed_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          throttle_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          climb_rate_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FixedwingMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->airspeed_m_s() <= 0 && this->airspeed_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_airspeed_m_s(), target);
  }

  // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->throttle_percentage() <= 0 && this->throttle_percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_throttle_percentage(), target);
  }

  // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->climb_rate_m_s() <= 0 && this->climb_rate_m_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_climb_rate_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.FixedwingMetrics)
  return target;
}

size_t FixedwingMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->airspeed_m_s() <= 0 && this->airspeed_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->throttle_percentage() <= 0 && this->throttle_percentage() >= 0)) {
    total_size += 1 + 4;
  }

  // float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->climb_rate_m_s() <= 0 && this->climb_rate_m_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedwingMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedwingMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FixedwingMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.FixedwingMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.FixedwingMetrics)
    MergeFrom(*source);
  }
}

void FixedwingMetrics::MergeFrom(const FixedwingMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.airspeed_m_s() <= 0 && from.airspeed_m_s() >= 0)) {
    _internal_set_airspeed_m_s(from._internal_airspeed_m_s());
  }
  if (!(from.throttle_percentage() <= 0 && from.throttle_percentage() >= 0)) {
    _internal_set_throttle_percentage(from._internal_throttle_percentage());
  }
  if (!(from.climb_rate_m_s() <= 0 && from.climb_rate_m_s() >= 0)) {
    _internal_set_climb_rate_m_s(from._internal_climb_rate_m_s());
  }
}

void FixedwingMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedwingMetrics::CopyFrom(const FixedwingMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.FixedwingMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedwingMetrics::IsInitialized() const {
  return true;
}

void FixedwingMetrics::InternalSwap(FixedwingMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(airspeed_m_s_, other->airspeed_m_s_);
  swap(throttle_percentage_, other->throttle_percentage_);
  swap(climb_rate_m_s_, other->climb_rate_m_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FixedwingMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccelerationFrd::InitAsDefaultInstance() {
}
class AccelerationFrd::_Internal {
 public:
};

AccelerationFrd::AccelerationFrd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.AccelerationFrd)
}
AccelerationFrd::AccelerationFrd(const AccelerationFrd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&forward_m_s2_, &from.forward_m_s2_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_m_s2_) -
    reinterpret_cast<char*>(&forward_m_s2_)) + sizeof(down_m_s2_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AccelerationFrd)
}

void AccelerationFrd::SharedCtor() {
  ::memset(&forward_m_s2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_s2_) -
      reinterpret_cast<char*>(&forward_m_s2_)) + sizeof(down_m_s2_));
}

AccelerationFrd::~AccelerationFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AccelerationFrd)
  SharedDtor();
}

void AccelerationFrd::SharedDtor() {
}

void AccelerationFrd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccelerationFrd& AccelerationFrd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccelerationFrd_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void AccelerationFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AccelerationFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_m_s2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_s2_) -
      reinterpret_cast<char*>(&forward_m_s2_)) + sizeof(down_m_s2_));
  _internal_metadata_.Clear();
}

const char* AccelerationFrd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          forward_m_s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          right_m_s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_m_s2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccelerationFrd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AccelerationFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_m_s2() <= 0 && this->forward_m_s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_forward_m_s2(), target);
  }

  // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_m_s2() <= 0 && this->right_m_s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_m_s2(), target);
  }

  // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_m_s2() <= 0 && this->down_m_s2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m_s2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AccelerationFrd)
  return target;
}

size_t AccelerationFrd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AccelerationFrd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_m_s2 = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_m_s2() <= 0 && this->forward_m_s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_m_s2 = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_m_s2() <= 0 && this->right_m_s2() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_m_s2 = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_m_s2() <= 0 && this->down_m_s2() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccelerationFrd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.AccelerationFrd)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelerationFrd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccelerationFrd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.AccelerationFrd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.AccelerationFrd)
    MergeFrom(*source);
  }
}

void AccelerationFrd::MergeFrom(const AccelerationFrd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AccelerationFrd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.forward_m_s2() <= 0 && from.forward_m_s2() >= 0)) {
    _internal_set_forward_m_s2(from._internal_forward_m_s2());
  }
  if (!(from.right_m_s2() <= 0 && from.right_m_s2() >= 0)) {
    _internal_set_right_m_s2(from._internal_right_m_s2());
  }
  if (!(from.down_m_s2() <= 0 && from.down_m_s2() >= 0)) {
    _internal_set_down_m_s2(from._internal_down_m_s2());
  }
}

void AccelerationFrd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.AccelerationFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelerationFrd::CopyFrom(const AccelerationFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AccelerationFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelerationFrd::IsInitialized() const {
  return true;
}

void AccelerationFrd::InternalSwap(AccelerationFrd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(forward_m_s2_, other->forward_m_s2_);
  swap(right_m_s2_, other->right_m_s2_);
  swap(down_m_s2_, other->down_m_s2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelerationFrd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AngularVelocityFrd::InitAsDefaultInstance() {
}
class AngularVelocityFrd::_Internal {
 public:
};

AngularVelocityFrd::AngularVelocityFrd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.AngularVelocityFrd)
}
AngularVelocityFrd::AngularVelocityFrd(const AngularVelocityFrd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&forward_rad_s_, &from.forward_rad_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_rad_s_) -
    reinterpret_cast<char*>(&forward_rad_s_)) + sizeof(down_rad_s_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.AngularVelocityFrd)
}

void AngularVelocityFrd::SharedCtor() {
  ::memset(&forward_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_rad_s_) -
      reinterpret_cast<char*>(&forward_rad_s_)) + sizeof(down_rad_s_));
}

AngularVelocityFrd::~AngularVelocityFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.AngularVelocityFrd)
  SharedDtor();
}

void AngularVelocityFrd::SharedDtor() {
}

void AngularVelocityFrd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AngularVelocityFrd& AngularVelocityFrd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AngularVelocityFrd_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void AngularVelocityFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_rad_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_rad_s_) -
      reinterpret_cast<char*>(&forward_rad_s_)) + sizeof(down_rad_s_));
  _internal_metadata_.Clear();
}

const char* AngularVelocityFrd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          forward_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          right_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_rad_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AngularVelocityFrd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_rad_s() <= 0 && this->forward_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_forward_rad_s(), target);
  }

  // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_rad_s() <= 0 && this->right_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_rad_s(), target);
  }

  // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_rad_s() <= 0 && this->down_rad_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_rad_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.AngularVelocityFrd)
  return target;
}

size_t AngularVelocityFrd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_rad_s() <= 0 && this->forward_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_rad_s() <= 0 && this->right_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_rad_s() <= 0 && this->down_rad_s() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AngularVelocityFrd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  GOOGLE_DCHECK_NE(&from, this);
  const AngularVelocityFrd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AngularVelocityFrd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.AngularVelocityFrd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.AngularVelocityFrd)
    MergeFrom(*source);
  }
}

void AngularVelocityFrd::MergeFrom(const AngularVelocityFrd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.forward_rad_s() <= 0 && from.forward_rad_s() >= 0)) {
    _internal_set_forward_rad_s(from._internal_forward_rad_s());
  }
  if (!(from.right_rad_s() <= 0 && from.right_rad_s() >= 0)) {
    _internal_set_right_rad_s(from._internal_right_rad_s());
  }
  if (!(from.down_rad_s() <= 0 && from.down_rad_s() >= 0)) {
    _internal_set_down_rad_s(from._internal_down_rad_s());
  }
}

void AngularVelocityFrd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AngularVelocityFrd::CopyFrom(const AngularVelocityFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.AngularVelocityFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AngularVelocityFrd::IsInitialized() const {
  return true;
}

void AngularVelocityFrd::InternalSwap(AngularVelocityFrd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(forward_rad_s_, other->forward_rad_s_);
  swap(right_rad_s_, other->right_rad_s_);
  swap(down_rad_s_, other->down_rad_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AngularVelocityFrd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MagneticFieldFrd::InitAsDefaultInstance() {
}
class MagneticFieldFrd::_Internal {
 public:
};

MagneticFieldFrd::MagneticFieldFrd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.MagneticFieldFrd)
}
MagneticFieldFrd::MagneticFieldFrd(const MagneticFieldFrd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&forward_gauss_, &from.forward_gauss_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_gauss_) -
    reinterpret_cast<char*>(&forward_gauss_)) + sizeof(down_gauss_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.MagneticFieldFrd)
}

void MagneticFieldFrd::SharedCtor() {
  ::memset(&forward_gauss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_gauss_) -
      reinterpret_cast<char*>(&forward_gauss_)) + sizeof(down_gauss_));
}

MagneticFieldFrd::~MagneticFieldFrd() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.MagneticFieldFrd)
  SharedDtor();
}

void MagneticFieldFrd::SharedDtor() {
}

void MagneticFieldFrd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MagneticFieldFrd& MagneticFieldFrd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MagneticFieldFrd_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void MagneticFieldFrd::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_gauss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_gauss_) -
      reinterpret_cast<char*>(&forward_gauss_)) + sizeof(down_gauss_));
  _internal_metadata_.Clear();
}

const char* MagneticFieldFrd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          forward_gauss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          right_gauss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          down_gauss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MagneticFieldFrd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_gauss() <= 0 && this->forward_gauss() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_forward_gauss(), target);
  }

  // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_gauss() <= 0 && this->right_gauss() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_gauss(), target);
  }

  // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_gauss() <= 0 && this->down_gauss() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_gauss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.MagneticFieldFrd)
  return target;
}

size_t MagneticFieldFrd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float forward_gauss = 1 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->forward_gauss() <= 0 && this->forward_gauss() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_gauss = 2 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->right_gauss() <= 0 && this->right_gauss() >= 0)) {
    total_size += 1 + 4;
  }

  // float down_gauss = 3 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->down_gauss() <= 0 && this->down_gauss() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MagneticFieldFrd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  GOOGLE_DCHECK_NE(&from, this);
  const MagneticFieldFrd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MagneticFieldFrd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.MagneticFieldFrd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.MagneticFieldFrd)
    MergeFrom(*source);
  }
}

void MagneticFieldFrd::MergeFrom(const MagneticFieldFrd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.forward_gauss() <= 0 && from.forward_gauss() >= 0)) {
    _internal_set_forward_gauss(from._internal_forward_gauss());
  }
  if (!(from.right_gauss() <= 0 && from.right_gauss() >= 0)) {
    _internal_set_right_gauss(from._internal_right_gauss());
  }
  if (!(from.down_gauss() <= 0 && from.down_gauss() >= 0)) {
    _internal_set_down_gauss(from._internal_down_gauss());
  }
}

void MagneticFieldFrd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagneticFieldFrd::CopyFrom(const MagneticFieldFrd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.MagneticFieldFrd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagneticFieldFrd::IsInitialized() const {
  return true;
}

void MagneticFieldFrd::InternalSwap(MagneticFieldFrd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(forward_gauss_, other->forward_gauss_);
  swap(right_gauss_, other->right_gauss_);
  swap(down_gauss_, other->down_gauss_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MagneticFieldFrd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Imu::InitAsDefaultInstance() {
  ::mavsdk::rpc::telemetry::_Imu_default_instance_._instance.get_mutable()->acceleration_frd_ = const_cast< ::mavsdk::rpc::telemetry::AccelerationFrd*>(
      ::mavsdk::rpc::telemetry::AccelerationFrd::internal_default_instance());
  ::mavsdk::rpc::telemetry::_Imu_default_instance_._instance.get_mutable()->angular_velocity_frd_ = const_cast< ::mavsdk::rpc::telemetry::AngularVelocityFrd*>(
      ::mavsdk::rpc::telemetry::AngularVelocityFrd::internal_default_instance());
  ::mavsdk::rpc::telemetry::_Imu_default_instance_._instance.get_mutable()->magnetic_field_frd_ = const_cast< ::mavsdk::rpc::telemetry::MagneticFieldFrd*>(
      ::mavsdk::rpc::telemetry::MagneticFieldFrd::internal_default_instance());
}
class Imu::_Internal {
 public:
  static const ::mavsdk::rpc::telemetry::AccelerationFrd& acceleration_frd(const Imu* msg);
  static const ::mavsdk::rpc::telemetry::AngularVelocityFrd& angular_velocity_frd(const Imu* msg);
  static const ::mavsdk::rpc::telemetry::MagneticFieldFrd& magnetic_field_frd(const Imu* msg);
};

const ::mavsdk::rpc::telemetry::AccelerationFrd&
Imu::_Internal::acceleration_frd(const Imu* msg) {
  return *msg->acceleration_frd_;
}
const ::mavsdk::rpc::telemetry::AngularVelocityFrd&
Imu::_Internal::angular_velocity_frd(const Imu* msg) {
  return *msg->angular_velocity_frd_;
}
const ::mavsdk::rpc::telemetry::MagneticFieldFrd&
Imu::_Internal::magnetic_field_frd(const Imu* msg) {
  return *msg->magnetic_field_frd_;
}
Imu::Imu()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.Imu)
}
Imu::Imu(const Imu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_acceleration_frd()) {
    acceleration_frd_ = new ::mavsdk::rpc::telemetry::AccelerationFrd(*from.acceleration_frd_);
  } else {
    acceleration_frd_ = nullptr;
  }
  if (from._internal_has_angular_velocity_frd()) {
    angular_velocity_frd_ = new ::mavsdk::rpc::telemetry::AngularVelocityFrd(*from.angular_velocity_frd_);
  } else {
    angular_velocity_frd_ = nullptr;
  }
  if (from._internal_has_magnetic_field_frd()) {
    magnetic_field_frd_ = new ::mavsdk::rpc::telemetry::MagneticFieldFrd(*from.magnetic_field_frd_);
  } else {
    magnetic_field_frd_ = nullptr;
  }
  temperature_degc_ = from.temperature_degc_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.Imu)
}

void Imu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Imu_telemetry_2ftelemetry_2eproto.base);
  ::memset(&acceleration_frd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&temperature_degc_) -
      reinterpret_cast<char*>(&acceleration_frd_)) + sizeof(temperature_degc_));
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.Imu)
  SharedDtor();
}

void Imu::SharedDtor() {
  if (this != internal_default_instance()) delete acceleration_frd_;
  if (this != internal_default_instance()) delete angular_velocity_frd_;
  if (this != internal_default_instance()) delete magnetic_field_frd_;
}

void Imu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Imu& Imu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Imu_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.Imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && acceleration_frd_ != nullptr) {
    delete acceleration_frd_;
  }
  acceleration_frd_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && angular_velocity_frd_ != nullptr) {
    delete angular_velocity_frd_;
  }
  angular_velocity_frd_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && magnetic_field_frd_ != nullptr) {
    delete magnetic_field_frd_;
  }
  magnetic_field_frd_ = nullptr;
  temperature_degc_ = 0;
  _internal_metadata_.Clear();
}

const char* Imu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.AccelerationFrd acceleration_frd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration_frd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.AngularVelocityFrd angular_velocity_frd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_frd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mavsdk.rpc.telemetry.MagneticFieldFrd magnetic_field_frd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_magnetic_field_frd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          temperature_degc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Imu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.Imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.AccelerationFrd acceleration_frd = 1;
  if (this->has_acceleration_frd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::acceleration_frd(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.AngularVelocityFrd angular_velocity_frd = 2;
  if (this->has_angular_velocity_frd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular_velocity_frd(this), target, stream);
  }

  // .mavsdk.rpc.telemetry.MagneticFieldFrd magnetic_field_frd = 3;
  if (this->has_magnetic_field_frd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::magnetic_field_frd(this), target, stream);
  }

  // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->temperature_degc() <= 0 && this->temperature_degc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_temperature_degc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.Imu)
  return target;
}

size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.Imu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.AccelerationFrd acceleration_frd = 1;
  if (this->has_acceleration_frd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_frd_);
  }

  // .mavsdk.rpc.telemetry.AngularVelocityFrd angular_velocity_frd = 2;
  if (this->has_angular_velocity_frd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_frd_);
  }

  // .mavsdk.rpc.telemetry.MagneticFieldFrd magnetic_field_frd = 3;
  if (this->has_magnetic_field_frd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *magnetic_field_frd_);
  }

  // float temperature_degc = 4 [(.mavsdk.options.default_value) = "NaN"];
  if (!(this->temperature_degc() <= 0 && this->temperature_degc() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Imu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  const Imu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Imu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.Imu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.Imu)
    MergeFrom(*source);
  }
}

void Imu::MergeFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_acceleration_frd()) {
    _internal_mutable_acceleration_frd()->::mavsdk::rpc::telemetry::AccelerationFrd::MergeFrom(from._internal_acceleration_frd());
  }
  if (from.has_angular_velocity_frd()) {
    _internal_mutable_angular_velocity_frd()->::mavsdk::rpc::telemetry::AngularVelocityFrd::MergeFrom(from._internal_angular_velocity_frd());
  }
  if (from.has_magnetic_field_frd()) {
    _internal_mutable_magnetic_field_frd()->::mavsdk::rpc::telemetry::MagneticFieldFrd::MergeFrom(from._internal_magnetic_field_frd());
  }
  if (!(from.temperature_degc() <= 0 && from.temperature_degc() >= 0)) {
    _internal_set_temperature_degc(from._internal_temperature_degc());
  }
}

void Imu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu::IsInitialized() const {
  return true;
}

void Imu::InternalSwap(Imu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(acceleration_frd_, other->acceleration_frd_);
  swap(angular_velocity_frd_, other->angular_velocity_frd_);
  swap(magnetic_field_frd_, other->magnetic_field_frd_);
  swap(temperature_degc_, other->temperature_degc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Imu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TelemetryResult::InitAsDefaultInstance() {
}
class TelemetryResult::_Internal {
 public:
};

TelemetryResult::TelemetryResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.telemetry.TelemetryResult)
}
TelemetryResult::TelemetryResult(const TelemetryResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.telemetry.TelemetryResult)
}

void TelemetryResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

TelemetryResult::~TelemetryResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.telemetry.TelemetryResult)
  SharedDtor();
}

void TelemetryResult::SharedDtor() {
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TelemetryResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TelemetryResult& TelemetryResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TelemetryResult_telemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}


void TelemetryResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.telemetry.TelemetryResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* TelemetryResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.telemetry.TelemetryResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::mavsdk::rpc::telemetry::TelemetryResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_result_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mavsdk.rpc.telemetry.TelemetryResult.result_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TelemetryResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.telemetry.TelemetryResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.telemetry.TelemetryResult.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.telemetry.TelemetryResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.telemetry.TelemetryResult)
  return target;
}

size_t TelemetryResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.telemetry.TelemetryResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.telemetry.TelemetryResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.telemetry.TelemetryResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TelemetryResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.telemetry.TelemetryResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.telemetry.TelemetryResult)
    MergeFrom(*source);
  }
}

void TelemetryResult::MergeFrom(const TelemetryResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.telemetry.TelemetryResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {

    result_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void TelemetryResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.telemetry.TelemetryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryResult::CopyFrom(const TelemetryResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.telemetry.TelemetryResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryResult::IsInitialized() const {
  return true;
}

void TelemetryResult::InternalSwap(TelemetryResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace telemetry
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribePositionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribePositionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribePositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::PositionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::PositionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::PositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeHomeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeHomeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeHomeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::HomeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::HomeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::HomeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeInAirRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeInAirRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeInAirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::InAirResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::InAirResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::InAirResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeLandedStateRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeLandedStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeLandedStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::LandedStateResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::LandedStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::LandedStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeArmedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeArmedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeArmedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ArmedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ArmedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::ArmedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::AttitudeQuaternionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::AttitudeQuaternionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::AttitudeQuaternionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::AttitudeEulerResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::AttitudeEulerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::AttitudeEulerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeGroundSpeedNedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeGroundSpeedNedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeGroundSpeedNedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::GroundSpeedNedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::GroundSpeedNedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::GroundSpeedNedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::GpsInfoResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::GpsInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::GpsInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeBatteryRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeBatteryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeBatteryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::BatteryResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::BatteryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::BatteryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeFlightModeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeFlightModeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeFlightModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::FlightModeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::FlightModeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::FlightModeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeHealthRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeHealthRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeHealthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::HealthResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::HealthResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::HealthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeRcStatusRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeRcStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeRcStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::RcStatusResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::RcStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::RcStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeStatusTextRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeStatusTextRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeStatusTextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::StatusTextResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::StatusTextResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::StatusTextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ActuatorControlTargetResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ActuatorControlTargetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::ActuatorControlTargetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeOdometryRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeOdometryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeOdometryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::OdometryResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::OdometryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::OdometryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribePositionVelocityNedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::PositionVelocityNedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::PositionVelocityNedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::PositionVelocityNedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeGroundTruthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::GroundTruthResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::GroundTruthResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::GroundTruthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeFixedwingMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::FixedwingMetricsResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::FixedwingMetricsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::FixedwingMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeImuRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeImuRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeImuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ImuResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ImuResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::ImuResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeHealthAllOkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::HealthAllOkResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::HealthAllOkResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::HealthAllOkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SubscribeUnixEpochTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::UnixEpochTimeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::UnixEpochTimeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::UnixEpochTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRatePositionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRatePositionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRatePositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRatePositionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRatePositionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRatePositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateHomeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateHomeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateHomeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateHomeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateHomeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateHomeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateInAirRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateInAirRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateInAirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateInAirResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateInAirResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateInAirResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateLandedStateRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateLandedStateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateLandedStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateLandedStateResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateLandedStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateLandedStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateAttitudeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateAttitudeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateAttitudeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateAttitudeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateAttitudeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateAttitudeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateAttitudeAngularVelocityBodyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeQuaternionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateCameraAttitudeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateGroundSpeedNedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateGroundSpeedNedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateGroundSpeedNedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateGroundSpeedNedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateGroundSpeedNedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateGroundSpeedNedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateGpsInfoRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateGpsInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateGpsInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateGpsInfoResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateGpsInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateGpsInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateBatteryRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateBatteryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateBatteryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateBatteryResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateBatteryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateBatteryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateRcStatusRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateRcStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateRcStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateRcStatusResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateRcStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateRcStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateActuatorControlTargetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateActuatorOutputStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateOdometryRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateOdometryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateOdometryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateOdometryResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateOdometryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateOdometryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRatePositionVelocityNedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateGroundTruthRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateGroundTruthRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateGroundTruthRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateGroundTruthResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateGroundTruthResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateGroundTruthResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateFixedwingMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateImuRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateImuRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateImuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateImuResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateImuResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateImuResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SetRateUnixEpochTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Position* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Position >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Quaternion* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Quaternion >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::EulerAngle* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::EulerAngle >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::EulerAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::AngularVelocityBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::AngularVelocityBody >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::AngularVelocityBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::SpeedNed* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::SpeedNed >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::SpeedNed >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::GpsInfo* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::GpsInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::GpsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Battery* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Battery >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Health* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Health >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::Health >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::RcStatus* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::RcStatus >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::RcStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::StatusText* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::StatusText >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::StatusText >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ActuatorControlTarget* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ActuatorControlTarget >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::ActuatorControlTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::ActuatorOutputStatus* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::ActuatorOutputStatus >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::ActuatorOutputStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Covariance* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Covariance >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::Covariance >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::VelocityBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::VelocityBody >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::VelocityBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::PositionBody* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::PositionBody >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::PositionBody >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Odometry* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Odometry >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::Odometry >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::PositionNed* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::PositionNed >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::PositionNed >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::VelocityNed* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::VelocityNed >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::VelocityNed >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::PositionVelocityNed* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::PositionVelocityNed >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::PositionVelocityNed >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::GroundTruth* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::GroundTruth >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::GroundTruth >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::FixedwingMetrics* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::FixedwingMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::FixedwingMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::AccelerationFrd* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::AccelerationFrd >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::AccelerationFrd >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::AngularVelocityFrd* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::AngularVelocityFrd >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::AngularVelocityFrd >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::MagneticFieldFrd* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::MagneticFieldFrd >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::MagneticFieldFrd >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::Imu* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::Imu >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::Imu >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::telemetry::TelemetryResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::telemetry::TelemetryResult >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::telemetry::TelemetryResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
