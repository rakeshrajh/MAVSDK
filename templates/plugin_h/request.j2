{% if is_async %}
/**
* @brief Callback type for {{ name.lower_snake_case }}_async.
*/
typedef std::function<void({% if has_result %}Result, {% endif %}{{ return_type.name }})> {{ name.lower_snake_case }}_callback_t;

/**
 * @brief {{ method_description | replace('\n', '\n *')}}
 */
void {{ name.lower_snake_case }}_async({% for param in params %}{{ param.type_info.name }} {{ param.name.lower_snake_case }}, {% endfor %}const {{ name.lower_snake_case }}_callback_t callback);
{% endif %}

{% if is_sync %}
/**
 * @brief Synchronous wrapper for {{ name.lower_snake_case }}_async().
 *
 * @return Result of request.
 */
std::pair<Result, {{ return_type.name }}> {{ name.lower_snake_case }}({% for param in params %}{{ param.type_info.name }} {{ param.name.lower_snake_case }}{{ ", " if not loop.last }}{% endfor %}) const;
{% endif %}
