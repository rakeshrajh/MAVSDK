// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/{{ plugin_name.lower_snake_case }}/{{ plugin_name.lower_snake_case }}.proto)

#include "{{ plugin_name.lower_snake_case }}/{{ plugin_name.lower_snake_case }}.grpc.pb.h"
#include "plugins/{{ plugin_name.lower_snake_case }}/{{ plugin_name.lower_snake_case }}.h"

#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <vector>

namespace {{ package.lower_snake_case.split('.')[0] }} {
namespace backend {

template<typename {{ plugin_name.upper_camel_case }} = {{ plugin_name.upper_camel_case }}>
class {{ plugin_name.upper_camel_case }}ServiceImpl final : public rpc::{{ plugin_name.lower_snake_case }}::{{ plugin_name.upper_camel_case }}Service::Service {
public:
    {{ plugin_name.upper_camel_case }}ServiceImpl({{ plugin_name.upper_camel_case }}& {{ plugin_name.lower_snake_case }}) : _{{ plugin_name.lower_snake_case }}({{ plugin_name.lower_snake_case }}) {}

{% if has_result %}
    template<typename ResponseType>
    void fillResponseWithResult(ResponseType* response, mavsdk::{{ plugin_name.upper_camel_case }}::Result& result) const
    {
        auto rpc_result = translateToRpcResult(result);

        auto* rpc_{{ plugin_name.lower_snake_case }}_result = new rpc::{{ plugin_name.lower_snake_case }}::{{ plugin_name.upper_camel_case }}Result();
        rpc_{{ plugin_name.lower_snake_case }}_result->set_result(rpc_result);
        rpc_{{ plugin_name.lower_snake_case }}_result->set_result_str(mavsdk::{{ plugin_name.upper_camel_case }}::result_str(result));

        response->set_allocated_{{ plugin_name.lower_snake_case }}_result(rpc_{{ plugin_name.lower_snake_case }}_result);
    }
{% endif %}

{% for enum in enums -%}
{{ indent(enum, 1) }}

{% endfor -%}

{% for struct in structs -%}
{{ indent(struct, 1) }}

{% endfor -%}

{% for method in methods -%}
{{ indent(method, 1) }}

{% endfor %}
    void stop() {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom) {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom) {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end(); /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    {{ plugin_name.upper_camel_case }} &_{{ plugin_name.lower_snake_case }};
    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises {};
};

} // namespace backend
} // namespace {{ package.lower_snake_case.split('.')[0] }}
